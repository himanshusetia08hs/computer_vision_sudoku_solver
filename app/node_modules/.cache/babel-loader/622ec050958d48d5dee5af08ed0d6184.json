{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { FromPixels } from '@tensorflow/tfjs-core';\nimport { TextureUsage } from '../tex_util';\nimport { FromPixelsProgram } from './FromPixels_utils/from_pixels_gpu';\nimport { FromPixelsPackedProgram } from './FromPixels_utils/from_pixels_packed_gpu';\nexport const fromPixelsConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels\n};\nlet fromPixels2DContext;\nfunction fromPixels(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  let {\n    pixels\n  } = inputs;\n  const {\n    numChannels\n  } = attrs;\n  const isVideo = typeof HTMLVideoElement !== 'undefined' && pixels instanceof HTMLVideoElement;\n  const isImage = typeof HTMLImageElement !== 'undefined' && pixels instanceof HTMLImageElement;\n  const isImageBitmap = typeof ImageBitmap !== 'undefined' && pixels instanceof ImageBitmap;\n  const [width, height] = isVideo ? [pixels.videoWidth, pixels.videoHeight] : [pixels.width, pixels.height];\n  const texShape = [height, width];\n  const outShape = [height, width, numChannels];\n  if (isImage || isVideo || isImageBitmap) {\n    if (fromPixels2DContext == null) {\n      fromPixels2DContext = document.createElement('canvas').getContext('2d');\n    }\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n  // This is a byte texture with pixels.\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(backend.getTexture(tempPixelHandle.dataId), pixels);\n  const program = env().getBool('WEBGL_PACK') ? new FromPixelsPackedProgram(outShape) : new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}","map":{"version":3,"sources":["../../src/kernels/FromPixels.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,GAAG,QAA6C,uBAAuB;AAC/E,SAAQ,UAAU,QAA0C,uBAAuB;AAGnF,SAAQ,YAAY,QAAO,aAAa;AAExC,SAAQ,iBAAiB,QAAO,oCAAoC;AACpE,SAAQ,uBAAuB,QAAO,2CAA2C;AAEjF,OAAO,MAAM,gBAAgB,GAAiB;EAC5C,UAAU,EAAE,UAAU;EACtB,WAAW,EAAE,OAAO;EACpB,UAAU,EAAE;CACb;AAED,IAAI,mBAA6C;AAEjD,SAAS,UAAU,CAAC,IAInB,EAAA;EACC,MAAM;IAAC,MAAM;IAAE,OAAO;IAAE;EAAK,CAAC,GAAG,IAAI;EACrC,IAAI;IAAC;EAAM,CAAC,GAAG,MAAM;EACrB,MAAM;IAAC;EAAW,CAAC,GAAG,KAAK;EAE3B,MAAM,OAAO,GAAG,OAAQ,gBAAiB,KAAK,WAAW,IACrD,MAAM,YAAY,gBAAgB;EACtC,MAAM,OAAO,GAAG,OAAQ,gBAAiB,KAAK,WAAW,IACrD,MAAM,YAAY,gBAAgB;EACtC,MAAM,aAAa,GAAG,OAAO,WAAY,KAAK,WAAW,IACrD,MAAM,YAAY,WAAW;EACjC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,OAAO,GAC3B,CACG,MAA2B,CAAC,UAAU,EACtC,MAA2B,CAAC,WAAW,CACzC,GACD,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC;EAEjC,MAAM,QAAQ,GAAqB,CAAC,MAAM,EAAE,KAAK,CAAC;EAClD,MAAM,QAAQ,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,WAAW,CAAC;EAE7C,IAAI,OAAO,IAAI,OAAO,IAAI,aAAa,EAAE;IACvC,IAAI,mBAAmB,IAAI,IAAI,EAAE;MAC/B,mBAAmB,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC;IACxE;IAED,mBAAmB,CAAC,MAAM,CAAC,KAAK,GAAG,KAAK;IACxC,mBAAmB,CAAC,MAAM,CAAC,MAAM,GAAG,MAAM;IAC1C,mBAAmB,CAAC,SAAS,CACzB,MAA2D,EAC3D,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC;IACxB,MAAM,GAAG,mBAAmB,CAAC,MAAM;EACpC;EAED,MAAM,eAAe,GAAG,OAAO,CAAC,cAAc,CAAC,QAAQ,EAAE,OAAO,CAAC;EACjE;EACA,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,KAAK,GAAG,YAAY,CAAC,MAAM;EACvE,OAAO,CAAC,KAAK,CAAC,wBAAwB,CAClC,OAAO,CAAC,UAAU,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,MAAmB,CAAC;EACpE,MAAM,OAAO,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,GACvC,IAAI,uBAAuB,CAAC,QAAQ,CAAC,GACrC,IAAI,iBAAiB,CAAC,QAAQ,CAAC;EACnC,MAAM,GAAG,GAAG,OAAO,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC,eAAe,CAAC,EAAE,OAAO,CAAC;EACxE,OAAO,CAAC,WAAW,CAAC,eAAe,CAAC,MAAM,CAAC;EAC3C,OAAO,GAAG;AACZ","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { FromPixels } from '@tensorflow/tfjs-core';\nimport { TextureUsage } from '../tex_util';\nimport { FromPixelsProgram } from './FromPixels_utils/from_pixels_gpu';\nimport { FromPixelsPackedProgram } from './FromPixels_utils/from_pixels_packed_gpu';\nexport const fromPixelsConfig = {\n    kernelName: FromPixels,\n    backendName: 'webgl',\n    kernelFunc: fromPixels,\n};\nlet fromPixels2DContext;\nfunction fromPixels(args) {\n    const { inputs, backend, attrs } = args;\n    let { pixels } = inputs;\n    const { numChannels } = attrs;\n    const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n        pixels instanceof HTMLVideoElement;\n    const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n        pixels instanceof HTMLImageElement;\n    const isImageBitmap = typeof (ImageBitmap) !== 'undefined' &&\n        pixels instanceof ImageBitmap;\n    const [width, height] = isVideo ?\n        [\n            pixels.videoWidth,\n            pixels.videoHeight\n        ] :\n        [pixels.width, pixels.height];\n    const texShape = [height, width];\n    const outShape = [height, width, numChannels];\n    if (isImage || isVideo || isImageBitmap) {\n        if (fromPixels2DContext == null) {\n            fromPixels2DContext = document.createElement('canvas').getContext('2d');\n        }\n        fromPixels2DContext.canvas.width = width;\n        fromPixels2DContext.canvas.height = height;\n        fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n        pixels = fromPixels2DContext.canvas;\n    }\n    const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n    // This is a byte texture with pixels.\n    backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n    backend.gpgpu.uploadPixelDataToTexture(backend.getTexture(tempPixelHandle.dataId), pixels);\n    const program = env().getBool('WEBGL_PACK') ?\n        new FromPixelsPackedProgram(outShape) :\n        new FromPixelsProgram(outShape);\n    const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n    backend.disposeData(tempPixelHandle.dataId);\n    return res;\n}\n//# sourceMappingURL=FromPixels.js.map"]},"metadata":{},"sourceType":"module"}