{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport { registerKernel } from '@tensorflow/tfjs-core';\nimport { fusedMatMulConfig } from './kernels/_FusedMatMul';\nimport { absConfig } from './kernels/Abs';\nimport { addConfig } from './kernels/Add';\nimport { addNConfig } from './kernels/AddN';\nimport { argMaxConfig } from './kernels/ArgMax';\nimport { avgPoolConfig } from './kernels/AvgPool';\nimport { batchMatMulConfig } from './kernels/BatchMatMul';\nimport { castConfig } from './kernels/Cast';\nimport { clipByValueConfig } from './kernels/ClipByValue';\nimport { concatConfig } from './kernels/Concat';\nimport { conv2DConfig } from './kernels/Conv2D';\nimport { conv2DBackpropInputConfig } from './kernels/Conv2DBackpropInput';\nimport { cosConfig } from './kernels/Cos';\nimport { cropAndResizeConfig } from './kernels/CropAndResize';\nimport { cumsumConfig } from './kernels/Cumsum';\nimport { depthToSpaceConfig } from './kernels/DepthToSpace';\nimport { depthwiseConv2dNativeConfig } from './kernels/DepthwiseConv2dNative';\nimport { equalConfig } from './kernels/Equal';\nimport { expConfig } from './kernels/Exp';\nimport { expandDimsConfig } from './kernels/ExpandDims';\nimport { fillConfig } from './kernels/Fill';\nimport { flipLeftRightConfig } from './kernels/FlipLeftRight';\nimport { floorConfig } from './kernels/Floor';\nimport { floorDivConfig } from './kernels/FloorDiv';\nimport { fusedBatchNormConfig } from './kernels/FusedBatchNorm';\nimport { fusedConv2DConfig } from './kernels/FusedConv2D';\nimport { fusedDepthwiseConv2DConfig } from './kernels/FusedDepthwiseConv2D';\nimport { gatherNdConfig } from './kernels/GatherNd';\nimport { gatherV2Config } from './kernels/GatherV2';\nimport { greaterConfig } from './kernels/Greater';\nimport { greaterEqualConfig } from './kernels/GreaterEqual';\nimport { identityConfig } from './kernels/Identity';\nimport { leakyReluConfig } from './kernels/LeakyRelu';\nimport { lessConfig } from './kernels/Less';\nimport { lessEqualConfig } from './kernels/LessEqual';\nimport { logConfig } from './kernels/Log';\nimport { logicalAndConfig } from './kernels/LogicalAnd';\nimport { maxConfig } from './kernels/Max';\nimport { maximumConfig } from './kernels/Maximum';\nimport { maxPoolConfig } from './kernels/MaxPool';\nimport { meanConfig } from './kernels/Mean';\nimport { minConfig } from './kernels/Min';\nimport { minimumConfig } from './kernels/Minimum';\nimport { multiplyConfig } from './kernels/Multiply';\nimport { negConfig } from './kernels/Neg';\nimport { nonMaxSuppressionV3Config } from './kernels/NonMaxSuppressionV3';\nimport { nonMaxSuppressionV4Config } from './kernels/NonMaxSuppressionV4';\nimport { nonMaxSuppressionV5Config } from './kernels/NonMaxSuppressionV5';\nimport { notEqualConfig } from './kernels/NotEqual';\nimport { oneHotConfig } from './kernels/OneHot';\nimport { onesLikeConfig } from './kernels/OnesLike';\nimport { packConfig } from './kernels/Pack';\nimport { padV2Config } from './kernels/PadV2';\nimport { powConfig } from './kernels/Pow';\nimport { preluConfig } from './kernels/Prelu';\nimport { prodConfig } from './kernels/Prod';\nimport { rangeConfig } from './kernels/Range';\nimport { realDivConfig } from './kernels/RealDiv';\nimport { reluConfig } from './kernels/Relu';\nimport { relu6Config } from './kernels/Relu6';\nimport { reshapeConfig } from './kernels/Reshape';\nimport { resizeBilinearConfig } from './kernels/ResizeBilinear';\nimport { reverseConfig } from './kernels/Reverse';\nimport { rotateWithOffsetConfig } from './kernels/RotateWithOffset';\nimport { roundConfig } from './kernels/Round';\nimport { rsqrtConfig } from './kernels/Rsqrt';\nimport { scatterNdConfig } from './kernels/ScatterNd';\nimport { selectConfig } from './kernels/Select';\nimport { sigmoidConfig } from './kernels/Sigmoid';\nimport { sinConfig } from './kernels/Sin';\nimport { sliceConfig } from './kernels/Slice';\nimport { softmaxConfig } from './kernels/Softmax';\nimport { splitVConfig } from './kernels/SplitV';\nimport { sqrtConfig } from './kernels/Sqrt';\nimport { squareConfig } from './kernels/Square';\nimport { squaredDifferenceConfig } from './kernels/SquaredDifference';\nimport { stepConfig } from './kernels/Step';\nimport { stridedSliceConfig } from './kernels/StridedSlice';\nimport { subConfig } from './kernels/Sub';\nimport { sumConfig } from './kernels/Sum';\nimport { tanhConfig } from './kernels/Tanh';\nimport { tileConfig } from './kernels/Tile';\nimport { topKConfig } from './kernels/TopK';\nimport { transposeConfig } from './kernels/Transpose';\nimport { unpackConfig } from './kernels/Unpack';\nimport { zerosLikeConfig } from './kernels/ZerosLike';\n// List all kernel configs here\nconst kernelConfigs = [absConfig, addConfig, addNConfig, argMaxConfig, avgPoolConfig, batchMatMulConfig, castConfig, clipByValueConfig, concatConfig, conv2DConfig, conv2DBackpropInputConfig, cosConfig, cropAndResizeConfig, cumsumConfig, depthToSpaceConfig, depthwiseConv2dNativeConfig, equalConfig, expConfig, expandDimsConfig, fillConfig, flipLeftRightConfig, floorConfig, floorDivConfig, fusedMatMulConfig, fusedBatchNormConfig, fusedConv2DConfig, fusedDepthwiseConv2DConfig, gatherNdConfig, gatherV2Config, greaterConfig, greaterEqualConfig, identityConfig, leakyReluConfig, lessConfig, lessEqualConfig, logConfig, logicalAndConfig, maxConfig, maximumConfig, maxPoolConfig, meanConfig, minConfig, minimumConfig, multiplyConfig, negConfig, nonMaxSuppressionV3Config, nonMaxSuppressionV4Config, nonMaxSuppressionV5Config, notEqualConfig, oneHotConfig, onesLikeConfig, packConfig, padV2Config, powConfig, preluConfig, prodConfig, rangeConfig, realDivConfig, reluConfig, relu6Config, reshapeConfig, resizeBilinearConfig, reverseConfig, rotateWithOffsetConfig, rsqrtConfig, roundConfig, scatterNdConfig, selectConfig, sigmoidConfig, sinConfig, sliceConfig, softmaxConfig, splitVConfig, sqrtConfig, squareConfig, squaredDifferenceConfig, stepConfig, stridedSliceConfig, subConfig, sumConfig, tanhConfig, tileConfig, topKConfig, transposeConfig, unpackConfig, zerosLikeConfig];\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}","map":{"version":3,"sources":["../src/register_all_kernels.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport { registerKernel } from '@tensorflow/tfjs-core';\nimport { fusedMatMulConfig } from './kernels/_FusedMatMul';\nimport { absConfig } from './kernels/Abs';\nimport { addConfig } from './kernels/Add';\nimport { addNConfig } from './kernels/AddN';\nimport { argMaxConfig } from './kernels/ArgMax';\nimport { avgPoolConfig } from './kernels/AvgPool';\nimport { batchMatMulConfig } from './kernels/BatchMatMul';\nimport { castConfig } from './kernels/Cast';\nimport { clipByValueConfig } from './kernels/ClipByValue';\nimport { concatConfig } from './kernels/Concat';\nimport { conv2DConfig } from './kernels/Conv2D';\nimport { conv2DBackpropInputConfig } from './kernels/Conv2DBackpropInput';\nimport { cosConfig } from './kernels/Cos';\nimport { cropAndResizeConfig } from './kernels/CropAndResize';\nimport { cumsumConfig } from './kernels/Cumsum';\nimport { depthToSpaceConfig } from './kernels/DepthToSpace';\nimport { depthwiseConv2dNativeConfig } from './kernels/DepthwiseConv2dNative';\nimport { equalConfig } from './kernels/Equal';\nimport { expConfig } from './kernels/Exp';\nimport { expandDimsConfig } from './kernels/ExpandDims';\nimport { fillConfig } from './kernels/Fill';\nimport { flipLeftRightConfig } from './kernels/FlipLeftRight';\nimport { floorConfig } from './kernels/Floor';\nimport { floorDivConfig } from './kernels/FloorDiv';\nimport { fusedBatchNormConfig } from './kernels/FusedBatchNorm';\nimport { fusedConv2DConfig } from './kernels/FusedConv2D';\nimport { fusedDepthwiseConv2DConfig } from './kernels/FusedDepthwiseConv2D';\nimport { gatherNdConfig } from './kernels/GatherNd';\nimport { gatherV2Config } from './kernels/GatherV2';\nimport { greaterConfig } from './kernels/Greater';\nimport { greaterEqualConfig } from './kernels/GreaterEqual';\nimport { identityConfig } from './kernels/Identity';\nimport { leakyReluConfig } from './kernels/LeakyRelu';\nimport { lessConfig } from './kernels/Less';\nimport { lessEqualConfig } from './kernels/LessEqual';\nimport { logConfig } from './kernels/Log';\nimport { logicalAndConfig } from './kernels/LogicalAnd';\nimport { maxConfig } from './kernels/Max';\nimport { maximumConfig } from './kernels/Maximum';\nimport { maxPoolConfig } from './kernels/MaxPool';\nimport { meanConfig } from './kernels/Mean';\nimport { minConfig } from './kernels/Min';\nimport { minimumConfig } from './kernels/Minimum';\nimport { multiplyConfig } from './kernels/Multiply';\nimport { negConfig } from './kernels/Neg';\nimport { nonMaxSuppressionV3Config } from './kernels/NonMaxSuppressionV3';\nimport { nonMaxSuppressionV4Config } from './kernels/NonMaxSuppressionV4';\nimport { nonMaxSuppressionV5Config } from './kernels/NonMaxSuppressionV5';\nimport { notEqualConfig } from './kernels/NotEqual';\nimport { oneHotConfig } from './kernels/OneHot';\nimport { onesLikeConfig } from './kernels/OnesLike';\nimport { packConfig } from './kernels/Pack';\nimport { padV2Config } from './kernels/PadV2';\nimport { powConfig } from './kernels/Pow';\nimport { preluConfig } from './kernels/Prelu';\nimport { prodConfig } from './kernels/Prod';\nimport { rangeConfig } from './kernels/Range';\nimport { realDivConfig } from './kernels/RealDiv';\nimport { reluConfig } from './kernels/Relu';\nimport { relu6Config } from './kernels/Relu6';\nimport { reshapeConfig } from './kernels/Reshape';\nimport { resizeBilinearConfig } from './kernels/ResizeBilinear';\nimport { reverseConfig } from './kernels/Reverse';\nimport { rotateWithOffsetConfig } from './kernels/RotateWithOffset';\nimport { roundConfig } from './kernels/Round';\nimport { rsqrtConfig } from './kernels/Rsqrt';\nimport { scatterNdConfig } from './kernels/ScatterNd';\nimport { selectConfig } from './kernels/Select';\nimport { sigmoidConfig } from './kernels/Sigmoid';\nimport { sinConfig } from './kernels/Sin';\nimport { sliceConfig } from './kernels/Slice';\nimport { softmaxConfig } from './kernels/Softmax';\nimport { splitVConfig } from './kernels/SplitV';\nimport { sqrtConfig } from './kernels/Sqrt';\nimport { squareConfig } from './kernels/Square';\nimport { squaredDifferenceConfig } from './kernels/SquaredDifference';\nimport { stepConfig } from './kernels/Step';\nimport { stridedSliceConfig } from './kernels/StridedSlice';\nimport { subConfig } from './kernels/Sub';\nimport { sumConfig } from './kernels/Sum';\nimport { tanhConfig } from './kernels/Tanh';\nimport { tileConfig } from './kernels/Tile';\nimport { topKConfig } from './kernels/TopK';\nimport { transposeConfig } from './kernels/Transpose';\nimport { unpackConfig } from './kernels/Unpack';\nimport { zerosLikeConfig } from './kernels/ZerosLike';\n// List all kernel configs here\nconst kernelConfigs = [\n    absConfig,\n    addConfig,\n    addNConfig,\n    argMaxConfig,\n    avgPoolConfig,\n    batchMatMulConfig,\n    castConfig,\n    clipByValueConfig,\n    concatConfig,\n    conv2DConfig,\n    conv2DBackpropInputConfig,\n    cosConfig,\n    cropAndResizeConfig,\n    cumsumConfig,\n    depthToSpaceConfig,\n    depthwiseConv2dNativeConfig,\n    equalConfig,\n    expConfig,\n    expandDimsConfig,\n    fillConfig,\n    flipLeftRightConfig,\n    floorConfig,\n    floorDivConfig,\n    fusedMatMulConfig,\n    fusedBatchNormConfig,\n    fusedConv2DConfig,\n    fusedDepthwiseConv2DConfig,\n    gatherNdConfig,\n    gatherV2Config,\n    greaterConfig,\n    greaterEqualConfig,\n    identityConfig,\n    leakyReluConfig,\n    lessConfig,\n    lessEqualConfig,\n    logConfig,\n    logicalAndConfig,\n    maxConfig,\n    maximumConfig,\n    maxPoolConfig,\n    meanConfig,\n    minConfig,\n    minimumConfig,\n    multiplyConfig,\n    negConfig,\n    nonMaxSuppressionV3Config,\n    nonMaxSuppressionV4Config,\n    nonMaxSuppressionV5Config,\n    notEqualConfig,\n    oneHotConfig,\n    onesLikeConfig,\n    packConfig,\n    padV2Config,\n    powConfig,\n    preluConfig,\n    prodConfig,\n    rangeConfig,\n    realDivConfig,\n    reluConfig,\n    relu6Config,\n    reshapeConfig,\n    resizeBilinearConfig,\n    reverseConfig,\n    rotateWithOffsetConfig,\n    rsqrtConfig,\n    roundConfig,\n    scatterNdConfig,\n    selectConfig,\n    sigmoidConfig,\n    sinConfig,\n    sliceConfig,\n    softmaxConfig,\n    splitVConfig,\n    sqrtConfig,\n    squareConfig,\n    squaredDifferenceConfig,\n    stepConfig,\n    stridedSliceConfig,\n    subConfig,\n    sumConfig,\n    tanhConfig,\n    tileConfig,\n    topKConfig,\n    transposeConfig,\n    unpackConfig,\n    zerosLikeConfig\n];\nfor (const kernelConfig of kernelConfigs) {\n    registerKernel(kernelConfig);\n}\n//# sourceMappingURL=register_all_kernels.js.map"]},"metadata":{},"sourceType":"module"}