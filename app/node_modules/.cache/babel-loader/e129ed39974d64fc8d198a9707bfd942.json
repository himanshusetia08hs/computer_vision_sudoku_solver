{"ast":null,"code":"import { deepMap } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nimport { notNumber } from '../../plain/number';\nvar name = 'not';\nvar dependencies = ['typed'];\nexport var createNot = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Logical `not`. Flips boolean value of a given parameter.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.not(x)\n   *\n   * Examples:\n   *\n   *    math.not(2)      // returns false\n   *    math.not(0)      // returns true\n   *    math.not(true)   // returns false\n   *\n   *    a = [2, -7, 0]\n   *    math.not(a)      // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    and, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when input is a zero or empty value.\n   */\n  return typed(name, {\n    number: notNumber,\n    Complex: function Complex(x) {\n      return x.re === 0 && x.im === 0;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.isZero() || x.isNaN();\n    },\n    Unit: function Unit(x) {\n      return x.value !== null ? this(x.value) : true;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"names":["deepMap","factory","notNumber","name","dependencies","createNot","_ref","typed","number","Complex","x","re","im","BigNumber","isZero","isNaN","Unit","value","ArrayMatrix"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/Project/temp/app/node_modules/mathjs/es/function/logical/not.js"],"sourcesContent":["import { deepMap } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nimport { notNumber } from '../../plain/number';\nvar name = 'not';\nvar dependencies = ['typed'];\nexport var createNot = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Logical `not`. Flips boolean value of a given parameter.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.not(x)\n   *\n   * Examples:\n   *\n   *    math.not(2)      // returns false\n   *    math.not(0)      // returns true\n   *    math.not(true)   // returns false\n   *\n   *    a = [2, -7, 0]\n   *    math.not(a)      // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    and, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when input is a zero or empty value.\n   */\n  return typed(name, {\n    number: notNumber,\n    Complex: function Complex(x) {\n      return x.re === 0 && x.im === 0;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.isZero() || x.isNaN();\n    },\n    Unit: function Unit(x) {\n      return x.value !== null ? this(x.value) : true;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,IAAIC,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAChF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOA,KAAK,CAACJ,IAAI,EAAE;IACjBK,MAAM,EAAEN,SAAS;IACjBO,OAAO,EAAE,SAASA,OAAO,CAACC,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACC,EAAE,KAAK,CAAC,IAAID,CAAC,CAACE,EAAE,KAAK,CAAC;IACjC,CAAC;IACDC,SAAS,EAAE,SAASA,SAAS,CAACH,CAAC,EAAE;MAC/B,OAAOA,CAAC,CAACI,MAAM,EAAE,IAAIJ,CAAC,CAACK,KAAK,EAAE;IAChC,CAAC;IACDC,IAAI,EAAE,SAASA,IAAI,CAACN,CAAC,EAAE;MACrB,OAAOA,CAAC,CAACO,KAAK,KAAK,IAAI,GAAG,IAAI,CAACP,CAAC,CAACO,KAAK,CAAC,GAAG,IAAI;IAChD,CAAC;IACD,gBAAgB,EAAE,SAASC,WAAW,CAACR,CAAC,EAAE;MACxC,OAAOV,OAAO,CAACU,CAAC,EAAE,IAAI,CAAC;IACzB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module"}