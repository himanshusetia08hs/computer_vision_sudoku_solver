{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { isInf } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.isInf = function () {\n  this.throwIfDisposed();\n  return isInf(this);\n};","map":{"version":3,"sources":["../../../src/public/chained_ops/is_inf.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH;AACA,SAAQ,KAAK,QAAO,eAAe;AACnC,SAAQ,MAAM,QAAO,cAAc;AASnC,MAAM,CAAC,SAAS,CAAC,KAAK,GAAG,YAAA;EACvB,IAAI,CAAC,eAAe,EAAE;EACtB,OAAO,KAAK,CAAC,IAAI,CAAC;AACpB,CAAC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { isInf } from '../../ops/ops';\nimport { Tensor } from '../../tensor';\nTensor.prototype.isInf = function () {\n    this.throwIfDisposed();\n    return isInf(this);\n};\n//# sourceMappingURL=is_inf.js.map"]},"metadata":{},"sourceType":"module"}