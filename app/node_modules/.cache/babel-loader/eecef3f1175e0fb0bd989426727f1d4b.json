{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { expNumber } from '../../plain/number';\nvar name = 'exp';\nvar dependencies = ['typed'];\nexport var createExp = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Calculate the exponent of a value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.exp(x)\n   *\n   * Examples:\n   *\n   *    math.exp(2)                  // returns number 7.3890560989306495\n   *    math.pow(math.e, 2)          // returns number 7.3890560989306495\n   *    math.log(math.exp(2))        // returns number 2\n   *\n   *    math.exp([1, 2, 3])\n   *    // returns Array [\n   *    //   2.718281828459045,\n   *    //   7.3890560989306495,\n   *    //   20.085536923187668\n   *    // ]\n   *\n   * See also:\n   *\n   *    expm1, log, pow\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate\n   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`\n   */\n  return typed(name, {\n    number: expNumber,\n    Complex: function Complex(x) {\n      return x.exp();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.exp();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // TODO: exp(sparse) should return a dense matrix since exp(0)==1\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"names":["factory","deepMap","expNumber","name","dependencies","createExp","_ref","typed","number","Complex","x","exp","BigNumber","ArrayMatrix"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/P/temp/app/node_modules/mathjs/es/function/arithmetic/exp.js"],"sourcesContent":["import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { expNumber } from '../../plain/number';\nvar name = 'exp';\nvar dependencies = ['typed'];\nexport var createExp = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Calculate the exponent of a value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.exp(x)\n   *\n   * Examples:\n   *\n   *    math.exp(2)                  // returns number 7.3890560989306495\n   *    math.pow(math.e, 2)          // returns number 7.3890560989306495\n   *    math.log(math.exp(2))        // returns number 2\n   *\n   *    math.exp([1, 2, 3])\n   *    // returns Array [\n   *    //   2.718281828459045,\n   *    //   7.3890560989306495,\n   *    //   20.085536923187668\n   *    // ]\n   *\n   * See also:\n   *\n   *    expm1, log, pow\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate\n   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`\n   */\n  return typed(name, {\n    number: expNumber,\n    Complex: function Complex(x) {\n      return x.exp();\n    },\n    BigNumber: function BigNumber(x) {\n      return x.exp();\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // TODO: exp(sparse) should return a dense matrix since exp(0)==1\n      return deepMap(x, this);\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,IAAIC,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,SAAS,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAChF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOA,KAAK,CAACJ,IAAI,EAAE;IACjBK,MAAM,EAAEN,SAAS;IACjBO,OAAO,EAAE,SAASA,OAAO,CAACC,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACC,GAAG,EAAE;IAChB,CAAC;IACDC,SAAS,EAAE,SAASA,SAAS,CAACF,CAAC,EAAE;MAC/B,OAAOA,CAAC,CAACC,GAAG,EAAE;IAChB,CAAC;IACD,gBAAgB,EAAE,SAASE,WAAW,CAACH,CAAC,EAAE;MACxC;MACA,OAAOT,OAAO,CAACS,CAAC,EAAE,IAAI,CAAC;IACzB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module"}