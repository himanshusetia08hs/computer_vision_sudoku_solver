{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { HashTable } from '../../executor/hash_table';\nimport { getParamValue } from './utils';\nexport const executeOp = async (node, tensorMap, context, resourceManager) => {\n  switch (node.op) {\n    case 'HashTable':\n    case 'HashTableV2':\n      {\n        const keyDType = getParamValue('keyDType', node, tensorMap, context);\n        const valueDType = getParamValue('valueDType', node, tensorMap, context);\n        const hashTable = new HashTable(keyDType, valueDType);\n        resourceManager.addHashTable(node.name, hashTable);\n        return [hashTable.handle];\n      }\n    case 'LookupTableImport':\n    case 'LookupTableImportV2':\n      {\n        const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n        const keys = getParamValue('keys', node, tensorMap, context);\n        const values = getParamValue('values', node, tensorMap, context);\n        const hashTable = resourceManager.getHashTableById(handle.id);\n        return [await hashTable.import(keys, values)];\n      }\n    case 'LookupTableFind':\n    case 'LookupTableFindV2':\n      {\n        const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n        const keys = getParamValue('keys', node, tensorMap, context);\n        const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n        const hashTable = resourceManager.getHashTableById(handle.id);\n        return [await hashTable.find(keys, defaultValue)];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'hash_table';","map":{"version":3,"sources":["../../../src/operations/executors/hash_table_executor.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAMH,SAAQ,SAAS,QAAO,2BAA2B;AAInD,SAAQ,aAAa,QAAO,SAAS;AAErC,OAAO,MAAM,SAAS,GAA4B,OAC9C,IAAU,EAAE,SAA0B,EAAE,OAAyB,EACjE,eAAgC,KAAuB;EACzD,QAAQ,IAAI,CAAC,EAAE;IACb,KAAK,WAAW;IAChB,KAAK,aAAa;MAAE;QAClB,MAAM,QAAQ,GACV,aAAa,CAAC,UAAU,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAa;QACnE,MAAM,UAAU,GACZ,aAAa,CAAC,YAAY,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAa;QAErE,MAAM,SAAS,GAAG,IAAI,SAAS,CAAC,QAAQ,EAAE,UAAU,CAAC;QACrD,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC;QAClD,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC;MAC1B;IACD,KAAK,mBAAmB;IACxB,KAAK,qBAAqB;MAAE;QAC1B,MAAM,MAAM,GAAG,aAAa,CACT,aAAa,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EACvC,eAAe,CAAW;QAC7C,MAAM,IAAI,GAAG,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAW;QACtE,MAAM,MAAM,GACR,aAAa,CAAC,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAW;QAE/D,MAAM,SAAS,GAAG,eAAe,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE,CAAC;QAE7D,OAAO,CAAC,MAAM,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;MAC9C;IACD,KAAK,iBAAiB;IACtB,KAAK,mBAAmB;MAAE;QACxB,MAAM,MAAM,GAAG,aAAa,CACT,aAAa,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EACvC,eAAe,CAAW;QAC7C,MAAM,IAAI,GAAG,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAW;QACtE,MAAM,YAAY,GACd,aAAa,CAAC,cAAc,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAW;QAErE,MAAM,SAAS,GAAG,eAAe,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE,CAAC;QAC7D,OAAO,CAAC,MAAM,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;MAClD;IACD;MACE,MAAM,SAAS,CAAC,aAAa,IAAI,CAAC,EAAE,qBAAqB,CAAC;EAAC;AAEjE,CAAC;AAED,OAAO,MAAM,QAAQ,GAAG,YAAY","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { HashTable } from '../../executor/hash_table';\nimport { getParamValue } from './utils';\nexport const executeOp = async (node, tensorMap, context, resourceManager) => {\n    switch (node.op) {\n        case 'HashTable':\n        case 'HashTableV2': {\n            const keyDType = getParamValue('keyDType', node, tensorMap, context);\n            const valueDType = getParamValue('valueDType', node, tensorMap, context);\n            const hashTable = new HashTable(keyDType, valueDType);\n            resourceManager.addHashTable(node.name, hashTable);\n            return [hashTable.handle];\n        }\n        case 'LookupTableImport':\n        case 'LookupTableImportV2': {\n            const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n            const keys = getParamValue('keys', node, tensorMap, context);\n            const values = getParamValue('values', node, tensorMap, context);\n            const hashTable = resourceManager.getHashTableById(handle.id);\n            return [await hashTable.import(keys, values)];\n        }\n        case 'LookupTableFind':\n        case 'LookupTableFindV2': {\n            const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n            const keys = getParamValue('keys', node, tensorMap, context);\n            const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n            const hashTable = resourceManager.getHashTableById(handle.id);\n            return [await hashTable.find(keys, defaultValue)];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'hash_table';\n//# sourceMappingURL=hash_table_executor.js.map"]},"metadata":{},"sourceType":"module"}