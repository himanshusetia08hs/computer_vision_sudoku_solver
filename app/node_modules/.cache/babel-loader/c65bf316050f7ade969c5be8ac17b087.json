{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02';\nimport { createAlgorithm09 } from '../../type/matrix/utils/algorithm09';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nvar name = 'dotMultiply';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'multiplyScalar'];\nexport var createDotMultiply = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar,\n    multiplyScalar = _ref.multiplyScalar;\n  var algorithm02 = createAlgorithm02({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm09 = createAlgorithm09({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm11 = createAlgorithm11({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Multiply two matrices element wise. The function accepts both matrices and\n   * scalar values.\n   *\n   * Syntax:\n   *\n   *    math.dotMultiply(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotMultiply(2, 4) // returns 8\n   *\n   *    a = [[9, 5], [6, 1]]\n   *    b = [[3, 2], [5, 2]]\n   *\n   *    math.dotMultiply(a, b) // returns [[27, 10], [30, 2]]\n   *    math.multiply(a, b)    // returns [[52, 28], [23, 14]]\n   *\n   * See also:\n   *\n   *    multiply, divide, dotDivide\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`\n   */\n\n  return typed(name, {\n    'any, any': multiplyScalar,\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm09(x, y, multiplyScalar, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, multiplyScalar, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm02(x, y, multiplyScalar, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, multiplyScalar);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, multiplyScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, multiplyScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm11(y, x, multiplyScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, multiplyScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();\n    }\n  });\n});","map":{"version":3,"names":["factory","createAlgorithm02","createAlgorithm09","createAlgorithm11","createAlgorithm13","createAlgorithm14","name","dependencies","createDotMultiply","_ref","typed","matrix","equalScalar","multiplyScalar","algorithm02","algorithm09","algorithm11","algorithm13","algorithm14","SparseMatrixSparseMatrix","x","y","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixAny","DenseMatrixAny","anySparseMatrix","anyDenseMatrix","ArrayAny","anyArray"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/Project/temp/app/node_modules/mathjs/es/function/arithmetic/dotMultiply.js"],"sourcesContent":["import { factory } from '../../utils/factory';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02';\nimport { createAlgorithm09 } from '../../type/matrix/utils/algorithm09';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nvar name = 'dotMultiply';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'multiplyScalar'];\nexport var createDotMultiply = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar,\n      multiplyScalar = _ref.multiplyScalar;\n  var algorithm02 = createAlgorithm02({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm09 = createAlgorithm09({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm11 = createAlgorithm11({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Multiply two matrices element wise. The function accepts both matrices and\n   * scalar values.\n   *\n   * Syntax:\n   *\n   *    math.dotMultiply(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotMultiply(2, 4) // returns 8\n   *\n   *    a = [[9, 5], [6, 1]]\n   *    b = [[3, 2], [5, 2]]\n   *\n   *    math.dotMultiply(a, b) // returns [[27, 10], [30, 2]]\n   *    math.multiply(a, b)    // returns [[52, 28], [23, 14]]\n   *\n   * See also:\n   *\n   *    multiply, divide, dotDivide\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`\n   */\n\n  return typed(name, {\n    'any, any': multiplyScalar,\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm09(x, y, multiplyScalar, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, multiplyScalar, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm02(x, y, multiplyScalar, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, multiplyScalar);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, multiplyScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, multiplyScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm11(y, x, multiplyScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, multiplyScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();\n    }\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}