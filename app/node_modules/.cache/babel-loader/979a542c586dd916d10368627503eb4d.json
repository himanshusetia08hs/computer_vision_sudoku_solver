{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringSplit } from '@tensorflow/tfjs-core';\nimport { stringSplitImplCPU } from '../kernel_utils/shared';\nfunction stringSplit(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    input,\n    delimiter\n  } = inputs;\n  const {\n    skipEmpty\n  } = attrs;\n  const inputVals = backend.readSync(input.dataId);\n  const delimiterVals = backend.readSync(delimiter.dataId);\n  const [indices, values, shape] = stringSplitImplCPU(inputVals, delimiterVals[0], skipEmpty);\n  const outputSize = values.length;\n  const indicesOut = backend.makeOutput([outputSize, 2], 'int32');\n  const indicesOutVals = backend.typedArrayFromHeap(indicesOut);\n  indicesOutVals.set(indices);\n  const valuesOut = backend.makeOutput([outputSize], 'string');\n  const valuesOutData = backend.dataIdMap.get(valuesOut.dataId);\n  valuesOutData.stringBytes = values;\n  const shapeOut = backend.makeOutput([2], 'int32');\n  const shapeOutVals = backend.typedArrayFromHeap(shapeOut);\n  shapeOutVals.set(shape);\n  return [indicesOut, valuesOut, shapeOut];\n}\nexport const stringSplitConfig = {\n  kernelName: StringSplit,\n  backendName: 'wasm',\n  kernelFunc: stringSplit\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-wasm/src/kernels/StringSplit.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,WAAW,QAAwD,uBAAuB;AAG5H,SAAQ,kBAAkB,QAAO,wBAAwB;AAEzD,SAAS,WAAW,CAAC,IAIpB,EAAA;EACC,MAAM;IAAC,OAAO;IAAE,MAAM;IAAE;EAAK,CAAC,GAAG,IAAI;EACrC,MAAM;IAAC,KAAK;IAAE;EAAS,CAAC,GAAG,MAAM;EACjC,MAAM;IAAC;EAAS,CAAC,GAAG,KAAK;EAEzB,MAAM,SAAS,GAAG,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAiB;EAChE,MAAM,aAAa,GAAG,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAiB;EAExE,MAAM,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,GAC1B,kBAAkB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC;EAC9D,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM;EAEhC,MAAM,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC;EAC/D,MAAM,cAAc,GAAG,OAAO,CAAC,kBAAkB,CAAC,UAAU,CAAC;EAC7D,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC;EAE3B,MAAM,SAAS,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,UAAU,CAAC,EAAE,QAAQ,CAAC;EAC5D,MAAM,aAAa,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC;EAC7D,aAAa,CAAC,WAAW,GAAG,MAAM;EAElC,MAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC;EACjD,MAAM,YAAY,GAAG,OAAO,CAAC,kBAAkB,CAAC,QAAQ,CAAC;EACzD,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC;EAEvB,OAAO,CAAC,UAAU,EAAE,SAAS,EAAE,QAAQ,CAAC;AAC1C;AAEA,OAAO,MAAM,iBAAiB,GAAiB;EAC7C,UAAU,EAAE,WAAW;EACvB,WAAW,EAAE,MAAM;EACnB,UAAU,EAAE;CACb","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\nimport {stringSplitImplCPU} from '../kernel_utils/shared';\n\nfunction stringSplit(args: {\n  backend: BackendWasm,\n  inputs: StringSplitInputs,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {backend, inputs, attrs} = args;\n  const {input, delimiter} = inputs;\n  const {skipEmpty} = attrs;\n\n  const inputVals = backend.readSync(input.dataId) as Uint8Array[];\n  const delimiterVals = backend.readSync(delimiter.dataId) as Uint8Array[];\n\n  const [indices, values, shape] =\n      stringSplitImplCPU(inputVals, delimiterVals[0], skipEmpty);\n  const outputSize = values.length;\n\n  const indicesOut = backend.makeOutput([outputSize, 2], 'int32');\n  const indicesOutVals = backend.typedArrayFromHeap(indicesOut);\n  indicesOutVals.set(indices);\n\n  const valuesOut = backend.makeOutput([outputSize], 'string');\n  const valuesOutData = backend.dataIdMap.get(valuesOut.dataId);\n  valuesOutData.stringBytes = values;\n\n  const shapeOut = backend.makeOutput([2], 'int32');\n  const shapeOutVals = backend.typedArrayFromHeap(shapeOut);\n  shapeOutVals.set(shape);\n\n  return [indicesOut, valuesOut, shapeOut];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'wasm',\n  kernelFunc: stringSplit as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}