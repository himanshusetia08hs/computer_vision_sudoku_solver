{"ast":null,"code":"import { typeOf } from '../../utils/is';\nimport { factory } from '../../utils/factory';\nimport { noBignumber, noFraction } from '../../utils/noop';\nvar name = 'numeric';\nvar dependencies = ['number', '?bignumber', '?fraction'];\nexport var createNumeric = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var _number = _ref.number,\n    bignumber = _ref.bignumber,\n    fraction = _ref.fraction;\n  var validInputTypes = {\n    string: true,\n    number: true,\n    BigNumber: true,\n    Fraction: true\n  }; // Load the conversion functions for each output type\n\n  var validOutputTypes = {\n    number: function number(x) {\n      return _number(x);\n    },\n    BigNumber: bignumber ? function (x) {\n      return bignumber(x);\n    } : noBignumber,\n    Fraction: fraction ? function (x) {\n      return fraction(x);\n    } : noFraction\n  };\n  /**\n   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.\n   *\n   * Syntax:\n   *\n   *    math.numeric(x)\n   *\n   * Examples:\n   *\n   *    math.numeric('4')                           // returns number 4\n   *    math.numeric('4', 'number')                 // returns number 4\n   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4\n   *    math.numeric('4', 'Fraction')               // returns Fraction 4\n   *    math.numeric(4, 'Fraction')                 // returns Fraction 4\n   *    math.numeric(math.fraction(2, 5), 'number') // returns number 0.4\n   *\n   * See also:\n   *\n   *    number, fraction, bignumber, string, format\n   *\n   * @param {string | number | BigNumber | Fraction } value\n   *              A numeric value or a string containing a numeric value\n   * @param {string} outputType\n   *              Desired numeric output type.\n   *              Available values: 'number', 'BigNumber', or 'Fraction'\n   * @return {number | BigNumber | Fraction}\n   *              Returns an instance of the numeric in the requested type\n   */\n\n  return function numeric(value, outputType) {\n    var inputType = typeOf(value);\n    if (!(inputType in validInputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' of type \"' + inputType + '\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\n    }\n    if (!(outputType in validOutputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' to type \"' + outputType + '\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\n    }\n    if (outputType === inputType) {\n      return value;\n    } else {\n      return validOutputTypes[outputType](value);\n    }\n  };\n});","map":{"version":3,"names":["typeOf","factory","noBignumber","noFraction","name","dependencies","createNumeric","_ref","_number","number","bignumber","fraction","validInputTypes","string","BigNumber","Fraction","validOutputTypes","x","numeric","value","outputType","inputType","TypeError","Object","keys","join"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/Project/temp/app/node_modules/mathjs/es/function/utils/numeric.js"],"sourcesContent":["import { typeOf } from '../../utils/is';\nimport { factory } from '../../utils/factory';\nimport { noBignumber, noFraction } from '../../utils/noop';\nvar name = 'numeric';\nvar dependencies = ['number', '?bignumber', '?fraction'];\nexport var createNumeric = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var _number = _ref.number,\n      bignumber = _ref.bignumber,\n      fraction = _ref.fraction;\n  var validInputTypes = {\n    string: true,\n    number: true,\n    BigNumber: true,\n    Fraction: true\n  }; // Load the conversion functions for each output type\n\n  var validOutputTypes = {\n    number: function number(x) {\n      return _number(x);\n    },\n    BigNumber: bignumber ? function (x) {\n      return bignumber(x);\n    } : noBignumber,\n    Fraction: fraction ? function (x) {\n      return fraction(x);\n    } : noFraction\n  };\n  /**\n   * Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.\n   *\n   * Syntax:\n   *\n   *    math.numeric(x)\n   *\n   * Examples:\n   *\n   *    math.numeric('4')                           // returns number 4\n   *    math.numeric('4', 'number')                 // returns number 4\n   *    math.numeric('4', 'BigNumber')              // returns BigNumber 4\n   *    math.numeric('4', 'Fraction')               // returns Fraction 4\n   *    math.numeric(4, 'Fraction')                 // returns Fraction 4\n   *    math.numeric(math.fraction(2, 5), 'number') // returns number 0.4\n   *\n   * See also:\n   *\n   *    number, fraction, bignumber, string, format\n   *\n   * @param {string | number | BigNumber | Fraction } value\n   *              A numeric value or a string containing a numeric value\n   * @param {string} outputType\n   *              Desired numeric output type.\n   *              Available values: 'number', 'BigNumber', or 'Fraction'\n   * @return {number | BigNumber | Fraction}\n   *              Returns an instance of the numeric in the requested type\n   */\n\n  return function numeric(value, outputType) {\n    var inputType = typeOf(value);\n\n    if (!(inputType in validInputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' of type \"' + inputType + '\"; valid input types are ' + Object.keys(validInputTypes).join(', '));\n    }\n\n    if (!(outputType in validOutputTypes)) {\n      throw new TypeError('Cannot convert ' + value + ' to type \"' + outputType + '\"; valid output types are ' + Object.keys(validOutputTypes).join(', '));\n    }\n\n    if (outputType === inputType) {\n      return value;\n    } else {\n      return validOutputTypes[outputType](value);\n    }\n  };\n});"],"mappings":"AAAA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,SAASC,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,WAAW,EAAEC,UAAU,QAAQ,kBAAkB;AAC1D,IAAIC,IAAI,GAAG,SAAS;AACpB,IAAIC,YAAY,GAAG,CAAC,QAAQ,EAAE,YAAY,EAAE,WAAW,CAAC;AACxD,OAAO,IAAIC,aAAa,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACpF,IAAIC,OAAO,GAAGD,IAAI,CAACE,MAAM;IACrBC,SAAS,GAAGH,IAAI,CAACG,SAAS;IAC1BC,QAAQ,GAAGJ,IAAI,CAACI,QAAQ;EAC5B,IAAIC,eAAe,GAAG;IACpBC,MAAM,EAAE,IAAI;IACZJ,MAAM,EAAE,IAAI;IACZK,SAAS,EAAE,IAAI;IACfC,QAAQ,EAAE;EACZ,CAAC,CAAC,CAAC;;EAEH,IAAIC,gBAAgB,GAAG;IACrBP,MAAM,EAAE,SAASA,MAAM,CAACQ,CAAC,EAAE;MACzB,OAAOT,OAAO,CAACS,CAAC,CAAC;IACnB,CAAC;IACDH,SAAS,EAAEJ,SAAS,GAAG,UAAUO,CAAC,EAAE;MAClC,OAAOP,SAAS,CAACO,CAAC,CAAC;IACrB,CAAC,GAAGf,WAAW;IACfa,QAAQ,EAAEJ,QAAQ,GAAG,UAAUM,CAAC,EAAE;MAChC,OAAON,QAAQ,CAACM,CAAC,CAAC;IACpB,CAAC,GAAGd;EACN,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,OAAO,SAASe,OAAO,CAACC,KAAK,EAAEC,UAAU,EAAE;IACzC,IAAIC,SAAS,GAAGrB,MAAM,CAACmB,KAAK,CAAC;IAE7B,IAAI,EAAEE,SAAS,IAAIT,eAAe,CAAC,EAAE;MACnC,MAAM,IAAIU,SAAS,CAAC,iBAAiB,GAAGH,KAAK,GAAG,YAAY,GAAGE,SAAS,GAAG,2BAA2B,GAAGE,MAAM,CAACC,IAAI,CAACZ,eAAe,CAAC,CAACa,IAAI,CAAC,IAAI,CAAC,CAAC;IACnJ;IAEA,IAAI,EAAEL,UAAU,IAAIJ,gBAAgB,CAAC,EAAE;MACrC,MAAM,IAAIM,SAAS,CAAC,iBAAiB,GAAGH,KAAK,GAAG,YAAY,GAAGC,UAAU,GAAG,4BAA4B,GAAGG,MAAM,CAACC,IAAI,CAACR,gBAAgB,CAAC,CAACS,IAAI,CAAC,IAAI,CAAC,CAAC;IACtJ;IAEA,IAAIL,UAAU,KAAKC,SAAS,EAAE;MAC5B,OAAOF,KAAK;IACd,CAAC,MAAM;MACL,OAAOH,gBAAgB,CAACI,UAAU,CAAC,CAACD,KAAK,CAAC;IAC5C;EACF,CAAC;AACH,CAAC,CAAC"},"metadata":{},"sourceType":"module"}