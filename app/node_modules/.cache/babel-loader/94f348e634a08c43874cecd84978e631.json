{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reverse, util } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\nlet wasmReverse;\nfunction setup(backend) {\n  wasmReverse = backend.wasm.cwrap(Reverse, null, ['number', 'array', 'number', 'array', 'number', 'number' // out_id\n  ]);\n}\n\nexport function reverse(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    dims\n  } = attrs;\n  const axes = util.parseAxisParam(dims, x.shape);\n  if (x.shape.length === 0) {\n    return identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  }\n  const out = backend.makeOutput(x.shape, x.dtype);\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const axesBytes = new Uint8Array(new Int32Array(axes).buffer);\n  const outShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n  wasmReverse(xId, axesBytes, axes.length, outShapeBytes, x.shape.length, outId);\n  return reshape({\n    inputs: {\n      x: out\n    },\n    attrs: {\n      shape: x.shape\n    },\n    backend\n  });\n}\nexport const reverseConfig = {\n  kernelName: Reverse,\n  backendName: 'wasm',\n  kernelFunc: reverse,\n  setupFunc: setup\n};","map":{"version":3,"sources":["../../src/kernels/Reverse.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,OAAO,EAA2C,IAAI,QAAO,uBAAuB;AAItH,SAAQ,QAAQ,QAAO,YAAY;AACnC,SAAQ,OAAO,QAAO,WAAW;AAEjC,IAAI,WAE8C;AAElD,SAAS,KAAK,CAAC,OAAoB,EAAA;EACjC,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,EAAE,CAC9C,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;;AAEA,OAAM,SAAU,OAAO,CACnB,IAAwE,EAAA;EAE1E,MAAM;IAAC,MAAM;IAAE,OAAO;IAAE;EAAK,CAAC,GAAG,IAAI;EACrC,MAAM;IAAC;EAAC,CAAC,GAAG,MAAM;EAClB,MAAM;IAAC;EAAI,CAAC,GAAG,KAAK;EAEpB,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC;EAE/C,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;IACxB,OAAO,QAAQ,CAAC;MAAC,MAAM,EAAE;QAAC;MAAC,CAAC;MAAE;IAAO,CAAC,CAAC;EACxC;EAED,MAAM,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC;EAChD,MAAM,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE;EAC9C,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE;EAElD,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;EAC7D,MAAM,aAAa,GAAG,IAAI,UAAU,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC;EAEpE,WAAW,CACP,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC;EAEtE,OAAO,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAG,CAAC;IAAE,KAAK,EAAE;MAAC,KAAK,EAAE,CAAC,CAAC;IAAK,CAAC;IAAE;EAAO,CAAC,CAAC;AACtE;AAEA,OAAO,MAAM,aAAa,GAAiB;EACzC,UAAU,EAAE,OAAO;EACnB,WAAW,EAAE,MAAM;EACnB,UAAU,EAAE,OAA2B;EACvC,SAAS,EAAE;CACZ","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reverse, util } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\nlet wasmReverse;\nfunction setup(backend) {\n    wasmReverse = backend.wasm.cwrap(Reverse, null, [\n        'number',\n        'array',\n        'number',\n        'array',\n        'number',\n        'number' // out_id\n    ]);\n}\nexport function reverse(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { dims } = attrs;\n    const axes = util.parseAxisParam(dims, x.shape);\n    if (x.shape.length === 0) {\n        return identity({ inputs: { x }, backend });\n    }\n    const out = backend.makeOutput(x.shape, x.dtype);\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    const axesBytes = new Uint8Array(new Int32Array(axes).buffer);\n    const outShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n    wasmReverse(xId, axesBytes, axes.length, outShapeBytes, x.shape.length, outId);\n    return reshape({ inputs: { x: out }, attrs: { shape: x.shape }, backend });\n}\nexport const reverseConfig = {\n    kernelName: Reverse,\n    backendName: 'wasm',\n    kernelFunc: reverse,\n    setupFunc: setup\n};\n//# sourceMappingURL=Reverse.js.map"]},"metadata":{},"sourceType":"module"}