{"ast":null,"code":"import { isBigNumber } from '../../utils/is';\nimport { factory } from '../../utils/factory';\nvar name = 'intersect';\nvar dependencies = ['typed', 'config', 'abs', 'add', 'addScalar', 'matrix', 'multiply', 'multiplyScalar', 'divideScalar', 'subtract', 'smaller', 'equalScalar'];\nexport var createIntersect = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    abs = _ref.abs,\n    add = _ref.add,\n    addScalar = _ref.addScalar,\n    matrix = _ref.matrix,\n    multiply = _ref.multiply,\n    multiplyScalar = _ref.multiplyScalar,\n    divideScalar = _ref.divideScalar,\n    subtract = _ref.subtract,\n    smaller = _ref.smaller,\n    equalScalar = _ref.equalScalar;\n\n  /**\n   * Calculates the point of intersection of two lines in two or three dimensions\n   * and of a line and a plane in three dimensions. The inputs are in the form of\n   * arrays or 1 dimensional matrices. The line intersection functions return null\n   * if the lines do not meet.\n   *\n   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.\n   *\n   * Syntax:\n   *\n   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)\n   *    math.intersect(endPoint1, endPoint2, planeCoefficients)\n   *\n   * Examples:\n   *\n   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]\n   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]\n   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]\n   *\n   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line\n   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line\n   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line\n   *                              OR Co-efficients of the plane's equation\n   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line\n   *                              OR null if the calculation is for line and plane\n   * @return {Array}              Returns the point of intersection of lines/lines-planes\n   */\n  return typed('intersect', {\n    'Array, Array, Array': function ArrayArrayArray(x, y, plane) {\n      if (!_3d(x)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n      }\n      if (!_3d(y)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n      }\n      if (!_4d(plane)) {\n        throw new TypeError('Array with 4 numbers expected as third argument');\n      }\n      return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);\n    },\n    'Array, Array, Array, Array': function ArrayArrayArrayArray(w, x, y, z) {\n      if (w.length === 2) {\n        if (!_2d(w)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n        }\n        if (!_2d(y)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n        }\n        if (!_2d(z)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');\n        }\n        return _intersect2d(w, x, y, z);\n      } else if (w.length === 3) {\n        if (!_3d(w)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n        }\n        if (!_3d(x)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n        }\n        if (!_3d(y)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');\n        }\n        if (!_3d(z)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');\n        }\n        return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);\n      } else {\n        throw new TypeError('Arrays with two or thee dimensional points expected');\n      }\n    },\n    'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(x, y, plane) {\n      return matrix(this(x.valueOf(), y.valueOf(), plane.valueOf()));\n    },\n    'Matrix, Matrix, Matrix, Matrix': function MatrixMatrixMatrixMatrix(w, x, y, z) {\n      // TODO: output matrix type should match input matrix type\n      return matrix(this(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));\n    }\n  });\n  function _isNumeric(a) {\n    // intersect supports numbers and bignumbers\n    return typeof a === 'number' || isBigNumber(a);\n  }\n  function _2d(x) {\n    return x.length === 2 && _isNumeric(x[0]) && _isNumeric(x[1]);\n  }\n  function _3d(x) {\n    return x.length === 3 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]);\n  }\n  function _4d(x) {\n    return x.length === 4 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]) && _isNumeric(x[3]);\n  }\n  function _intersect2d(p1a, p1b, p2a, p2b) {\n    var o1 = p1a;\n    var o2 = p2a;\n    var d1 = subtract(o1, p1b);\n    var d2 = subtract(o2, p2b);\n    var det = subtract(multiplyScalar(d1[0], d2[1]), multiplyScalar(d2[0], d1[1]));\n    if (smaller(abs(det), config.epsilon)) {\n      return null;\n    }\n    var d20o11 = multiplyScalar(d2[0], o1[1]);\n    var d21o10 = multiplyScalar(d2[1], o1[0]);\n    var d20o21 = multiplyScalar(d2[0], o2[1]);\n    var d21o20 = multiplyScalar(d2[1], o2[0]);\n    var t = divideScalar(addScalar(subtract(subtract(d20o11, d21o10), d20o21), d21o20), det);\n    return add(multiply(d1, t), o1);\n  }\n  function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {\n    // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)\n    var add1 = multiplyScalar(subtract(a, b), subtract(c, d));\n    var add2 = multiplyScalar(subtract(e, f), subtract(g, h));\n    var add3 = multiplyScalar(subtract(i, j), subtract(k, l));\n    return addScalar(addScalar(add1, add2), add3);\n  }\n  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {\n    var d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);\n    var d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);\n    var d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);\n    var d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);\n    var d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);\n    var ta = divideScalar(subtract(multiplyScalar(d1343, d4321), multiplyScalar(d1321, d4343)), subtract(multiplyScalar(d2121, d4343), multiplyScalar(d4321, d4321)));\n    var tb = divideScalar(addScalar(d1343, multiplyScalar(ta, d4321)), d4343);\n    var pax = addScalar(x1, multiplyScalar(ta, subtract(x2, x1)));\n    var pay = addScalar(y1, multiplyScalar(ta, subtract(y2, y1)));\n    var paz = addScalar(z1, multiplyScalar(ta, subtract(z2, z1)));\n    var pbx = addScalar(x3, multiplyScalar(tb, subtract(x4, x3)));\n    var pby = addScalar(y3, multiplyScalar(tb, subtract(y4, y3)));\n    var pbz = addScalar(z3, multiplyScalar(tb, subtract(z4, z3)));\n    if (equalScalar(pax, pbx) && equalScalar(pay, pby) && equalScalar(paz, pbz)) {\n      return [pax, pay, paz];\n    } else {\n      return null;\n    }\n  }\n  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {\n    var x1x = multiplyScalar(x1, x);\n    var x2x = multiplyScalar(x2, x);\n    var y1y = multiplyScalar(y1, y);\n    var y2y = multiplyScalar(y2, y);\n    var z1z = multiplyScalar(z1, z);\n    var z2z = multiplyScalar(z2, z);\n    var t = divideScalar(subtract(subtract(subtract(c, x1x), y1y), z1z), subtract(subtract(subtract(addScalar(addScalar(x2x, y2y), z2z), x1x), y1y), z1z));\n    var px = addScalar(x1, multiplyScalar(t, subtract(x2, x1)));\n    var py = addScalar(y1, multiplyScalar(t, subtract(y2, y1)));\n    var pz = addScalar(z1, multiplyScalar(t, subtract(z2, z1)));\n    return [px, py, pz]; // TODO: Add cases when line is parallel to the plane:\n    //       (a) no intersection,\n    //       (b) line contained in plane\n  }\n});","map":{"version":3,"names":["isBigNumber","factory","name","dependencies","createIntersect","_ref","typed","config","abs","add","addScalar","matrix","multiply","multiplyScalar","divideScalar","subtract","smaller","equalScalar","ArrayArrayArray","x","y","plane","_3d","TypeError","_4d","_intersectLinePlane","ArrayArrayArrayArray","w","z","length","_2d","_intersect2d","_intersect3d","MatrixMatrixMatrix","valueOf","MatrixMatrixMatrixMatrix","_isNumeric","a","p1a","p1b","p2a","p2b","o1","o2","d1","d2","det","epsilon","d20o11","d21o10","d20o21","d21o20","t","_intersect3dHelper","b","c","d","e","f","g","h","i","j","k","l","add1","add2","add3","x1","y1","z1","x2","y2","z2","x3","y3","z3","x4","y4","z4","d1343","d4321","d1321","d4343","d2121","ta","tb","pax","pay","paz","pbx","pby","pbz","x1x","x2x","y1y","y2y","z1z","z2z","px","py","pz"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/P/temp/app/node_modules/mathjs/es/function/geometry/intersect.js"],"sourcesContent":["import { isBigNumber } from '../../utils/is';\nimport { factory } from '../../utils/factory';\nvar name = 'intersect';\nvar dependencies = ['typed', 'config', 'abs', 'add', 'addScalar', 'matrix', 'multiply', 'multiplyScalar', 'divideScalar', 'subtract', 'smaller', 'equalScalar'];\nexport var createIntersect = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      abs = _ref.abs,\n      add = _ref.add,\n      addScalar = _ref.addScalar,\n      matrix = _ref.matrix,\n      multiply = _ref.multiply,\n      multiplyScalar = _ref.multiplyScalar,\n      divideScalar = _ref.divideScalar,\n      subtract = _ref.subtract,\n      smaller = _ref.smaller,\n      equalScalar = _ref.equalScalar;\n\n  /**\n   * Calculates the point of intersection of two lines in two or three dimensions\n   * and of a line and a plane in three dimensions. The inputs are in the form of\n   * arrays or 1 dimensional matrices. The line intersection functions return null\n   * if the lines do not meet.\n   *\n   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.\n   *\n   * Syntax:\n   *\n   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)\n   *    math.intersect(endPoint1, endPoint2, planeCoefficients)\n   *\n   * Examples:\n   *\n   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10])              // Returns [5, 5]\n   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0])  // Returns [5, 5, 0]\n   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])            // Returns [7, -4, 3]\n   *\n   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line\n   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line\n   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line\n   *                              OR Co-efficients of the plane's equation\n   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line\n   *                              OR null if the calculation is for line and plane\n   * @return {Array}              Returns the point of intersection of lines/lines-planes\n   */\n  return typed('intersect', {\n    'Array, Array, Array': function ArrayArrayArray(x, y, plane) {\n      if (!_3d(x)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n      }\n\n      if (!_3d(y)) {\n        throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n      }\n\n      if (!_4d(plane)) {\n        throw new TypeError('Array with 4 numbers expected as third argument');\n      }\n\n      return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);\n    },\n    'Array, Array, Array, Array': function ArrayArrayArrayArray(w, x, y, z) {\n      if (w.length === 2) {\n        if (!_2d(w)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n        }\n\n        if (!_2d(z)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for fourth argument');\n        }\n\n        return _intersect2d(w, x, y, z);\n      } else if (w.length === 3) {\n        if (!_3d(w)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_3d(x)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for third argument');\n        }\n\n        if (!_3d(z)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for fourth argument');\n        }\n\n        return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);\n      } else {\n        throw new TypeError('Arrays with two or thee dimensional points expected');\n      }\n    },\n    'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(x, y, plane) {\n      return matrix(this(x.valueOf(), y.valueOf(), plane.valueOf()));\n    },\n    'Matrix, Matrix, Matrix, Matrix': function MatrixMatrixMatrixMatrix(w, x, y, z) {\n      // TODO: output matrix type should match input matrix type\n      return matrix(this(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));\n    }\n  });\n\n  function _isNumeric(a) {\n    // intersect supports numbers and bignumbers\n    return typeof a === 'number' || isBigNumber(a);\n  }\n\n  function _2d(x) {\n    return x.length === 2 && _isNumeric(x[0]) && _isNumeric(x[1]);\n  }\n\n  function _3d(x) {\n    return x.length === 3 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]);\n  }\n\n  function _4d(x) {\n    return x.length === 4 && _isNumeric(x[0]) && _isNumeric(x[1]) && _isNumeric(x[2]) && _isNumeric(x[3]);\n  }\n\n  function _intersect2d(p1a, p1b, p2a, p2b) {\n    var o1 = p1a;\n    var o2 = p2a;\n    var d1 = subtract(o1, p1b);\n    var d2 = subtract(o2, p2b);\n    var det = subtract(multiplyScalar(d1[0], d2[1]), multiplyScalar(d2[0], d1[1]));\n\n    if (smaller(abs(det), config.epsilon)) {\n      return null;\n    }\n\n    var d20o11 = multiplyScalar(d2[0], o1[1]);\n    var d21o10 = multiplyScalar(d2[1], o1[0]);\n    var d20o21 = multiplyScalar(d2[0], o2[1]);\n    var d21o20 = multiplyScalar(d2[1], o2[0]);\n    var t = divideScalar(addScalar(subtract(subtract(d20o11, d21o10), d20o21), d21o20), det);\n    return add(multiply(d1, t), o1);\n  }\n\n  function _intersect3dHelper(a, b, c, d, e, f, g, h, i, j, k, l) {\n    // (a - b)*(c - d) + (e - f)*(g - h) + (i - j)*(k - l)\n    var add1 = multiplyScalar(subtract(a, b), subtract(c, d));\n    var add2 = multiplyScalar(subtract(e, f), subtract(g, h));\n    var add3 = multiplyScalar(subtract(i, j), subtract(k, l));\n    return addScalar(addScalar(add1, add2), add3);\n  }\n\n  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) {\n    var d1343 = _intersect3dHelper(x1, x3, x4, x3, y1, y3, y4, y3, z1, z3, z4, z3);\n\n    var d4321 = _intersect3dHelper(x4, x3, x2, x1, y4, y3, y2, y1, z4, z3, z2, z1);\n\n    var d1321 = _intersect3dHelper(x1, x3, x2, x1, y1, y3, y2, y1, z1, z3, z2, z1);\n\n    var d4343 = _intersect3dHelper(x4, x3, x4, x3, y4, y3, y4, y3, z4, z3, z4, z3);\n\n    var d2121 = _intersect3dHelper(x2, x1, x2, x1, y2, y1, y2, y1, z2, z1, z2, z1);\n\n    var ta = divideScalar(subtract(multiplyScalar(d1343, d4321), multiplyScalar(d1321, d4343)), subtract(multiplyScalar(d2121, d4343), multiplyScalar(d4321, d4321)));\n    var tb = divideScalar(addScalar(d1343, multiplyScalar(ta, d4321)), d4343);\n    var pax = addScalar(x1, multiplyScalar(ta, subtract(x2, x1)));\n    var pay = addScalar(y1, multiplyScalar(ta, subtract(y2, y1)));\n    var paz = addScalar(z1, multiplyScalar(ta, subtract(z2, z1)));\n    var pbx = addScalar(x3, multiplyScalar(tb, subtract(x4, x3)));\n    var pby = addScalar(y3, multiplyScalar(tb, subtract(y4, y3)));\n    var pbz = addScalar(z3, multiplyScalar(tb, subtract(z4, z3)));\n\n    if (equalScalar(pax, pbx) && equalScalar(pay, pby) && equalScalar(paz, pbz)) {\n      return [pax, pay, paz];\n    } else {\n      return null;\n    }\n  }\n\n  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c) {\n    var x1x = multiplyScalar(x1, x);\n    var x2x = multiplyScalar(x2, x);\n    var y1y = multiplyScalar(y1, y);\n    var y2y = multiplyScalar(y2, y);\n    var z1z = multiplyScalar(z1, z);\n    var z2z = multiplyScalar(z2, z);\n    var t = divideScalar(subtract(subtract(subtract(c, x1x), y1y), z1z), subtract(subtract(subtract(addScalar(addScalar(x2x, y2y), z2z), x1x), y1y), z1z));\n    var px = addScalar(x1, multiplyScalar(t, subtract(x2, x1)));\n    var py = addScalar(y1, multiplyScalar(t, subtract(y2, y1)));\n    var pz = addScalar(z1, multiplyScalar(t, subtract(z2, z1)));\n    return [px, py, pz]; // TODO: Add cases when line is parallel to the plane:\n    //       (a) no intersection,\n    //       (b) line contained in plane\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}