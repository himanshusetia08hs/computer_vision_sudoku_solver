{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { gather_util, GatherNd } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmGatherNd;\nfunction setup(backend) {\n  wasmGatherNd = backend.wasm.cwrap(GatherNd, null /*void*/, ['number', 'number', 'number', 'number', 'number', 'number', 'array', 'number' // outId\n  ]);\n}\n\nfunction gatherNd(args) {\n  const {\n    backend,\n    inputs\n  } = args;\n  const {\n    params,\n    indices\n  } = inputs;\n  const [resultShape, numSlices, sliceSize, strides] = gather_util.prepareAndValidate(params, indices);\n  const out = backend.makeOutput(resultShape, params.dtype);\n  if (numSlices === 0) {\n    return out;\n  }\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const xData = backend.dataIdMap.get(params.dataId);\n  const xId = xData.id;\n  const indicesData = backend.dataIdMap.get(indices.dataId);\n  const indicesId = indicesData.id;\n  const stridesBytes = new Uint8Array(new Int32Array(strides).buffer);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmGatherNd(xId, CppDType[params.dtype], indicesId, numSlices, sliceRank, sliceSize, stridesBytes, outId);\n  return out;\n}\nexport const gatherNdConfig = {\n  kernelName: GatherNd,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: gatherNd\n};","map":{"version":3,"sources":["../../src/kernels/GatherNd.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,WAAW,EAAE,QAAQ,QAAiD,uBAAuB;AAIrG,SAAQ,QAAQ,QAAO,SAAS;AAEhC,IAAI,YAGI;AAER,SAAS,KAAK,CAAC,OAAoB,EAAA;EACjC,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CACzD,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;;AAEA,SAAS,QAAQ,CAAC,IAAoD,EAAA;EAEpE,MAAM;IAAC,OAAO;IAAE;EAAM,CAAC,GAAG,IAAI;EAC9B,MAAM;IAAC,MAAM;IAAE;EAAO,CAAC,GAAG,MAAM;EAEhC,MAAM,CAAC,WAAW,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,CAAC,GAC9C,WAAW,CAAC,kBAAkB,CAAC,MAAM,EAAE,OAAO,CAAC;EAEnD,MAAM,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,WAAW,EAAE,MAAM,CAAC,KAAK,CAAC;EACzD,IAAI,SAAS,KAAK,CAAC,EAAE;IACnB,OAAO,GAAG;EACX;EAED,MAAM,YAAY,GAAG,OAAO,CAAC,KAAK;EAClC,MAAM,SAAS,GAAG,YAAY,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;EAEvD,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC;EAClD,MAAM,GAAG,GAAG,KAAK,CAAC,EAAE;EACpB,MAAM,WAAW,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC;EACzD,MAAM,SAAS,GAAG,WAAW,CAAC,EAAE;EAEhC,MAAM,YAAY,GAAG,IAAI,UAAU,CAAC,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;EAEnE,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE;EAClD,YAAY,CACR,GAAG,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EACvE,YAAY,EAAE,KAAK,CAAC;EAExB,OAAO,GAAG;AACZ;AAEA,OAAO,MAAM,cAAc,GAAiB;EAC1C,UAAU,EAAE,QAAQ;EACpB,WAAW,EAAE,MAAM;EACnB,SAAS,EAAE,KAAK;EAChB,UAAU,EAAE;CACb","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { gather_util, GatherNd } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmGatherNd;\nfunction setup(backend) {\n    wasmGatherNd = backend.wasm.cwrap(GatherNd, null /*void*/, [\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'array',\n        'number' // outId\n    ]);\n}\nfunction gatherNd(args) {\n    const { backend, inputs } = args;\n    const { params, indices } = inputs;\n    const [resultShape, numSlices, sliceSize, strides] = gather_util.prepareAndValidate(params, indices);\n    const out = backend.makeOutput(resultShape, params.dtype);\n    if (numSlices === 0) {\n        return out;\n    }\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n    const xData = backend.dataIdMap.get(params.dataId);\n    const xId = xData.id;\n    const indicesData = backend.dataIdMap.get(indices.dataId);\n    const indicesId = indicesData.id;\n    const stridesBytes = new Uint8Array(new Int32Array(strides).buffer);\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmGatherNd(xId, CppDType[params.dtype], indicesId, numSlices, sliceRank, sliceSize, stridesBytes, outId);\n    return out;\n}\nexport const gatherNdConfig = {\n    kernelName: GatherNd,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: gatherNd\n};\n//# sourceMappingURL=GatherNd.js.map"]},"metadata":{},"sourceType":"module"}