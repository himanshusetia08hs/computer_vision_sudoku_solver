{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nexport function createBinaryKernelConfig(kernelName, supportsFullBroadcast, dtype) {\n  let wasmFunc;\n  function setupFunc(backend) {\n    wasmFunc = backend.wasm.cwrap(kernelName, null /* void */, ['number', 'array', 'number', 'number', 'array', 'number', 'number', 'number' // out_id\n    ]);\n  }\n\n  function kernelFunc(args) {\n    const {\n      backend,\n      inputs\n    } = args;\n    const {\n      a,\n      b\n    } = inputs;\n    const aId = backend.dataIdMap.get(a.dataId).id;\n    const bId = backend.dataIdMap.get(b.dataId).id;\n    const outputType = dtype != null ? dtype : a.dtype;\n    const newShape = backend_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    const out = backend.makeOutput(newShape, outputType);\n    // Short-circuit zero-sized tensors.\n    if (util.sizeFromShape(newShape) === 0) {\n      return out;\n    }\n    const aShapeBytes = new Uint8Array(new Int32Array(a.shape).buffer);\n    const bShapeBytes = new Uint8Array(new Int32Array(b.shape).buffer);\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    const kernelFunc = () => wasmFunc(aId, aShapeBytes, a.shape.length, bId, bShapeBytes, b.shape.length, CppDType[a.dtype], outId);\n    // Currently only some float operations support full broadcast.\n    if (supportsFullBroadcast && a.dtype === 'float32') {\n      kernelFunc();\n      return out;\n    }\n    const aBroadcastDims = backend_util.getBroadcastDims(a.shape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(b.shape, newShape);\n    const loopsOverAllOfA = aBroadcastDims.every((v, i) => v === i);\n    const loopsOverAllOfB = bBroadcastDims.every((v, i) => v === i);\n    if (loopsOverAllOfA && loopsOverAllOfB) {\n      kernelFunc();\n      return out;\n    } else {\n      throw new Error(`Broadcasting along outer dims is not yet ` + `supported for ${a.dtype} ${kernelName}.`);\n    }\n  }\n  return {\n    kernelName,\n    backendName: 'wasm',\n    setupFunc,\n    kernelFunc\n  };\n}","map":{"version":3,"sources":["../../src/kernels/binary_kernel.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nexport function createBinaryKernelConfig(kernelName, supportsFullBroadcast, dtype) {\n    let wasmFunc;\n    function setupFunc(backend) {\n        wasmFunc = backend.wasm.cwrap(kernelName, null /* void */, [\n            'number',\n            'array',\n            'number',\n            'number',\n            'array',\n            'number',\n            'number',\n            'number' // out_id\n        ]);\n    }\n    function kernelFunc(args) {\n        const { backend, inputs } = args;\n        const { a, b } = inputs;\n        const aId = backend.dataIdMap.get(a.dataId).id;\n        const bId = backend.dataIdMap.get(b.dataId).id;\n        const outputType = dtype != null ? dtype : a.dtype;\n        const newShape = backend_util.assertAndGetBroadcastShape(a.shape, b.shape);\n        const out = backend.makeOutput(newShape, outputType);\n        // Short-circuit zero-sized tensors.\n        if (util.sizeFromShape(newShape) === 0) {\n            return out;\n        }\n        const aShapeBytes = new Uint8Array(new Int32Array(a.shape).buffer);\n        const bShapeBytes = new Uint8Array(new Int32Array(b.shape).buffer);\n        const outId = backend.dataIdMap.get(out.dataId).id;\n        const kernelFunc = () => wasmFunc(aId, aShapeBytes, a.shape.length, bId, bShapeBytes, b.shape.length, CppDType[a.dtype], outId);\n        // Currently only some float operations support full broadcast.\n        if (supportsFullBroadcast && a.dtype === 'float32') {\n            kernelFunc();\n            return out;\n        }\n        const aBroadcastDims = backend_util.getBroadcastDims(a.shape, newShape);\n        const bBroadcastDims = backend_util.getBroadcastDims(b.shape, newShape);\n        const loopsOverAllOfA = aBroadcastDims.every((v, i) => v === i);\n        const loopsOverAllOfB = bBroadcastDims.every((v, i) => v === i);\n        if (loopsOverAllOfA && loopsOverAllOfB) {\n            kernelFunc();\n            return out;\n        }\n        else {\n            throw new Error(`Broadcasting along outer dims is not yet ` +\n                `supported for ${a.dtype} ${kernelName}.`);\n        }\n    }\n    return { kernelName, backendName: 'wasm', setupFunc, kernelFunc };\n}\n//# sourceMappingURL=binary_kernel.js.map"]},"metadata":{},"sourceType":"module"}