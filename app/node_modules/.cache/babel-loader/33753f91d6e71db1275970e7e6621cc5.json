{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { backend } from '@tensorflow/tfjs-core';\nlet _epsilon;\n/**\n * Returns the value of the fuzz factor used in numeric expressions.\n */\nexport function epsilon() {\n  if (_epsilon == null) {\n    _epsilon = backend().epsilon();\n  }\n  return _epsilon;\n}\n/**\n * Sets the value of the fuzz factor used in numeric expressions.\n * @param e New value of epsilon.\n */\nexport function setEpsilon(e) {\n  _epsilon = e;\n}\n/**\n * Returns the default image data format convention.\n */\nexport function imageDataFormat() {\n  return 'channelsLast';\n}","map":{"version":3,"sources":["../../../../../../tfjs-layers/src/backend/common.ts"],"names":[],"mappings":"AAAA;;;;;;;;AAQG;AAEH,SAAQ,OAAO,QAAO,uBAAuB;AAG7C,IAAI,QAAgB;AAEpB;;AAEG;AACH,OAAM,SAAU,OAAO,GAAA;EACrB,IAAI,QAAQ,IAAI,IAAI,EAAE;IACpB,QAAQ,GAAG,OAAO,EAAE,CAAC,OAAO,EAAE;EAC/B;EACD,OAAO,QAAQ;AACjB;AAEA;;;AAGG;AACH,OAAM,SAAU,UAAU,CAAC,CAAS,EAAA;EAClC,QAAQ,GAAG,CAAC;AACd;AAEA;;AAEG;AACH,OAAM,SAAU,eAAe,GAAA;EAC7B,OAAO,cAAc;AACvB","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {backend} from '@tensorflow/tfjs-core';\nimport {DataFormat} from '../keras_format/common';\n\nlet _epsilon: number;\n\n/**\n * Returns the value of the fuzz factor used in numeric expressions.\n */\nexport function epsilon() {\n  if (_epsilon == null) {\n    _epsilon = backend().epsilon();\n  }\n  return _epsilon;\n}\n\n/**\n * Sets the value of the fuzz factor used in numeric expressions.\n * @param e New value of epsilon.\n */\nexport function setEpsilon(e: number) {\n  _epsilon = e;\n}\n\n/**\n * Returns the default image data format convention.\n */\nexport function imageDataFormat(): DataFormat {\n  return 'channelsLast';\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}