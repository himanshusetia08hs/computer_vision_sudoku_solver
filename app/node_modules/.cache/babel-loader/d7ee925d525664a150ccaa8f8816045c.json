{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { createStd } from '../../function/statistics/std';\nimport { isBigNumber, isNumber, isCollection } from '../../utils/is';\nimport { errorTransform } from './utils/errorTransform';\nvar name = 'std';\nvar dependencies = ['typed', 'sqrt', 'variance'];\n/**\n * Attach a transform function to math.std\n * Adds a property transform containing the transform function.\n *\n * This transform changed the `dim` parameter of function std\n * from one-based to zero based\n */\n\nexport var createStdTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    sqrt = _ref.sqrt,\n    variance = _ref.variance;\n  var std = createStd({\n    typed: typed,\n    sqrt: sqrt,\n    variance: variance\n  });\n  return typed('std', {\n    '...any': function any(args) {\n      // change last argument dim from one-based to zero-based\n      if (args.length >= 2 && isCollection(args[0])) {\n        var dim = args[1];\n        if (isNumber(dim)) {\n          args[1] = dim - 1;\n        } else if (isBigNumber(dim)) {\n          args[1] = dim.minus(1);\n        }\n      }\n      try {\n        return std.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"names":["factory","createStd","isBigNumber","isNumber","isCollection","errorTransform","name","dependencies","createStdTransform","_ref","typed","sqrt","variance","std","any","args","length","dim","minus","apply","err","isTransformFunction"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/Project/temp/app/node_modules/mathjs/es/expression/transform/std.transform.js"],"sourcesContent":["import { factory } from '../../utils/factory';\nimport { createStd } from '../../function/statistics/std';\nimport { isBigNumber, isNumber, isCollection } from '../../utils/is';\nimport { errorTransform } from './utils/errorTransform';\nvar name = 'std';\nvar dependencies = ['typed', 'sqrt', 'variance'];\n/**\n * Attach a transform function to math.std\n * Adds a property transform containing the transform function.\n *\n * This transform changed the `dim` parameter of function std\n * from one-based to zero based\n */\n\nexport var createStdTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      sqrt = _ref.sqrt,\n      variance = _ref.variance;\n  var std = createStd({\n    typed: typed,\n    sqrt: sqrt,\n    variance: variance\n  });\n  return typed('std', {\n    '...any': function any(args) {\n      // change last argument dim from one-based to zero-based\n      if (args.length >= 2 && isCollection(args[0])) {\n        var dim = args[1];\n\n        if (isNumber(dim)) {\n          args[1] = dim - 1;\n        } else if (isBigNumber(dim)) {\n          args[1] = dim.minus(1);\n        }\n      }\n\n      try {\n        return std.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,SAAS,QAAQ,+BAA+B;AACzD,SAASC,WAAW,EAAEC,QAAQ,EAAEC,YAAY,QAAQ,gBAAgB;AACpE,SAASC,cAAc,QAAQ,wBAAwB;AACvD,IAAIC,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,CAAC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,kBAAkB,GAAG,eAAeR,OAAO,CAACM,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACzF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,IAAI,GAAGF,IAAI,CAACE,IAAI;IAChBC,QAAQ,GAAGH,IAAI,CAACG,QAAQ;EAC5B,IAAIC,GAAG,GAAGZ,SAAS,CAAC;IAClBS,KAAK,EAAEA,KAAK;IACZC,IAAI,EAAEA,IAAI;IACVC,QAAQ,EAAEA;EACZ,CAAC,CAAC;EACF,OAAOF,KAAK,CAAC,KAAK,EAAE;IAClB,QAAQ,EAAE,SAASI,GAAG,CAACC,IAAI,EAAE;MAC3B;MACA,IAAIA,IAAI,CAACC,MAAM,IAAI,CAAC,IAAIZ,YAAY,CAACW,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;QAC7C,IAAIE,GAAG,GAAGF,IAAI,CAAC,CAAC,CAAC;QAEjB,IAAIZ,QAAQ,CAACc,GAAG,CAAC,EAAE;UACjBF,IAAI,CAAC,CAAC,CAAC,GAAGE,GAAG,GAAG,CAAC;QACnB,CAAC,MAAM,IAAIf,WAAW,CAACe,GAAG,CAAC,EAAE;UAC3BF,IAAI,CAAC,CAAC,CAAC,GAAGE,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC;QACxB;MACF;MAEA,IAAI;QACF,OAAOL,GAAG,CAACM,KAAK,CAAC,IAAI,EAAEJ,IAAI,CAAC;MAC9B,CAAC,CAAC,OAAOK,GAAG,EAAE;QACZ,MAAMf,cAAc,CAACe,GAAG,CAAC;MAC3B;IACF;EACF,CAAC,CAAC;AACJ,CAAC,EAAE;EACDC,mBAAmB,EAAE;AACvB,CAAC,CAAC"},"metadata":{},"sourceType":"module"}