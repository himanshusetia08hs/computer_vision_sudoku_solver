{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nfunction nmsParams(node, tensorMap, context) {\n  const boxes = getParamValue('boxes', node, tensorMap, context);\n  const scores = getParamValue('scores', node, tensorMap, context);\n  const maxOutputSize = getParamValue('maxOutputSize', node, tensorMap, context);\n  const iouThreshold = getParamValue('iouThreshold', node, tensorMap, context);\n  const scoreThreshold = getParamValue('scoreThreshold', node, tensorMap, context);\n  const softNmsSigma = getParamValue('softNmsSigma', node, tensorMap, context);\n  return {\n    boxes,\n    scores,\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\nexport const executeOp = async (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5':\n      {\n        const {\n          boxes,\n          scores,\n          maxOutputSize,\n          iouThreshold,\n          scoreThreshold,\n          softNmsSigma\n        } = nmsParams(node, tensorMap, context);\n        const result = await tfOps.image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n        return [result.selectedIndices, result.selectedScores];\n      }\n    case 'NonMaxSuppressionV4':\n      {\n        const {\n          boxes,\n          scores,\n          maxOutputSize,\n          iouThreshold,\n          scoreThreshold\n        } = nmsParams(node, tensorMap, context);\n        const padToMaxOutputSize = getParamValue('padToMaxOutputSize', node, tensorMap, context);\n        const result = await tfOps.image.nonMaxSuppressionPaddedAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n        return [result.selectedIndices, result.validOutputs];\n      }\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2':\n      {\n        const {\n          boxes,\n          scores,\n          maxOutputSize,\n          iouThreshold,\n          scoreThreshold\n        } = nmsParams(node, tensorMap, context);\n        return [await tfOps.image.nonMaxSuppressionAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold)];\n      }\n    case 'Where':\n      {\n        const condition = tfOps.cast(getParamValue('condition', node, tensorMap, context), 'bool');\n        const result = [await tfOps.whereAsync(condition)];\n        condition.dispose();\n        return result;\n      }\n    case 'ListDiff':\n      {\n        return tfOps.setdiff1dAsync(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context));\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'dynamic';","map":{"version":3,"sources":["../../../src/operations/executors/dynamic_executor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nfunction nmsParams(node, tensorMap, context) {\n    const boxes = getParamValue('boxes', node, tensorMap, context);\n    const scores = getParamValue('scores', node, tensorMap, context);\n    const maxOutputSize = getParamValue('maxOutputSize', node, tensorMap, context);\n    const iouThreshold = getParamValue('iouThreshold', node, tensorMap, context);\n    const scoreThreshold = getParamValue('scoreThreshold', node, tensorMap, context);\n    const softNmsSigma = getParamValue('softNmsSigma', node, tensorMap, context);\n    return {\n        boxes,\n        scores,\n        maxOutputSize,\n        iouThreshold,\n        scoreThreshold,\n        softNmsSigma\n    };\n}\nexport const executeOp = async (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'NonMaxSuppressionV5': {\n            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma } = nmsParams(node, tensorMap, context);\n            const result = await tfOps.image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n            return [result.selectedIndices, result.selectedScores];\n        }\n        case 'NonMaxSuppressionV4': {\n            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold } = nmsParams(node, tensorMap, context);\n            const padToMaxOutputSize = getParamValue('padToMaxOutputSize', node, tensorMap, context);\n            const result = await tfOps.image.nonMaxSuppressionPaddedAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n            return [result.selectedIndices, result.validOutputs];\n        }\n        case 'NonMaxSuppressionV3':\n        case 'NonMaxSuppressionV2': {\n            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold } = nmsParams(node, tensorMap, context);\n            return [await tfOps.image.nonMaxSuppressionAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold)];\n        }\n        case 'Where': {\n            const condition = tfOps.cast(getParamValue('condition', node, tensorMap, context), 'bool');\n            const result = [await tfOps.whereAsync(condition)];\n            condition.dispose();\n            return result;\n        }\n        case 'ListDiff': {\n            return tfOps.setdiff1dAsync(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context));\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'dynamic';\n//# sourceMappingURL=dynamic_executor.js.map"]},"metadata":{},"sourceType":"module"}