{"ast":null,"code":"export default class Image {\n  constructor(bytes, width, height) {\n    this.bytes = void 0;\n    this.width = void 0;\n    this.height = void 0;\n    this.bytes = bytes;\n    this.width = width;\n    this.height = height;\n  }\n  static withSize(width, height) {\n    const bytes = new Uint8ClampedArray(width * height);\n    return new Image(bytes, width, height);\n  }\n  clone() {\n    return new Image(new Uint8ClampedArray(this.bytes), this.width, this.height);\n  }\n  subImage(x1, y1, x2, y2) {\n    const width = x2 - x1;\n    const height = y2 - y1;\n    const bytes = new Uint8ClampedArray(width * height);\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        bytes[y * width + x] = this.bytes[(y + y1) * this.width + x + x1];\n      }\n    }\n    return new Image(bytes, width, height);\n  }\n  toImageData() {\n    const imageData = new ImageData(this.width, this.height);\n    for (let y = 0; y < this.height; y++) {\n      const row = y * this.width;\n      for (let x = 0; x < this.width; x++) {\n        const value = this.bytes[row + x];\n        imageData.data[(row + x) * 4] = value;\n        imageData.data[(row + x) * 4 + 1] = value;\n        imageData.data[(row + x) * 4 + 2] = value;\n        imageData.data[(row + x) * 4 + 3] = 255;\n      }\n    }\n    return imageData;\n  }\n}","map":{"version":3,"names":["Image","constructor","bytes","width","height","withSize","Uint8ClampedArray","clone","subImage","x1","y1","x2","y2","y","x","toImageData","imageData","ImageData","row","value","data"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/P/temp/app/src/augmentedReality/imageProcessing/Image.ts"],"sourcesContent":["export default class Image {\n  public bytes: Uint8ClampedArray;\n  public width: number;\n  public height: number;\n  constructor(bytes: Uint8ClampedArray, width: number, height: number) {\n    this.bytes = bytes;\n    this.width = width;\n    this.height = height;\n  }\n  static withSize(width: number, height: number) {\n    const bytes = new Uint8ClampedArray(width * height);\n    return new Image(bytes, width, height);\n  }\n  public clone(): Image {\n    return new Image(\n      new Uint8ClampedArray(this.bytes),\n      this.width,\n      this.height\n    );\n  }\n  public subImage(x1: number, y1: number, x2: number, y2: number): Image {\n    const width = x2 - x1;\n    const height = y2 - y1;\n    const bytes = new Uint8ClampedArray(width * height);\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        bytes[y * width + x] = this.bytes[(y + y1) * this.width + x + x1];\n      }\n    }\n    return new Image(bytes, width, height);\n  }\n  public toImageData(): ImageData {\n    const imageData = new ImageData(this.width, this.height);\n    for (let y = 0; y < this.height; y++) {\n      const row = y * this.width;\n      for (let x = 0; x < this.width; x++) {\n        const value = this.bytes[row + x];\n        imageData.data[(row + x) * 4] = value;\n        imageData.data[(row + x) * 4 + 1] = value;\n        imageData.data[(row + x) * 4 + 2] = value;\n        imageData.data[(row + x) * 4 + 3] = 255;\n      }\n    }\n    return imageData;\n  }\n}\n"],"mappings":"AAAA,eAAe,MAAMA,KAAK,CAAC;EAIzBC,WAAW,CAACC,KAAwB,EAAEC,KAAa,EAAEC,MAAc,EAAE;IAAA,KAH9DF,KAAK;IAAA,KACLC,KAAK;IAAA,KACLC,MAAM;IAEX,IAAI,CAACF,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;EACA,OAAOC,QAAQ,CAACF,KAAa,EAAEC,MAAc,EAAE;IAC7C,MAAMF,KAAK,GAAG,IAAII,iBAAiB,CAACH,KAAK,GAAGC,MAAM,CAAC;IACnD,OAAO,IAAIJ,KAAK,CAACE,KAAK,EAAEC,KAAK,EAAEC,MAAM,CAAC;EACxC;EACOG,KAAK,GAAU;IACpB,OAAO,IAAIP,KAAK,CACd,IAAIM,iBAAiB,CAAC,IAAI,CAACJ,KAAK,CAAC,EACjC,IAAI,CAACC,KAAK,EACV,IAAI,CAACC,MAAM,CACZ;EACH;EACOI,QAAQ,CAACC,EAAU,EAAEC,EAAU,EAAEC,EAAU,EAAEC,EAAU,EAAS;IACrE,MAAMT,KAAK,GAAGQ,EAAE,GAAGF,EAAE;IACrB,MAAML,MAAM,GAAGQ,EAAE,GAAGF,EAAE;IACtB,MAAMR,KAAK,GAAG,IAAII,iBAAiB,CAACH,KAAK,GAAGC,MAAM,CAAC;IACnD,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,MAAM,EAAES,CAAC,EAAE,EAAE;MAC/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,KAAK,EAAEW,CAAC,EAAE,EAAE;QAC9BZ,KAAK,CAACW,CAAC,GAAGV,KAAK,GAAGW,CAAC,CAAC,GAAG,IAAI,CAACZ,KAAK,CAAC,CAACW,CAAC,GAAGH,EAAE,IAAI,IAAI,CAACP,KAAK,GAAGW,CAAC,GAAGL,EAAE,CAAC;MACnE;IACF;IACA,OAAO,IAAIT,KAAK,CAACE,KAAK,EAAEC,KAAK,EAAEC,MAAM,CAAC;EACxC;EACOW,WAAW,GAAc;IAC9B,MAAMC,SAAS,GAAG,IAAIC,SAAS,CAAC,IAAI,CAACd,KAAK,EAAE,IAAI,CAACC,MAAM,CAAC;IACxD,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACT,MAAM,EAAES,CAAC,EAAE,EAAE;MACpC,MAAMK,GAAG,GAAGL,CAAC,GAAG,IAAI,CAACV,KAAK;MAC1B,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACX,KAAK,EAAEW,CAAC,EAAE,EAAE;QACnC,MAAMK,KAAK,GAAG,IAAI,CAACjB,KAAK,CAACgB,GAAG,GAAGJ,CAAC,CAAC;QACjCE,SAAS,CAACI,IAAI,CAAC,CAACF,GAAG,GAAGJ,CAAC,IAAI,CAAC,CAAC,GAAGK,KAAK;QACrCH,SAAS,CAACI,IAAI,CAAC,CAACF,GAAG,GAAGJ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAGK,KAAK;QACzCH,SAAS,CAACI,IAAI,CAAC,CAACF,GAAG,GAAGJ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAGK,KAAK;QACzCH,SAAS,CAACI,IAAI,CAAC,CAACF,GAAG,GAAGJ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG;MACzC;IACF;IACA,OAAOE,SAAS;EAClB;AACF"},"metadata":{},"sourceType":"module"}