{"ast":null,"code":"import { errorTransform } from './utils/errorTransform';\nimport { factory } from '../../utils/factory';\nimport { createColumn } from '../../function/matrix/column';\nimport { isNumber } from '../../utils/is';\nvar name = 'column';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\n/**\n * Attach a transform function to matrix.column\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `index` parameter of function column\n * from zero-based to one-based\n */\n\nexport var createColumnTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    Index = _ref.Index,\n    matrix = _ref.matrix,\n    range = _ref.range;\n  var column = createColumn({\n    typed: typed,\n    Index: Index,\n    matrix: matrix,\n    range: range\n  }); // @see: comment of column itself\n\n  return typed('column', {\n    '...any': function any(args) {\n      // change last argument from zero-based to one-based\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n      if (isNumber(last)) {\n        args[lastIndex] = last - 1;\n      }\n      try {\n        return column.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"names":["errorTransform","factory","createColumn","isNumber","name","dependencies","createColumnTransform","_ref","typed","Index","matrix","range","column","any","args","lastIndex","length","last","apply","err","isTransformFunction"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/Project/temp/app/node_modules/mathjs/es/expression/transform/column.transform.js"],"sourcesContent":["import { errorTransform } from './utils/errorTransform';\nimport { factory } from '../../utils/factory';\nimport { createColumn } from '../../function/matrix/column';\nimport { isNumber } from '../../utils/is';\nvar name = 'column';\nvar dependencies = ['typed', 'Index', 'matrix', 'range'];\n/**\n * Attach a transform function to matrix.column\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `index` parameter of function column\n * from zero-based to one-based\n */\n\nexport var createColumnTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      Index = _ref.Index,\n      matrix = _ref.matrix,\n      range = _ref.range;\n  var column = createColumn({\n    typed: typed,\n    Index: Index,\n    matrix: matrix,\n    range: range\n  }); // @see: comment of column itself\n\n  return typed('column', {\n    '...any': function any(args) {\n      // change last argument from zero-based to one-based\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n\n      if (isNumber(last)) {\n        args[lastIndex] = last - 1;\n      }\n\n      try {\n        return column.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});"],"mappings":"AAAA,SAASA,cAAc,QAAQ,wBAAwB;AACvD,SAASC,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,qBAAqB,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC5F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,KAAK,GAAGF,IAAI,CAACE,KAAK;IAClBC,MAAM,GAAGH,IAAI,CAACG,MAAM;IACpBC,KAAK,GAAGJ,IAAI,CAACI,KAAK;EACtB,IAAIC,MAAM,GAAGV,YAAY,CAAC;IACxBM,KAAK,EAAEA,KAAK;IACZC,KAAK,EAAEA,KAAK;IACZC,MAAM,EAAEA,MAAM;IACdC,KAAK,EAAEA;EACT,CAAC,CAAC,CAAC,CAAC;;EAEJ,OAAOH,KAAK,CAAC,QAAQ,EAAE;IACrB,QAAQ,EAAE,SAASK,GAAG,CAACC,IAAI,EAAE;MAC3B;MACA,IAAIC,SAAS,GAAGD,IAAI,CAACE,MAAM,GAAG,CAAC;MAC/B,IAAIC,IAAI,GAAGH,IAAI,CAACC,SAAS,CAAC;MAE1B,IAAIZ,QAAQ,CAACc,IAAI,CAAC,EAAE;QAClBH,IAAI,CAACC,SAAS,CAAC,GAAGE,IAAI,GAAG,CAAC;MAC5B;MAEA,IAAI;QACF,OAAOL,MAAM,CAACM,KAAK,CAAC,IAAI,EAAEJ,IAAI,CAAC;MACjC,CAAC,CAAC,OAAOK,GAAG,EAAE;QACZ,MAAMnB,cAAc,CAACmB,GAAG,CAAC;MAC3B;IACF;EACF,CAAC,CAAC;AACJ,CAAC,EAAE;EACDC,mBAAmB,EAAE;AACvB,CAAC,CAAC"},"metadata":{},"sourceType":"module"}