{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nconst contexts = {};\nconst WEBGL_ATTRIBUTES = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\nexport function clearWebGLContext(webGLVersion) {\n  delete contexts[webGLVersion];\n}\nexport function setWebGLContext(webGLVersion, gl) {\n  contexts[webGLVersion] = gl;\n}\nexport function getWebGLContext(webGLVersion, customCanvas) {\n  if (!(webGLVersion in contexts) || customCanvas != null) {\n    const newCtx = getWebGLRenderingContext(webGLVersion, customCanvas);\n    if (newCtx !== null) {\n      contexts[webGLVersion] = newCtx;\n    } else {\n      console.log('Could not get context for WebGL version', webGLVersion);\n      return null;\n    }\n  }\n  const gl = contexts[webGLVersion];\n  if (gl == null || gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n  return contexts[webGLVersion];\n}\nfunction createCanvas(webGLVersion) {\n  if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\nfunction getWebGLRenderingContext(webGLVersion, customCanvas) {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas = customCanvas == null ? createCanvas(webGLVersion) : customCanvas;\n  canvas.addEventListener('webglcontextlost', ev => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n  if (env().getBool('SOFTWARE_WEBGL_ENABLED')) {\n    WEBGL_ATTRIBUTES.failIfMajorPerformanceCaveat = false;\n  }\n  if (webGLVersion === 1) {\n    return canvas.getContext('webgl', WEBGL_ATTRIBUTES) || canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES);\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES);\n}","map":{"version":3,"sources":["../../../../../tfjs-backend-webgl/src/canvas_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nconst contexts: {[key: string]: WebGLRenderingContext} = {};\n\nconst WEBGL_ATTRIBUTES: WebGLContextAttributes = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\n\nexport function clearWebGLContext(webGLVersion: number) {\n  delete contexts[webGLVersion];\n}\n\nexport function setWebGLContext(\n    webGLVersion: number, gl: WebGLRenderingContext) {\n  contexts[webGLVersion] = gl;\n}\n\nexport function getWebGLContext(\n    webGLVersion: number,\n    customCanvas?: HTMLCanvasElement|OffscreenCanvas): WebGLRenderingContext {\n  if (!(webGLVersion in contexts) || customCanvas != null) {\n    const newCtx = getWebGLRenderingContext(webGLVersion, customCanvas);\n    if (newCtx !== null) {\n      contexts[webGLVersion] = newCtx;\n    } else {\n      console.log('Could not get context for WebGL version', webGLVersion);\n      return null;\n    }\n  }\n  const gl = contexts[webGLVersion];\n  if (gl == null || gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return contexts[webGLVersion];\n}\n\nfunction createCanvas(webGLVersion: number) {\n  if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\n\nfunction getWebGLRenderingContext(\n    webGLVersion: number,\n    customCanvas?: HTMLCanvasElement|OffscreenCanvas): WebGLRenderingContext {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas =\n      customCanvas == null ? createCanvas(webGLVersion) : customCanvas;\n\n  canvas.addEventListener('webglcontextlost', (ev: Event) => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n\n  if (env().getBool('SOFTWARE_WEBGL_ENABLED')) {\n    WEBGL_ATTRIBUTES.failIfMajorPerformanceCaveat = false;\n  }\n\n  if (webGLVersion === 1) {\n    return (canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||\n      (canvas as HTMLCanvasElement)\n        .getContext('experimental-webgl', WEBGL_ATTRIBUTES));\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES) as WebGLRenderingContext;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}