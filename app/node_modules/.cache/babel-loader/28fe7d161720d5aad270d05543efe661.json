{"ast":null,"code":"import { isSymbolNode } from '../../../utils/is';\n/**\n * Compile an inline expression like \"x > 0\"\n * @param {Node} expression\n * @param {Object} math\n * @param {Object} scope\n * @return {function} Returns a function with one argument which fills in the\n *                    undefined variable (like \"x\") and evaluates the expression\n */\n\nexport function compileInlineExpression(expression, math, scope) {\n  // find an undefined symbol\n  var symbol = expression.filter(function (node) {\n    return isSymbolNode(node) && !(node.name in math) && !(node.name in scope);\n  })[0];\n  if (!symbol) {\n    throw new Error('No undefined variable found in inline expression \"' + expression + '\"');\n  } // create a test function for this equation\n\n  var name = symbol.name; // variable name\n\n  var subScope = Object.create(scope);\n  var eq = expression.compile();\n  return function inlineExpression(x) {\n    subScope[name] = x;\n    return eq.evaluate(subScope);\n  };\n}","map":{"version":3,"names":["isSymbolNode","compileInlineExpression","expression","math","scope","symbol","filter","node","name","Error","subScope","Object","create","eq","compile","inlineExpression","x","evaluate"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/P/temp/app/node_modules/mathjs/es/expression/transform/utils/compileInlineExpression.js"],"sourcesContent":["import { isSymbolNode } from '../../../utils/is';\n/**\n * Compile an inline expression like \"x > 0\"\n * @param {Node} expression\n * @param {Object} math\n * @param {Object} scope\n * @return {function} Returns a function with one argument which fills in the\n *                    undefined variable (like \"x\") and evaluates the expression\n */\n\nexport function compileInlineExpression(expression, math, scope) {\n  // find an undefined symbol\n  var symbol = expression.filter(function (node) {\n    return isSymbolNode(node) && !(node.name in math) && !(node.name in scope);\n  })[0];\n\n  if (!symbol) {\n    throw new Error('No undefined variable found in inline expression \"' + expression + '\"');\n  } // create a test function for this equation\n\n\n  var name = symbol.name; // variable name\n\n  var subScope = Object.create(scope);\n  var eq = expression.compile();\n  return function inlineExpression(x) {\n    subScope[name] = x;\n    return eq.evaluate(subScope);\n  };\n}"],"mappings":"AAAA,SAASA,YAAY,QAAQ,mBAAmB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,uBAAuB,CAACC,UAAU,EAAEC,IAAI,EAAEC,KAAK,EAAE;EAC/D;EACA,IAAIC,MAAM,GAAGH,UAAU,CAACI,MAAM,CAAC,UAAUC,IAAI,EAAE;IAC7C,OAAOP,YAAY,CAACO,IAAI,CAAC,IAAI,EAAEA,IAAI,CAACC,IAAI,IAAIL,IAAI,CAAC,IAAI,EAAEI,IAAI,CAACC,IAAI,IAAIJ,KAAK,CAAC;EAC5E,CAAC,CAAC,CAAC,CAAC,CAAC;EAEL,IAAI,CAACC,MAAM,EAAE;IACX,MAAM,IAAII,KAAK,CAAC,oDAAoD,GAAGP,UAAU,GAAG,GAAG,CAAC;EAC1F,CAAC,CAAC;;EAGF,IAAIM,IAAI,GAAGH,MAAM,CAACG,IAAI,CAAC,CAAC;;EAExB,IAAIE,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAACR,KAAK,CAAC;EACnC,IAAIS,EAAE,GAAGX,UAAU,CAACY,OAAO,EAAE;EAC7B,OAAO,SAASC,gBAAgB,CAACC,CAAC,EAAE;IAClCN,QAAQ,CAACF,IAAI,CAAC,GAAGQ,CAAC;IAClB,OAAOH,EAAE,CAACI,QAAQ,CAACP,QAAQ,CAAC;EAC9B,CAAC;AACH"},"metadata":{},"sourceType":"module"}