{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Prelu } from '../kernel_names';\nimport { getReductionAxes } from '../ops/broadcast_util';\nimport { greater } from '../ops/greater';\nimport { mul } from '../ops/mul';\nimport { reshape } from '../ops/reshape';\nimport { sum } from '../ops/sum';\nimport { where } from '../ops/where';\nimport { zerosLike } from '../ops/zeros_like';\nexport const preluGradConfig = {\n  kernelName: Prelu,\n  inputsToSave: ['x', 'alpha'],\n  gradFunc: (dy, saved) => {\n    const [x, alpha] = saved;\n    const mask = greater(x, 0);\n    return {\n      x: () => where(mask, dy, mul(dy, alpha)),\n      alpha: () => {\n        let res = where(mask, zerosLike(dy), mul(dy, x));\n        const reduceAxes = getReductionAxes(alpha.shape, dy.shape);\n        if (reduceAxes.length > 0) {\n          res = sum(res, reduceAxes);\n        }\n        return reshape(res, alpha.shape);\n      }\n    };\n  }\n};","map":{"version":3,"sources":["../../src/gradients/Prelu_grad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,KAAK,QAAO,iBAAiB;AAErC,SAAQ,gBAAgB,QAAO,uBAAuB;AACtD,SAAQ,OAAO,QAAO,gBAAgB;AACtC,SAAQ,GAAG,QAAO,YAAY;AAC9B,SAAQ,OAAO,QAAO,gBAAgB;AACtC,SAAQ,GAAG,QAAO,YAAY;AAC9B,SAAQ,KAAK,QAAO,cAAc;AAClC,SAAQ,SAAS,QAAO,mBAAmB;AAG3C,OAAO,MAAM,eAAe,GAAe;EACzC,UAAU,EAAE,KAAK;EACjB,YAAY,EAAE,CAAC,GAAG,EAAE,OAAO,CAAC;EAC5B,QAAQ,EAAE,CAAC,EAAU,EAAE,KAAe,KAAI;IACxC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,GAAG,KAAK;IACxB,MAAM,IAAI,GAAG,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;IAE1B,OAAO;MACL,CAAC,EAAE,MAAM,KAAK,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;MACxC,KAAK,EAAE,MAAK;QACV,IAAI,GAAG,GAAG,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAChD,MAAM,UAAU,GAAG,gBAAgB,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC;QAC1D,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;UACzB,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC;QAC3B;QACD,OAAO,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC;MAClC;KACD;EACH;CACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Prelu } from '../kernel_names';\nimport { getReductionAxes } from '../ops/broadcast_util';\nimport { greater } from '../ops/greater';\nimport { mul } from '../ops/mul';\nimport { reshape } from '../ops/reshape';\nimport { sum } from '../ops/sum';\nimport { where } from '../ops/where';\nimport { zerosLike } from '../ops/zeros_like';\nexport const preluGradConfig = {\n    kernelName: Prelu,\n    inputsToSave: ['x', 'alpha'],\n    gradFunc: (dy, saved) => {\n        const [x, alpha] = saved;\n        const mask = greater(x, 0);\n        return {\n            x: () => where(mask, dy, mul(dy, alpha)),\n            alpha: () => {\n                let res = where(mask, zerosLike(dy), mul(dy, x));\n                const reduceAxes = getReductionAxes(alpha.shape, dy.shape);\n                if (reduceAxes.length > 0) {\n                    res = sum(res, reduceAxes);\n                }\n                return reshape(res, alpha.shape);\n            }\n        };\n    }\n};\n//# sourceMappingURL=Prelu_grad.js.map"]},"metadata":{},"sourceType":"module"}