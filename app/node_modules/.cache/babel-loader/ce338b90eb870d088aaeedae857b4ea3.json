{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { slice_util, StridedSlice } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { stridedSliceImpl } from './StridedSlice_impl';\nexport function stridedSlice(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n  assertNotComplex(x, 'stridedSlice');\n  const {\n    nonStrided,\n    $begin,\n    $strides,\n    size,\n    newShape,\n    outShape\n  } = slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n  const $x = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: newShape\n    }\n  });\n  let result;\n  if (nonStrided) {\n    const sliced = slice({\n      inputs: {\n        x: $x\n      },\n      backend,\n      attrs: {\n        begin: $begin,\n        size\n      }\n    });\n    result = reshape({\n      inputs: {\n        x: sliced\n      },\n      backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else if (outShape.some(axis => axis === 0)) {\n    result = backend.makeTensorInfo(outShape, x.dtype, []);\n  } else {\n    const xBuf = backend.bufferSync($x);\n    const outBuf = stridedSliceImpl(outShape, xBuf, $strides, $begin);\n    result = backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n  const resultReshaped = reshape({\n    inputs: {\n      x: result\n    },\n    backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo($x);\n  backend.disposeIntermediateTensorInfo(result);\n  return resultReshaped;\n}\nexport const stridedSliceConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice\n};","map":{"version":3,"sources":["../../src/kernels/StridedSlice.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,UAAU,EAAE,YAAY,QAA0D,uBAAuB;AAG3I,SAAQ,gBAAgB,QAAO,aAAa;AAC5C,SAAQ,OAAO,QAAO,WAAW;AACjC,SAAQ,KAAK,QAAO,SAAS;AAC7B,SAAQ,gBAAgB,QAAO,qBAAqB;AAEpD,OAAM,SAAU,YAAY,CAAC,IAI5B,EAAA;EACC,MAAM;IAAC,MAAM;IAAE,OAAO;IAAE;EAAK,CAAC,GAAG,IAAI;EACrC,MAAM;IAAC;EAAC,CAAC,GAAG,MAAM;EAClB,MAAM;IACJ,KAAK;IACL,GAAG;IACH,OAAO;IACP,SAAS;IACT,OAAO;IACP,YAAY;IACZ,WAAW;IACX;EAAc,CACf,GAAG,KAAK;EAET,gBAAgB,CAAC,CAAC,EAAE,cAAc,CAAC;EAEnC,MAAM;IAAC,UAAU;IAAE,MAAM;IAAE,QAAQ;IAAE,IAAI;IAAE,QAAQ;IAAE;EAAQ,CAAC,GAC1D,UAAU,CAAC,SAAS,CAChB,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,YAAY,EAC9D,WAAW,EAAE,cAAc,CAAC;EAEpC,MAAM,EAAE,GAAG,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC;IAAC,CAAC;IAAE,OAAO;IAAE,KAAK,EAAE;MAAC,KAAK,EAAE;IAAQ;EAAC,CAAC,CAAC;EAEpE,IAAI,MAAM;EACV,IAAI,UAAU,EAAE;IACd,MAAM,MAAM,GACR,KAAK,CAAC;MAAC,MAAM,EAAE;QAAC,CAAC,EAAE;MAAE,CAAC;MAAE,OAAO;MAAE,KAAK,EAAE;QAAC,KAAK,EAAE,MAAM;QAAE;MAAI;IAAC,CAAC,CAAC;IACnE,MAAM,GAAG,OAAO,CAAC;MAAC,MAAM,EAAE;QAAC,CAAC,EAAE;MAAM,CAAC;MAAE,OAAO;MAAE,KAAK,EAAE;QAAC,KAAK,EAAE;MAAQ;IAAC,CAAC,CAAC;IAE1E,OAAO,CAAC,6BAA6B,CAAC,MAAM,CAAC;GAC9C,MAAM,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,KAAK,CAAC,CAAC,EAAE;IAC5C,MAAM,GAAG,OAAO,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC;GACvD,MAAM;IACL,MAAM,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC;IACnC,MAAM,MAAM,GAAG,gBAAgB,CAAC,QAAQ,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC;IAEjE,MAAM,GAAG,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC;EAC3E;EAED,MAAM,cAAc,GAChB,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAM,CAAC;IAAE,OAAO;IAAE,KAAK,EAAE;MAAC,KAAK,EAAE;IAAQ;EAAC,CAAC,CAAC;EAErE,OAAO,CAAC,6BAA6B,CAAC,EAAE,CAAC;EACzC,OAAO,CAAC,6BAA6B,CAAC,MAAM,CAAC;EAE7C,OAAO,cAAc;AACvB;AAEA,OAAO,MAAM,kBAAkB,GAAiB;EAC9C,UAAU,EAAE,YAAY;EACxB,WAAW,EAAE,KAAK;EAClB,UAAU,EAAE;CACb","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { slice_util, StridedSlice } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { stridedSliceImpl } from './StridedSlice_impl';\nexport function stridedSlice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask } = attrs;\n    assertNotComplex(x, 'stridedSlice');\n    const { nonStrided, $begin, $strides, size, newShape, outShape } = slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n    const $x = reshape({ inputs: { x }, backend, attrs: { shape: newShape } });\n    let result;\n    if (nonStrided) {\n        const sliced = slice({ inputs: { x: $x }, backend, attrs: { begin: $begin, size } });\n        result = reshape({ inputs: { x: sliced }, backend, attrs: { shape: outShape } });\n        backend.disposeIntermediateTensorInfo(sliced);\n    }\n    else if (outShape.some(axis => axis === 0)) {\n        result = backend.makeTensorInfo(outShape, x.dtype, []);\n    }\n    else {\n        const xBuf = backend.bufferSync($x);\n        const outBuf = stridedSliceImpl(outShape, xBuf, $strides, $begin);\n        result = backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n    }\n    const resultReshaped = reshape({ inputs: { x: result }, backend, attrs: { shape: outShape } });\n    backend.disposeIntermediateTensorInfo($x);\n    backend.disposeIntermediateTensorInfo(result);\n    return resultReshaped;\n}\nexport const stridedSliceConfig = {\n    kernelName: StridedSlice,\n    backendName: 'cpu',\n    kernelFunc: stridedSlice\n};\n//# sourceMappingURL=StridedSlice.js.map"]},"metadata":{},"sourceType":"module"}