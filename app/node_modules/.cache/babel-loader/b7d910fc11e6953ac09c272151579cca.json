{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { RingBuffer } from './ring_buffer';\nexport class GrowingRingBuffer extends RingBuffer {\n  /**\n   * Constructs a `GrowingRingBuffer`.\n   */\n  constructor() {\n    super(GrowingRingBuffer.INITIAL_CAPACITY);\n  }\n  isFull() {\n    return false;\n  }\n  push(value) {\n    if (super.isFull()) {\n      this.expand();\n    }\n    super.push(value);\n  }\n  unshift(value) {\n    if (super.isFull()) {\n      this.expand();\n    }\n    super.unshift(value);\n  }\n  /**\n   * Doubles the capacity of the buffer.\n   */\n  expand() {\n    const newCapacity = this.capacity * 2;\n    const newData = new Array(newCapacity);\n    const len = this.length();\n    // Rotate the buffer to start at index 0 again, since we can't just\n    // allocate more space at the end.\n    for (let i = 0; i < len; i++) {\n      newData[i] = this.get(this.wrap(this.begin + i));\n    }\n    this.data = newData;\n    this.capacity = newCapacity;\n    this.doubledCapacity = 2 * this.capacity;\n    this.begin = 0;\n    this.end = len;\n  }\n}\nGrowingRingBuffer.INITIAL_CAPACITY = 32;","map":{"version":3,"sources":["../../src/util/growing_ring_buffer.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBG;AAEH,SAAQ,UAAU,QAAO,eAAe;AAExC,OAAM,MAAO,iBAAqB,SAAQ,UAAa,CAAA;EAGrD;;AAEG;EACH,WAAA,GAAA;IACE,KAAK,CAAC,iBAAiB,CAAC,gBAAgB,CAAC;EAC3C;EAEA,MAAM,GAAA;IACJ,OAAO,KAAK;EACd;EAEA,IAAI,CAAC,KAAQ,EAAA;IACX,IAAI,KAAK,CAAC,MAAM,EAAE,EAAE;MAClB,IAAI,CAAC,MAAM,EAAE;IACd;IACD,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;EACnB;EAEA,OAAO,CAAC,KAAQ,EAAA;IACd,IAAI,KAAK,CAAC,MAAM,EAAE,EAAE;MAClB,IAAI,CAAC,MAAM,EAAE;IACd;IACD,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;EACtB;EAEA;;AAEG;EACK,MAAM,GAAA;IACZ,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC;IACrC,MAAM,OAAO,GAAG,IAAI,KAAK,CAAI,WAAW,CAAC;IACzC,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE;IAEzB;IACA;IACA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;MAC5B,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;IACjD;IAED,IAAI,CAAC,IAAI,GAAG,OAAO;IACnB,IAAI,CAAC,QAAQ,GAAG,WAAW;IAC3B,IAAI,CAAC,eAAe,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ;IACxC,IAAI,CAAC,KAAK,GAAG,CAAC;IACd,IAAI,CAAC,GAAG,GAAG,GAAG;EAChB;;AA9Ce,iBAAA,CAAA,gBAAgB,GAAG,EAAE","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { RingBuffer } from './ring_buffer';\nexport class GrowingRingBuffer extends RingBuffer {\n    /**\n     * Constructs a `GrowingRingBuffer`.\n     */\n    constructor() {\n        super(GrowingRingBuffer.INITIAL_CAPACITY);\n    }\n    isFull() {\n        return false;\n    }\n    push(value) {\n        if (super.isFull()) {\n            this.expand();\n        }\n        super.push(value);\n    }\n    unshift(value) {\n        if (super.isFull()) {\n            this.expand();\n        }\n        super.unshift(value);\n    }\n    /**\n     * Doubles the capacity of the buffer.\n     */\n    expand() {\n        const newCapacity = this.capacity * 2;\n        const newData = new Array(newCapacity);\n        const len = this.length();\n        // Rotate the buffer to start at index 0 again, since we can't just\n        // allocate more space at the end.\n        for (let i = 0; i < len; i++) {\n            newData[i] = this.get(this.wrap(this.begin + i));\n        }\n        this.data = newData;\n        this.capacity = newCapacity;\n        this.doubledCapacity = 2 * this.capacity;\n        this.begin = 0;\n        this.end = len;\n    }\n}\nGrowingRingBuffer.INITIAL_CAPACITY = 32;\n//# sourceMappingURL=growing_ring_buffer.js.map"]},"metadata":{},"sourceType":"module"}