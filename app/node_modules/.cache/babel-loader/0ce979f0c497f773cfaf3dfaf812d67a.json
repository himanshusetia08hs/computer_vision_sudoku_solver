{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmSparseSegmentReduction;\nexport function setup(backend) {\n  wasmSparseSegmentReduction = backend.wasm.cwrap('SparseSegmentReduction', null /*void*/, ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number' // defaultValue\n  ]);\n}\n\nexport function sparseSegmentReduction(args, isMean) {\n  const {\n    backend,\n    inputs\n  } = args;\n  const {\n    data,\n    indices,\n    segmentIds\n  } = inputs;\n  const numIndices = indices.shape[0];\n  const segmentIdsBack = backend.readSync(segmentIds.dataId, numIndices - 1, numIndices)[0];\n  const lastSegmentIdPlusOne = numIndices > 0 ? segmentIdsBack + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n  if (outputRows < 0) {\n    throw new Error(backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n  const outputShape = data.shape.slice();\n  outputShape[0] = outputRows;\n  const dataId = backend.dataIdMap.get(data.dataId).id;\n  const indicesId = backend.dataIdMap.get(indices.dataId).id;\n  const segmentIdsId = backend.dataIdMap.get(segmentIds.dataId).id;\n  const output = backend.makeOutput(outputShape, data.dtype);\n  const outputId = backend.dataIdMap.get(output.dataId).id;\n  const exceptionValues = backend.makeOutput([4], 'int32');\n  const exceptionValuesId = backend.dataIdMap.get(exceptionValues.dataId).id;\n  wasmSparseSegmentReduction(dataId, CppDType[data.dtype], data.shape[0], indicesId, segmentIdsId, outputId, exceptionValuesId, isMean, 0);\n  const exceptionValuesArray = backend.readSync(exceptionValues.dataId);\n  let exceptionMessage;\n  switch (exceptionValuesArray[0]) {\n    case 0:\n      {\n        exceptionMessage = backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage();\n        break;\n      }\n    case 1:\n      {\n        exceptionMessage = backend_util.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage();\n        break;\n      }\n    case 2:\n      exceptionMessage = backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(exceptionValuesArray[1], exceptionValuesArray[2]);\n      break;\n    case 3:\n      exceptionMessage = backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(exceptionValuesArray[1], exceptionValuesArray[2], exceptionValuesArray[3]);\n      break;\n    default:\n      exceptionMessage = '';\n  }\n  backend.disposeData(exceptionValues.dataId);\n  if (exceptionMessage) {\n    backend.disposeData(output.dataId);\n    throw new Error(exceptionMessage);\n  }\n  return output;\n}","map":{"version":3,"sources":["../../../../../../tfjs-backend-wasm/src/kernels/SparseSegmentReduction.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, SparseSegmentMeanInputs, SparseSegmentSumInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {CppDType} from './types';\n\nlet wasmSparseSegmentReduction: (\n    dataId: number, dtype: number, numRow: number, indicesId: number,\n    segmentIdsId: number, outputId: number, exceptionValuesId: number,\n    isMean: boolean, defaultValue: number) => void;\n\nexport function setup(backend: BackendWasm): void {\n  wasmSparseSegmentReduction =\n      backend.wasm.cwrap('SparseSegmentReduction', null /*void*/, [\n        'number',  // dataId\n        'number',  // dtype\n        'number',  // numRow\n        'number',  // indicesId\n        'number',  // segmentIdsId\n        'number',  // outputId\n        'number',  // exceptionValuesId,\n        'number',  // isMean\n        'number',  // defaultValue\n      ]);\n}\n\nexport function sparseSegmentReduction(\n    args: {\n      backend: BackendWasm,\n      inputs: SparseSegmentSumInputs|SparseSegmentMeanInputs,\n    },\n    isMean: boolean): TensorInfo {\n  const {backend, inputs} = args;\n  const {data, indices, segmentIds} = inputs;\n\n  const numIndices = indices.shape[0];\n  const segmentIdsBack =\n      (backend.readSync(segmentIds.dataId, numIndices - 1, numIndices) as\n       Int32Array)[0];\n  const lastSegmentIdPlusOne = numIndices > 0 ? segmentIdsBack + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw (new Error(\n        backend_util\n            .getSparseSegmentReductionNegativeSegmentIdsErrorMessage()));\n  }\n\n  const outputShape = data.shape.slice();\n  outputShape[0] = outputRows;\n\n  const dataId = backend.dataIdMap.get(data.dataId).id;\n  const indicesId = backend.dataIdMap.get(indices.dataId).id;\n  const segmentIdsId = backend.dataIdMap.get(segmentIds.dataId).id;\n\n  const output = backend.makeOutput(outputShape, data.dtype);\n  const outputId = backend.dataIdMap.get(output.dataId).id;\n\n  const exceptionValues = backend.makeOutput([4], 'int32');\n  const exceptionValuesId = backend.dataIdMap.get(exceptionValues.dataId).id;\n\n  wasmSparseSegmentReduction(\n      dataId, CppDType[data.dtype], data.shape[0], indicesId, segmentIdsId,\n      outputId, exceptionValuesId, isMean, 0);\n\n  const exceptionValuesArray =\n      backend.readSync(exceptionValues.dataId) as Int32Array;\n\n  let exceptionMessage: string;\n  switch (exceptionValuesArray[0]) {\n    case 0: {\n      exceptionMessage =\n          backend_util\n              .getSparseSegmentReductionNegativeSegmentIdsErrorMessage();\n      break;\n    }\n    case 1: {\n      exceptionMessage =\n          backend_util\n              .getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage();\n      break;\n    }\n    case 2:\n      exceptionMessage =\n          backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(\n              exceptionValuesArray[1], exceptionValuesArray[2]);\n      break;\n    case 3:\n      exceptionMessage =\n          backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(\n              exceptionValuesArray[1], exceptionValuesArray[2],\n              exceptionValuesArray[3]);\n      break;\n    default:\n      exceptionMessage = '';\n  }\n\n  backend.disposeData(exceptionValues.dataId);\n  if (exceptionMessage) {\n    backend.disposeData(output.dataId);\n    throw new Error(exceptionMessage);\n  }\n\n  return output;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}