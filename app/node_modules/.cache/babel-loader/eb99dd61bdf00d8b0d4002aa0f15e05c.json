{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { scalar } from '@tensorflow/tfjs-core';\nimport { TensorArray } from '../../executor/tensor_array';\nimport { fromTensor, reserve, scatter, split } from '../../executor/tensor_list';\nimport { cloneTensor, getParamValue, getTensor } from './utils';\nexport const executeOp = async (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'If':\n    case 'StatelessIf':\n      {\n        const thenFunc = getParamValue('thenBranch', node, tensorMap, context);\n        const elseFunc = getParamValue('elseBranch', node, tensorMap, context);\n        const cond = getParamValue('cond', node, tensorMap, context);\n        const args = getParamValue('args', node, tensorMap, context);\n        const condValue = await cond.data();\n        if (condValue[0]) {\n          return context.functionMap[thenFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n        } else {\n          return context.functionMap[elseFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n        }\n      }\n    case 'While':\n    case 'StatelessWhile':\n      {\n        const bodyFunc = getParamValue('body', node, tensorMap, context);\n        const condFunc = getParamValue('cond', node, tensorMap, context);\n        const args = getParamValue('args', node, tensorMap, context);\n        // Calculate the condition of the loop\n        const condResult = await context.functionMap[condFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n        const argIds = args.map(tensor => tensor.id);\n        let condValue = await condResult[0].data();\n        // Dispose the intermediate tensors for condition function\n        condResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n        let result = args;\n        while (condValue[0]) {\n          // Record the previous result for intermediate tensor tracking\n          const origResult = result;\n          // Execution the body of the loop\n          result = await context.functionMap[bodyFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n          const resultIds = result.map(tensor => tensor.id);\n          // Dispose the intermediate tensor for body function that is not global\n          // kept, not input/output of the body function\n          origResult.forEach(tensor => {\n            if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {\n              tensor.dispose();\n            }\n          });\n          // Recalcuate the condition of the loop using the latest results.\n          const condResult = await context.functionMap[condFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n          condValue = await condResult[0].data();\n          // Dispose the intermediate tensors for condition function\n          condResult.forEach(tensor => {\n            if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {\n              tensor.dispose();\n            }\n          });\n        }\n        return result;\n      }\n    case 'LoopCond':\n      {\n        const pred = getParamValue('pred', node, tensorMap, context);\n        return [cloneTensor(pred)];\n      }\n    case 'Switch':\n      {\n        const pred = getParamValue('pred', node, tensorMap, context);\n        let data = getParamValue('data', node, tensorMap, context);\n        if (!data.kept) {\n          data = cloneTensor(data);\n        }\n        // Outputs nodes :0 => false, :1 => true\n        return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n      }\n    case 'Merge':\n      {\n        const inputName = node.inputNames.find(name => getTensor(name, tensorMap, context) !== undefined);\n        if (inputName) {\n          const data = getTensor(inputName, tensorMap, context);\n          return [cloneTensor(data)];\n        }\n        return undefined;\n      }\n    case 'Enter':\n      {\n        const frameId = getParamValue('frameName', node, tensorMap, context);\n        const data = getParamValue('tensor', node, tensorMap, context);\n        context.enterFrame(frameId);\n        return [cloneTensor(data)];\n      }\n    case 'Exit':\n      {\n        const data = getParamValue('tensor', node, tensorMap, context);\n        context.exitFrame();\n        return [cloneTensor(data)];\n      }\n    case 'NextIteration':\n      {\n        const data = getParamValue('tensor', node, tensorMap, context);\n        context.nextIteration();\n        return [cloneTensor(data)];\n      }\n    case 'TensorArrayV3':\n      {\n        const size = getParamValue('size', node, tensorMap, context);\n        const dtype = getParamValue('dtype', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const dynamicSize = getParamValue('dynamicSize', node, tensorMap, context);\n        const clearAfterRead = getParamValue('clearAfterRead', node, tensorMap, context);\n        const identicalElementShapes = getParamValue('identicalElementShapes', node, tensorMap, context);\n        const name = getParamValue('name', node, tensorMap, context);\n        const tensorArray = new TensorArray(name, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);\n        context.addTensorArray(tensorArray);\n        return [tensorArray.idTensor, scalar(1.0)];\n      }\n    case 'TensorArrayWriteV3':\n      {\n        const id = getParamValue('tensorArrayId', node, tensorMap, context);\n        const index = getParamValue('index', node, tensorMap, context);\n        const writeTensor = getParamValue('tensor', node, tensorMap, context);\n        const writeTensorArray = context.getTensorArray(id.id);\n        writeTensorArray.write(index, writeTensor);\n        return [writeTensorArray.idTensor];\n      }\n    case 'TensorArrayReadV3':\n      {\n        const readId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const readIndex = getParamValue('index', node, tensorMap, context);\n        const readTensorArray = context.getTensorArray(readId.id);\n        return [readTensorArray.read(readIndex)];\n      }\n    case 'TensorArrayGatherV3':\n      {\n        const gatherId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const gatherIndices = getParamValue('indices', node, tensorMap, context);\n        const gatherDtype = getParamValue('dtype', node, tensorMap, context);\n        const gatherTensorArray = context.getTensorArray(gatherId.id);\n        return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n      }\n    case 'TensorArrayScatterV3':\n      {\n        const scatterId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const scatterIndices = getParamValue('indices', node, tensorMap, context);\n        const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n        const scatterTensorArray = context.getTensorArray(scatterId.id);\n        scatterTensorArray.scatter(scatterIndices, scatterTensor);\n        return [scatterTensorArray.idTensor];\n      }\n    case 'TensorArrayConcatV3':\n      {\n        const concatId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const concatTensorArray = context.getTensorArray(concatId.id);\n        const concatDtype = getParamValue('dtype', node, tensorMap, context);\n        return [concatTensorArray.concat(concatDtype)];\n      }\n    case 'TensorArraySplitV3':\n      {\n        const splitId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const splitTensor = getParamValue('tensor', node, tensorMap, context);\n        const lengths = getParamValue('lengths', node, tensorMap, context);\n        const splitTensorArray = context.getTensorArray(splitId.id);\n        splitTensorArray.split(lengths, splitTensor);\n        return [splitTensorArray.idTensor];\n      }\n    case 'TensorArraySizeV3':\n      {\n        const sizeId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const sizeTensorArray = context.getTensorArray(sizeId.id);\n        return [scalar(sizeTensorArray.size(), 'int32')];\n      }\n    case 'TensorArrayCloseV3':\n      {\n        const closeId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const closeTensorArray = context.getTensorArray(closeId.id);\n        closeTensorArray.clearAndClose();\n        return [closeTensorArray.idTensor];\n      }\n    case 'TensorListSetItem':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const index = getParamValue('index', node, tensorMap, context);\n        const writeTensor = getParamValue('tensor', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        tensorList.setItem(index, writeTensor);\n        return [tensorList.idTensor];\n      }\n    case 'TensorListGetItem':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const readIndex = getParamValue('index', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDType = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        return [tensorList.getItem(readIndex, elementShape, elementDType)];\n      }\n    case 'TensorListScatterV2':\n    case 'TensorListScatter':\n      {\n        const scatterIndices = getParamValue('indices', node, tensorMap, context);\n        const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const numElements = getParamValue('numElements', node, tensorMap, context);\n        const tensorList = scatter(scatterTensor, scatterIndices, elementShape, numElements);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n    case 'TensorListReserve':\n    case 'EmptyTensorList':\n      {\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        let numElementsParam;\n        if (node.op === 'TensorListReserve') {\n          numElementsParam = 'numElements';\n        } else {\n          numElementsParam = 'maxNumElements';\n        }\n        const numElements = getParamValue(numElementsParam, node, tensorMap, context);\n        const tensorList = reserve(elementShape, elementDtype, numElements);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n    case 'TensorListGather':\n      {\n        const gatherId = getParamValue('tensorListId', node, tensorMap, context);\n        const gatherIndices = getParamValue('indices', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = context.getTensorList(gatherId.id);\n        return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n      }\n    case 'TensorListStack':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        const numElements = getParamValue('numElements', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        return [tensorList.stack(elementShape, elementDtype, numElements)];\n      }\n    case 'TensorListFromTensor':\n      {\n        const tensor = getParamValue('tensor', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = fromTensor(tensor, elementShape, elementDtype);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n    case 'TensorListConcat':\n      {\n        const concatId = getParamValue('tensorListId', node, tensorMap, context);\n        const tensorList = context.getTensorList(concatId.id);\n        const concatDtype = getParamValue('dtype', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        return [tensorList.concat(concatDtype, elementShape)];\n      }\n    case 'TensorListPushBack':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const writeTensor = getParamValue('tensor', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        tensorList.pushBack(writeTensor);\n        return [tensorList.idTensor];\n      }\n    case 'TensorListPopBack':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDType = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        return [tensorList.popBack(elementShape, elementDType)];\n      }\n    case 'TensorListSplit':\n      {\n        const splitTensor = getParamValue('tensor', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const lengths = getParamValue('lengths', node, tensorMap, context);\n        const tensorList = split(splitTensor, lengths, elementShape);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'control';","map":{"version":3,"sources":["../../../src/operations/executors/control_executor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { scalar } from '@tensorflow/tfjs-core';\nimport { TensorArray } from '../../executor/tensor_array';\nimport { fromTensor, reserve, scatter, split } from '../../executor/tensor_list';\nimport { cloneTensor, getParamValue, getTensor } from './utils';\nexport const executeOp = async (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'If':\n        case 'StatelessIf': {\n            const thenFunc = getParamValue('thenBranch', node, tensorMap, context);\n            const elseFunc = getParamValue('elseBranch', node, tensorMap, context);\n            const cond = getParamValue('cond', node, tensorMap, context);\n            const args = getParamValue('args', node, tensorMap, context);\n            const condValue = await cond.data();\n            if (condValue[0]) {\n                return context.functionMap[thenFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n            }\n            else {\n                return context.functionMap[elseFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n            }\n        }\n        case 'While':\n        case 'StatelessWhile': {\n            const bodyFunc = getParamValue('body', node, tensorMap, context);\n            const condFunc = getParamValue('cond', node, tensorMap, context);\n            const args = getParamValue('args', node, tensorMap, context);\n            // Calculate the condition of the loop\n            const condResult = (await context.functionMap[condFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap));\n            const argIds = args.map(tensor => tensor.id);\n            let condValue = await condResult[0].data();\n            // Dispose the intermediate tensors for condition function\n            condResult.forEach(tensor => {\n                if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n                    tensor.dispose();\n                }\n            });\n            let result = args;\n            while (condValue[0]) {\n                // Record the previous result for intermediate tensor tracking\n                const origResult = result;\n                // Execution the body of the loop\n                result = await context.functionMap[bodyFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n                const resultIds = result.map(tensor => tensor.id);\n                // Dispose the intermediate tensor for body function that is not global\n                // kept, not input/output of the body function\n                origResult.forEach(tensor => {\n                    if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n                        resultIds.indexOf(tensor.id) === -1) {\n                        tensor.dispose();\n                    }\n                });\n                // Recalcuate the condition of the loop using the latest results.\n                const condResult = (await context.functionMap[condFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap));\n                condValue = await condResult[0].data();\n                // Dispose the intermediate tensors for condition function\n                condResult.forEach(tensor => {\n                    if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n                        resultIds.indexOf(tensor.id) === -1) {\n                        tensor.dispose();\n                    }\n                });\n            }\n            return result;\n        }\n        case 'LoopCond': {\n            const pred = getParamValue('pred', node, tensorMap, context);\n            return [cloneTensor(pred)];\n        }\n        case 'Switch': {\n            const pred = getParamValue('pred', node, tensorMap, context);\n            let data = getParamValue('data', node, tensorMap, context);\n            if (!data.kept) {\n                data = cloneTensor(data);\n            }\n            // Outputs nodes :0 => false, :1 => true\n            return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n        }\n        case 'Merge': {\n            const inputName = node.inputNames.find(name => getTensor(name, tensorMap, context) !== undefined);\n            if (inputName) {\n                const data = getTensor(inputName, tensorMap, context);\n                return [cloneTensor(data)];\n            }\n            return undefined;\n        }\n        case 'Enter': {\n            const frameId = getParamValue('frameName', node, tensorMap, context);\n            const data = getParamValue('tensor', node, tensorMap, context);\n            context.enterFrame(frameId);\n            return [cloneTensor(data)];\n        }\n        case 'Exit': {\n            const data = getParamValue('tensor', node, tensorMap, context);\n            context.exitFrame();\n            return [cloneTensor(data)];\n        }\n        case 'NextIteration': {\n            const data = getParamValue('tensor', node, tensorMap, context);\n            context.nextIteration();\n            return [cloneTensor(data)];\n        }\n        case 'TensorArrayV3': {\n            const size = getParamValue('size', node, tensorMap, context);\n            const dtype = getParamValue('dtype', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const dynamicSize = getParamValue('dynamicSize', node, tensorMap, context);\n            const clearAfterRead = getParamValue('clearAfterRead', node, tensorMap, context);\n            const identicalElementShapes = getParamValue('identicalElementShapes', node, tensorMap, context);\n            const name = getParamValue('name', node, tensorMap, context);\n            const tensorArray = new TensorArray(name, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);\n            context.addTensorArray(tensorArray);\n            return [tensorArray.idTensor, scalar(1.0)];\n        }\n        case 'TensorArrayWriteV3': {\n            const id = getParamValue('tensorArrayId', node, tensorMap, context);\n            const index = getParamValue('index', node, tensorMap, context);\n            const writeTensor = getParamValue('tensor', node, tensorMap, context);\n            const writeTensorArray = context.getTensorArray(id.id);\n            writeTensorArray.write(index, writeTensor);\n            return [writeTensorArray.idTensor];\n        }\n        case 'TensorArrayReadV3': {\n            const readId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const readIndex = getParamValue('index', node, tensorMap, context);\n            const readTensorArray = context.getTensorArray(readId.id);\n            return [readTensorArray.read(readIndex)];\n        }\n        case 'TensorArrayGatherV3': {\n            const gatherId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const gatherIndices = getParamValue('indices', node, tensorMap, context);\n            const gatherDtype = getParamValue('dtype', node, tensorMap, context);\n            const gatherTensorArray = context.getTensorArray(gatherId.id);\n            return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n        }\n        case 'TensorArrayScatterV3': {\n            const scatterId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const scatterIndices = getParamValue('indices', node, tensorMap, context);\n            const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n            const scatterTensorArray = context.getTensorArray(scatterId.id);\n            scatterTensorArray.scatter(scatterIndices, scatterTensor);\n            return [scatterTensorArray.idTensor];\n        }\n        case 'TensorArrayConcatV3': {\n            const concatId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const concatTensorArray = context.getTensorArray(concatId.id);\n            const concatDtype = getParamValue('dtype', node, tensorMap, context);\n            return [concatTensorArray.concat(concatDtype)];\n        }\n        case 'TensorArraySplitV3': {\n            const splitId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const splitTensor = getParamValue('tensor', node, tensorMap, context);\n            const lengths = getParamValue('lengths', node, tensorMap, context);\n            const splitTensorArray = context.getTensorArray(splitId.id);\n            splitTensorArray.split(lengths, splitTensor);\n            return [splitTensorArray.idTensor];\n        }\n        case 'TensorArraySizeV3': {\n            const sizeId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const sizeTensorArray = context.getTensorArray(sizeId.id);\n            return [scalar(sizeTensorArray.size(), 'int32')];\n        }\n        case 'TensorArrayCloseV3': {\n            const closeId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const closeTensorArray = context.getTensorArray(closeId.id);\n            closeTensorArray.clearAndClose();\n            return [closeTensorArray.idTensor];\n        }\n        case 'TensorListSetItem': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const index = getParamValue('index', node, tensorMap, context);\n            const writeTensor = getParamValue('tensor', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            tensorList.setItem(index, writeTensor);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListGetItem': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const readIndex = getParamValue('index', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDType = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            return [tensorList.getItem(readIndex, elementShape, elementDType)];\n        }\n        case 'TensorListScatterV2':\n        case 'TensorListScatter': {\n            const scatterIndices = getParamValue('indices', node, tensorMap, context);\n            const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const numElements = getParamValue('numElements', node, tensorMap, context);\n            const tensorList = scatter(scatterTensor, scatterIndices, elementShape, numElements);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListReserve':\n        case 'EmptyTensorList': {\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            let numElementsParam;\n            if (node.op === 'TensorListReserve') {\n                numElementsParam = 'numElements';\n            }\n            else {\n                numElementsParam = 'maxNumElements';\n            }\n            const numElements = getParamValue(numElementsParam, node, tensorMap, context);\n            const tensorList = reserve(elementShape, elementDtype, numElements);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListGather': {\n            const gatherId = getParamValue('tensorListId', node, tensorMap, context);\n            const gatherIndices = getParamValue('indices', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = context.getTensorList(gatherId.id);\n            return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n        }\n        case 'TensorListStack': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            const numElements = getParamValue('numElements', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            return [tensorList.stack(elementShape, elementDtype, numElements)];\n        }\n        case 'TensorListFromTensor': {\n            const tensor = getParamValue('tensor', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = fromTensor(tensor, elementShape, elementDtype);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListConcat': {\n            const concatId = getParamValue('tensorListId', node, tensorMap, context);\n            const tensorList = context.getTensorList(concatId.id);\n            const concatDtype = getParamValue('dtype', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            return [tensorList.concat(concatDtype, elementShape)];\n        }\n        case 'TensorListPushBack': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const writeTensor = getParamValue('tensor', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            tensorList.pushBack(writeTensor);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListPopBack': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDType = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            return [tensorList.popBack(elementShape, elementDType)];\n        }\n        case 'TensorListSplit': {\n            const splitTensor = getParamValue('tensor', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const lengths = getParamValue('lengths', node, tensorMap, context);\n            const tensorList = split(splitTensor, lengths, elementShape);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'control';\n//# sourceMappingURL=control_executor.js.map"]},"metadata":{},"sourceType":"module"}