{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport './flags_wasm';\nimport { DataStorage, deprecationWarn, engine, env, KernelBackend, util } from '@tensorflow/tfjs-core';\nimport * as wasmFactoryThreadedSimd_import from '../wasm-out/tfjs-backend-wasm-threaded-simd.js';\n// @ts-ignore\nimport { wasmWorkerContents } from '../wasm-out/tfjs-backend-wasm-threaded-simd.worker.js';\nimport * as wasmFactory_import from '../wasm-out/tfjs-backend-wasm.js';\n// This workaround is required for importing in Node.js without using\n// the node bundle (for testing). This would not be necessary if we\n// flipped esModuleInterop to true, but we likely can't do that since\n// google3 does not use it.\nconst wasmFactoryThreadedSimd = wasmFactoryThreadedSimd_import.default || wasmFactoryThreadedSimd_import;\nconst wasmFactory = wasmFactory_import.default || wasmFactory_import;\nexport class BackendWasm extends KernelBackend {\n  constructor(wasm) {\n    super();\n    this.wasm = wasm;\n    // 0 is reserved for null data ids.\n    this.dataIdNextNumber = 1;\n    this.wasm.tfjs.initWithThreadsCount(threadsCount);\n    actualThreadsCount = this.wasm.tfjs.getThreadsCount();\n    this.dataIdMap = new DataStorage(this, engine());\n  }\n  write(values, shape, dtype) {\n    const dataId = {\n      id: this.dataIdNextNumber++\n    };\n    this.move(dataId, values, shape, dtype, 1);\n    return dataId;\n  }\n  numDataIds() {\n    return this.dataIdMap.numDataIds();\n  }\n  async time(f) {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {\n      kernelMs\n    };\n  }\n  move(dataId, values, shape, dtype, refCount) {\n    const id = this.dataIdNextNumber++;\n    if (dtype === 'string') {\n      const stringBytes = values;\n      this.dataIdMap.set(dataId, {\n        id,\n        stringBytes,\n        shape,\n        dtype,\n        memoryOffset: null,\n        refCount\n      });\n      return;\n    }\n    const size = util.sizeFromShape(shape);\n    const numBytes = size * util.bytesPerElement(dtype);\n    const memoryOffset = this.wasm._malloc(numBytes);\n    this.dataIdMap.set(dataId, {\n      id,\n      memoryOffset,\n      shape,\n      dtype,\n      refCount\n    });\n    this.wasm.tfjs.registerTensor(id, size, memoryOffset);\n    if (values != null) {\n      this.wasm.HEAPU8.set(new Uint8Array(values.buffer, values.byteOffset, numBytes), memoryOffset);\n    }\n  }\n  async read(dataId) {\n    return this.readSync(dataId);\n  }\n  readSync(dataId, start, end) {\n    const {\n      memoryOffset,\n      dtype,\n      shape,\n      stringBytes\n    } = this.dataIdMap.get(dataId);\n    if (dtype === 'string') {\n      // Slice all elements.\n      if ((start == null || start === 0) && (end == null || end >= stringBytes.length)) {\n        return stringBytes;\n      }\n      return stringBytes.slice(start, end);\n    }\n    start = start || 0;\n    end = end || util.sizeFromShape(shape);\n    const bytesPerElement = util.bytesPerElement(dtype);\n    const bytes = this.wasm.HEAPU8.slice(memoryOffset + start * bytesPerElement, memoryOffset + end * bytesPerElement);\n    return typedArrayFromBuffer(bytes.buffer, dtype);\n  }\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released, false otherwise.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (this.dataIdMap.has(dataId)) {\n      const data = this.dataIdMap.get(dataId);\n      data.refCount--;\n      if (!force && data.refCount > 0) {\n        return false;\n      }\n      this.wasm._free(data.memoryOffset);\n      this.wasm.tfjs.disposeData(data.id);\n      this.dataIdMap.delete(dataId);\n    }\n    return true;\n  }\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId) {\n    if (this.dataIdMap.has(dataId)) {\n      const tensorData = this.dataIdMap.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n  incRef(dataId) {\n    const data = this.dataIdMap.get(dataId);\n    if (data != null) {\n      data.refCount++;\n    }\n  }\n  floatPrecision() {\n    return 32;\n  }\n  // Returns the memory offset of a tensor. Useful for debugging and unit\n  // testing.\n  getMemoryOffset(dataId) {\n    return this.dataIdMap.get(dataId).memoryOffset;\n  }\n  dispose() {\n    this.wasm.tfjs.dispose();\n    if ('PThread' in this.wasm) {\n      this.wasm.PThread.terminateAllThreads();\n    }\n    this.wasm = null;\n  }\n  memory() {\n    return {\n      unreliable: false\n    };\n  }\n  /**\n   * Make a tensor info for the output of an op. If `memoryOffset` is not\n   * present, this method allocates memory on the WASM heap. If `memoryOffset`\n   * is present, the memory was allocated elsewhere (in c++) and we just record\n   * the pointer where that memory lives.\n   */\n  makeOutput(shape, dtype, memoryOffset) {\n    let dataId;\n    if (memoryOffset == null) {\n      dataId = this.write(null /* values */, shape, dtype);\n    } else {\n      const id = this.dataIdNextNumber++;\n      dataId = {\n        id\n      };\n      this.dataIdMap.set(dataId, {\n        id,\n        memoryOffset,\n        shape,\n        dtype,\n        refCount: 1\n      });\n      const size = util.sizeFromShape(shape);\n      this.wasm.tfjs.registerTensor(id, size, memoryOffset);\n    }\n    return {\n      dataId,\n      shape,\n      dtype\n    };\n  }\n  typedArrayFromHeap(_ref) {\n    let {\n      shape,\n      dtype,\n      dataId\n    } = _ref;\n    const buffer = this.wasm.HEAPU8.buffer;\n    const {\n      memoryOffset\n    } = this.dataIdMap.get(dataId);\n    const size = util.sizeFromShape(shape);\n    switch (dtype) {\n      case 'float32':\n        return new Float32Array(buffer, memoryOffset, size);\n      case 'int32':\n        return new Int32Array(buffer, memoryOffset, size);\n      case 'bool':\n        return new Uint8Array(buffer, memoryOffset, size);\n      default:\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n  }\n}\nfunction createInstantiateWasmFunc(path) {\n  // this will be replace by rollup plugin patchWechatWebAssembly in\n  // minprogram's output.\n  // tslint:disable-next-line:no-any\n  return (imports, callback) => {\n    util.fetch(path, {\n      credentials: 'same-origin'\n    }).then(response => {\n      if (!response['ok']) {\n        imports.env.a(`failed to load wasm binary file at '${path}'`);\n      }\n      response.arrayBuffer().then(binary => {\n        WebAssembly.instantiate(binary, imports).then(output => {\n          callback(output.instance, output.module);\n        });\n      });\n    });\n    return {};\n  };\n}\n/**\n * Returns the path of the WASM binary.\n * @param simdSupported whether SIMD is supported\n * @param threadsSupported whether multithreading is supported\n * @param wasmModuleFolder the directory containing the WASM binaries.\n */\nfunction getPathToWasmBinary(simdSupported, threadsSupported, wasmModuleFolder) {\n  if (wasmPath != null) {\n    // If wasmPath is defined, the user has supplied a full path to\n    // the vanilla .wasm binary.\n    return wasmPath;\n  }\n  let path = 'tfjs-backend-wasm.wasm';\n  if (simdSupported && threadsSupported) {\n    path = 'tfjs-backend-wasm-threaded-simd.wasm';\n  } else if (simdSupported) {\n    path = 'tfjs-backend-wasm-simd.wasm';\n  }\n  if (wasmFileMap != null) {\n    if (wasmFileMap[path] != null) {\n      return wasmFileMap[path];\n    }\n  }\n  return wasmModuleFolder + path;\n}\n/**\n * Initializes the wasm module and creates the js <--> wasm bridge.\n *\n * NOTE: We wrap the wasm module in a object with property 'wasm' instead of\n * returning Promise<BackendWasmModule> to avoid freezing Chrome (last tested\n * in Chrome 76).\n */\nexport async function init() {\n  const [simdSupported, threadsSupported] = await Promise.all([env().getAsync('WASM_HAS_SIMD_SUPPORT'), env().getAsync('WASM_HAS_MULTITHREAD_SUPPORT')]);\n  return new Promise((resolve, reject) => {\n    const factoryConfig = {};\n    /**\n     * This function overrides the Emscripten module locateFile utility.\n     * @param path The relative path to the file that needs to be loaded.\n     * @param prefix The path to the main JavaScript file's directory.\n     */\n    factoryConfig.locateFile = (path, prefix) => {\n      if (path.endsWith('.worker.js')) {\n        // Escape '\\n' because Blob will turn it into a newline.\n        // There should be a setting for this, but 'endings: \"native\"' does\n        // not seem to work.\n        const response = wasmWorkerContents.replace(/\\n/g, '\\\\n');\n        const blob = new Blob([response], {\n          type: 'application/javascript'\n        });\n        return URL.createObjectURL(blob);\n      }\n      if (path.endsWith('.wasm')) {\n        return getPathToWasmBinary(simdSupported, threadsSupported, wasmPathPrefix != null ? wasmPathPrefix : prefix);\n      }\n      return prefix + path;\n    };\n    // Use the instantiateWasm override when system fetch is not available.\n    // Reference:\n    // https://github.com/emscripten-core/emscripten/blob/2bca083cbbd5a4133db61fbd74d04f7feecfa907/tests/manual_wasm_instantiate.html#L170\n    if (customFetch) {\n      factoryConfig.instantiateWasm = createInstantiateWasmFunc(getPathToWasmBinary(simdSupported, threadsSupported, wasmPathPrefix != null ? wasmPathPrefix : ''));\n    }\n    let initialized = false;\n    factoryConfig.onAbort = () => {\n      if (initialized) {\n        // Emscripten already called console.warn so no need to double log.\n        return;\n      }\n      if (initAborted) {\n        // Emscripten calls `onAbort` twice, resulting in double error\n        // messages.\n        return;\n      }\n      initAborted = true;\n      const rejectMsg = 'Make sure the server can serve the `.wasm` file relative to the ' + 'bundled js file. For more details see https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers';\n      reject({\n        message: rejectMsg\n      });\n    };\n    let wasm;\n    // If `wasmPath` has been defined we must initialize the vanilla module.\n    if (threadsSupported && simdSupported && wasmPath == null) {\n      factoryConfig.mainScriptUrlOrBlob = new Blob([`var WasmBackendModuleThreadedSimd = ` + wasmFactoryThreadedSimd.toString()], {\n        type: 'text/javascript'\n      });\n      wasm = wasmFactoryThreadedSimd(factoryConfig);\n    } else {\n      // The wasmFactory works for both vanilla and SIMD binaries.\n      wasm = wasmFactory(factoryConfig);\n    }\n    // The `wasm` promise will resolve to the WASM module created by\n    // the factory, but it might have had errors during creation. Most\n    // errors are caught by the onAbort callback defined above.\n    // However, some errors, such as those occurring from a\n    // failed fetch, result in this promise being rejected. These are\n    // caught and re-rejected below.\n    wasm.then(module => {\n      initialized = true;\n      initAborted = false;\n      const voidReturnType = null;\n      // Using the tfjs namespace to avoid conflict with emscripten's API.\n      module.tfjs = {\n        init: module.cwrap('init', null, []),\n        initWithThreadsCount: module.cwrap('init_with_threads_count', null, ['number']),\n        getThreadsCount: module.cwrap('get_threads_count', 'number', []),\n        registerTensor: module.cwrap('register_tensor', null, ['number', 'number', 'number' // memoryOffset\n        ]),\n\n        disposeData: module.cwrap('dispose_data', voidReturnType, ['number']),\n        dispose: module.cwrap('dispose', voidReturnType, [])\n      };\n      resolve({\n        wasm: module\n      });\n    }).catch(reject);\n  });\n}\nfunction typedArrayFromBuffer(buffer, dtype) {\n  switch (dtype) {\n    case 'float32':\n      return new Float32Array(buffer);\n    case 'int32':\n      return new Int32Array(buffer);\n    case 'bool':\n      return new Uint8Array(buffer);\n    default:\n      throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\nconst wasmBinaryNames = ['tfjs-backend-wasm.wasm', 'tfjs-backend-wasm-simd.wasm', 'tfjs-backend-wasm-threaded-simd.wasm'];\nlet wasmPath = null;\nlet wasmPathPrefix = null;\nlet wasmFileMap = {};\nlet initAborted = false;\nlet customFetch = false;\n/**\n * @deprecated Use `setWasmPaths` instead.\n * Sets the path to the `.wasm` file which will be fetched when the wasm\n * backend is initialized. See\n * https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers\n * for more details.\n * @param path wasm file path or url\n * @param usePlatformFetch optional boolean to use platform fetch to download\n *     the wasm file, default to false.\n *\n * @doc {heading: 'Environment', namespace: 'wasm'}\n */\nexport function setWasmPath(path) {\n  let usePlatformFetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  deprecationWarn('setWasmPath has been deprecated in favor of setWasmPaths and' + ' will be removed in a future release.');\n  if (initAborted) {\n    throw new Error('The WASM backend was already initialized. Make sure you call ' + '`setWasmPath()` before you call `tf.setBackend()` or `tf.ready()`');\n  }\n  wasmPath = path;\n  customFetch = usePlatformFetch;\n}\n/**\n * Configures the locations of the WASM binaries.\n *\n * ```js\n * setWasmPaths({\n *  'tfjs-backend-wasm.wasm': 'renamed.wasm',\n *  'tfjs-backend-wasm-simd.wasm': 'renamed-simd.wasm',\n *  'tfjs-backend-wasm-threaded-simd.wasm': 'renamed-threaded-simd.wasm'\n * });\n * tf.setBackend('wasm');\n * ```\n *\n * @param prefixOrFileMap This can be either a string or object:\n *  - (string) The path to the directory where the WASM binaries are located.\n *     Note that this prefix will be used to load each binary (vanilla,\n *     SIMD-enabled, threading-enabled, etc.).\n *  - (object) Mapping from names of WASM binaries to custom\n *     full paths specifying the locations of those binaries. This is useful if\n *     your WASM binaries are not all located in the same directory, or if your\n *     WASM binaries have been renamed.\n * @param usePlatformFetch optional boolean to use platform fetch to download\n *     the wasm file, default to false.\n *\n * @doc {heading: 'Environment', namespace: 'wasm'}\n */\nexport function setWasmPaths(prefixOrFileMap) {\n  let usePlatformFetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (initAborted) {\n    throw new Error('The WASM backend was already initialized. Make sure you call ' + '`setWasmPaths()` before you call `tf.setBackend()` or ' + '`tf.ready()`');\n  }\n  if (typeof prefixOrFileMap === 'string') {\n    wasmPathPrefix = prefixOrFileMap;\n  } else {\n    wasmFileMap = prefixOrFileMap;\n    const missingPaths = wasmBinaryNames.filter(name => wasmFileMap[name] == null);\n    if (missingPaths.length > 0) {\n      throw new Error(`There were no entries found for the following binaries: ` + `${missingPaths.join(',')}. Please either call setWasmPaths with a ` + `map providing a path for each binary, or with a string indicating ` + `the directory where all the binaries can be found.`);\n    }\n  }\n  customFetch = usePlatformFetch;\n}\n/** Used in unit tests. */\nexport function resetWasmPath() {\n  wasmPath = null;\n  wasmPathPrefix = null;\n  wasmFileMap = {};\n  customFetch = false;\n  initAborted = false;\n}\nlet threadsCount = -1;\nlet actualThreadsCount = -1;\n/**\n * Sets the number of threads that will be used by XNNPACK to create\n * threadpool (default to the number of logical CPU cores).\n *\n * This must be called before calling `tf.setBackend('wasm')`.\n */\nexport function setThreadsCount(numThreads) {\n  threadsCount = numThreads;\n}\n/**\n * Gets the actual threads count that is used by XNNPACK.\n *\n * It is set after the backend is intialized.\n */\nexport function getThreadsCount() {\n  if (actualThreadsCount === -1) {\n    throw new Error(`WASM backend not initialized.`);\n  }\n  return actualThreadsCount;\n}","map":{"version":3,"sources":["../../../../../tfjs-backend-wasm/src/backend_wasm.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport './flags_wasm';\n\nimport {backend_util, BackendTimingInfo, DataStorage, DataType, deprecationWarn, engine, env, KernelBackend, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasmModule, WasmFactoryConfig} from '../wasm-out/tfjs-backend-wasm';\nimport {BackendWasmThreadedSimdModule} from '../wasm-out/tfjs-backend-wasm-threaded-simd';\nimport  * as wasmFactoryThreadedSimd_import from '../wasm-out/tfjs-backend-wasm-threaded-simd.js';\n// @ts-ignore\nimport {wasmWorkerContents} from '../wasm-out/tfjs-backend-wasm-threaded-simd.worker.js';\nimport * as wasmFactory_import from '../wasm-out/tfjs-backend-wasm.js';\n\n// This workaround is required for importing in Node.js without using\n// the node bundle (for testing). This would not be necessary if we\n// flipped esModuleInterop to true, but we likely can't do that since\n// google3 does not use it.\nconst wasmFactoryThreadedSimd = (wasmFactoryThreadedSimd_import.default\n  || wasmFactoryThreadedSimd_import) as\ntypeof wasmFactoryThreadedSimd_import.default;\nconst wasmFactory = (wasmFactory_import.default\n  || wasmFactory_import) as typeof wasmFactory_import.default;\n\ninterface TensorData {\n  id: number;\n  memoryOffset: number;\n  shape: number[];\n  dtype: DataType;\n  refCount: number;\n  /** Only used for string tensors, storing encoded bytes. */\n  stringBytes?: Uint8Array[];\n}\n\nexport type DataId = object;  // object instead of {} to force non-primitive.\n\nexport class BackendWasm extends KernelBackend {\n  // 0 is reserved for null data ids.\n  private dataIdNextNumber = 1;\n  dataIdMap: DataStorage<TensorData>;\n\n  constructor(public wasm: BackendWasmModule|BackendWasmThreadedSimdModule) {\n    super();\n    this.wasm.tfjs.initWithThreadsCount(threadsCount);\n    actualThreadsCount = this.wasm.tfjs.getThreadsCount();\n    this.dataIdMap = new DataStorage(this, engine());\n  }\n\n  override write(values: backend_util.BackendValues, shape: number[],\n      dtype: DataType): DataId {\n    const dataId = {id: this.dataIdNextNumber++};\n    this.move(dataId, values, shape, dtype, 1);\n    return dataId;\n  }\n\n  override numDataIds(): number {\n    return this.dataIdMap.numDataIds();\n  }\n\n  override async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {kernelMs};\n  }\n\n  override move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType, refCount: number): void {\n    const id = this.dataIdNextNumber++;\n    if (dtype === 'string') {\n      const stringBytes = values as Uint8Array[];\n      this.dataIdMap.set(\n          dataId,\n          {id, stringBytes, shape, dtype, memoryOffset: null, refCount});\n      return;\n    }\n\n    const size = util.sizeFromShape(shape);\n    const numBytes = size * util.bytesPerElement(dtype);\n    const memoryOffset = this.wasm._malloc(numBytes);\n\n    this.dataIdMap.set(dataId, {id, memoryOffset, shape, dtype, refCount});\n\n    this.wasm.tfjs.registerTensor(id, size, memoryOffset);\n\n    if (values != null) {\n      this.wasm.HEAPU8.set(\n          new Uint8Array(\n              (values as backend_util.TypedArray).buffer,\n              (values as backend_util.TypedArray).byteOffset, numBytes),\n          memoryOffset);\n    }\n  }\n\n  override async read(dataId: DataId): Promise<backend_util.BackendValues> {\n    return this.readSync(dataId);\n  }\n\n  override readSync(dataId: DataId, start?: number, end?: number):\n      backend_util.BackendValues {\n    const {memoryOffset, dtype, shape, stringBytes} =\n        this.dataIdMap.get(dataId);\n    if (dtype === 'string') {\n      // Slice all elements.\n      if ((start == null || start === 0) &&\n          (end == null || end >= stringBytes.length)) {\n        return stringBytes;\n      }\n      return stringBytes.slice(start, end);\n    }\n    start = start || 0;\n    end = end || util.sizeFromShape(shape);\n    const bytesPerElement = util.bytesPerElement(dtype);\n    const bytes = this.wasm.HEAPU8.slice(\n        memoryOffset + start * bytesPerElement,\n        memoryOffset + end * bytesPerElement);\n    return typedArrayFromBuffer(bytes.buffer, dtype);\n  }\n\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released, false otherwise.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  override disposeData(dataId: DataId, force = false): boolean {\n    if (this.dataIdMap.has(dataId)) {\n      const data = this.dataIdMap.get(dataId);\n      data.refCount--;\n      if (!force && data.refCount > 0) {\n        return false;\n      }\n\n      this.wasm._free(data.memoryOffset);\n      this.wasm.tfjs.disposeData(data.id);\n      this.dataIdMap.delete(dataId);\n    }\n    return true;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  override refCount(dataId: DataId): number {\n    if (this.dataIdMap.has(dataId)) {\n      const tensorData = this.dataIdMap.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  override incRef(dataId: DataId) {\n    const data = this.dataIdMap.get(dataId);\n    if (data != null) {\n      data.refCount++;\n    }\n  }\n\n  override floatPrecision(): 32 {\n    return 32;\n  }\n\n  // Returns the memory offset of a tensor. Useful for debugging and unit\n  // testing.\n  getMemoryOffset(dataId: DataId): number {\n    return this.dataIdMap.get(dataId).memoryOffset;\n  }\n\n  override dispose() {\n    this.wasm.tfjs.dispose();\n    if ('PThread' in this.wasm) {\n      this.wasm.PThread.terminateAllThreads();\n    }\n    this.wasm = null;\n  }\n\n  override memory() {\n    return {unreliable: false};\n  }\n\n  /**\n   * Make a tensor info for the output of an op. If `memoryOffset` is not\n   * present, this method allocates memory on the WASM heap. If `memoryOffset`\n   * is present, the memory was allocated elsewhere (in c++) and we just record\n   * the pointer where that memory lives.\n   */\n  makeOutput(shape: number[], dtype: DataType, memoryOffset?: number):\n      TensorInfo {\n    let dataId: {};\n    if (memoryOffset == null) {\n      dataId = this.write(null /* values */, shape, dtype);\n    } else {\n      const id = this.dataIdNextNumber++;\n      dataId = {id};\n      this.dataIdMap.set(dataId, {id, memoryOffset, shape, dtype, refCount: 1});\n      const size = util.sizeFromShape(shape);\n      this.wasm.tfjs.registerTensor(id, size, memoryOffset);\n    }\n    return {dataId, shape, dtype};\n  }\n\n  typedArrayFromHeap({shape, dtype, dataId}: TensorInfo):\n      backend_util.TypedArray {\n    const buffer = this.wasm.HEAPU8.buffer;\n    const {memoryOffset} = this.dataIdMap.get(dataId);\n    const size = util.sizeFromShape(shape);\n    switch (dtype) {\n      case 'float32':\n        return new Float32Array(buffer, memoryOffset, size);\n      case 'int32':\n        return new Int32Array(buffer, memoryOffset, size);\n      case 'bool':\n        return new Uint8Array(buffer, memoryOffset, size);\n      default:\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n  }\n}\n\nfunction createInstantiateWasmFunc(path: string) {\n  // this will be replace by rollup plugin patchWechatWebAssembly in\n  // minprogram's output.\n  // tslint:disable-next-line:no-any\n  return (imports: any, callback: any) => {\n    util.fetch(path, {credentials: 'same-origin'}).then((response) => {\n      if (!response['ok']) {\n        imports.env.a(`failed to load wasm binary file at '${path}'`);\n      }\n      response.arrayBuffer().then(binary => {\n        WebAssembly.instantiate(binary, imports).then(output => {\n          callback(output.instance, output.module);\n        });\n      });\n    });\n    return {};\n  };\n}\n\n/**\n * Returns the path of the WASM binary.\n * @param simdSupported whether SIMD is supported\n * @param threadsSupported whether multithreading is supported\n * @param wasmModuleFolder the directory containing the WASM binaries.\n */\nfunction getPathToWasmBinary(\n    simdSupported: boolean, threadsSupported: boolean,\n    wasmModuleFolder: string) {\n  if (wasmPath != null) {\n    // If wasmPath is defined, the user has supplied a full path to\n    // the vanilla .wasm binary.\n    return wasmPath;\n  }\n\n  let path: WasmBinaryName = 'tfjs-backend-wasm.wasm';\n  if (simdSupported && threadsSupported) {\n    path = 'tfjs-backend-wasm-threaded-simd.wasm';\n  } else if (simdSupported) {\n    path = 'tfjs-backend-wasm-simd.wasm';\n  }\n\n  if (wasmFileMap != null) {\n    if (wasmFileMap[path] != null) {\n      return wasmFileMap[path];\n    }\n  }\n\n  return wasmModuleFolder + path;\n}\n\n/**\n * Initializes the wasm module and creates the js <--> wasm bridge.\n *\n * NOTE: We wrap the wasm module in a object with property 'wasm' instead of\n * returning Promise<BackendWasmModule> to avoid freezing Chrome (last tested\n * in Chrome 76).\n */\nexport async function init(): Promise<{wasm: BackendWasmModule}> {\n  const [simdSupported, threadsSupported] = await Promise.all([\n    env().getAsync('WASM_HAS_SIMD_SUPPORT'),\n    env().getAsync('WASM_HAS_MULTITHREAD_SUPPORT')\n  ]);\n\n  return new Promise((resolve, reject) => {\n    const factoryConfig: WasmFactoryConfig = {};\n\n    /**\n     * This function overrides the Emscripten module locateFile utility.\n     * @param path The relative path to the file that needs to be loaded.\n     * @param prefix The path to the main JavaScript file's directory.\n     */\n    factoryConfig.locateFile = (path, prefix) => {\n      if (path.endsWith('.worker.js')) {\n        // Escape '\\n' because Blob will turn it into a newline.\n        // There should be a setting for this, but 'endings: \"native\"' does\n        // not seem to work.\n        const response = (wasmWorkerContents as string).replace(/\\n/g, '\\\\n');\n        const blob = new Blob([response], {type: 'application/javascript'});\n        return URL.createObjectURL(blob);\n      }\n\n      if (path.endsWith('.wasm')) {\n        return getPathToWasmBinary(\n            simdSupported as boolean, threadsSupported as boolean,\n            wasmPathPrefix != null ? wasmPathPrefix : prefix);\n      }\n      return prefix + path;\n    };\n\n    // Use the instantiateWasm override when system fetch is not available.\n    // Reference:\n    // https://github.com/emscripten-core/emscripten/blob/2bca083cbbd5a4133db61fbd74d04f7feecfa907/tests/manual_wasm_instantiate.html#L170\n    if (customFetch) {\n      factoryConfig.instantiateWasm =\n          createInstantiateWasmFunc(getPathToWasmBinary(\n              simdSupported as boolean, threadsSupported as boolean,\n              wasmPathPrefix != null ? wasmPathPrefix : ''));\n    }\n\n    let initialized = false;\n    factoryConfig.onAbort = () => {\n      if (initialized) {\n        // Emscripten already called console.warn so no need to double log.\n        return;\n      }\n      if (initAborted) {\n        // Emscripten calls `onAbort` twice, resulting in double error\n        // messages.\n        return;\n      }\n      initAborted = true;\n      const rejectMsg =\n          'Make sure the server can serve the `.wasm` file relative to the ' +\n          'bundled js file. For more details see https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers';\n      reject({message: rejectMsg});\n    };\n\n    let wasm: Promise<BackendWasmModule>;\n    // If `wasmPath` has been defined we must initialize the vanilla module.\n    if (threadsSupported && simdSupported && wasmPath == null) {\n      factoryConfig.mainScriptUrlOrBlob = new Blob(\n          [`var WasmBackendModuleThreadedSimd = ` +\n           wasmFactoryThreadedSimd.toString()],\n          {type: 'text/javascript'});\n      wasm = wasmFactoryThreadedSimd(factoryConfig);\n    } else {\n      // The wasmFactory works for both vanilla and SIMD binaries.\n      wasm = wasmFactory(factoryConfig);\n    }\n\n    // The `wasm` promise will resolve to the WASM module created by\n    // the factory, but it might have had errors during creation. Most\n    // errors are caught by the onAbort callback defined above.\n    // However, some errors, such as those occurring from a\n    // failed fetch, result in this promise being rejected. These are\n    // caught and re-rejected below.\n    wasm.then((module) => {\n      initialized = true;\n      initAborted = false;\n\n      const voidReturnType: string = null;\n      // Using the tfjs namespace to avoid conflict with emscripten's API.\n      module.tfjs = {\n        init: module.cwrap('init', null, []),\n        initWithThreadsCount:\n            module.cwrap('init_with_threads_count', null, ['number']),\n        getThreadsCount: module.cwrap('get_threads_count', 'number', []),\n        registerTensor: module.cwrap(\n            'register_tensor', null,\n            [\n              'number',  // id\n              'number',  // size\n              'number',  // memoryOffset\n            ]),\n        disposeData: module.cwrap('dispose_data', voidReturnType, ['number']),\n        dispose: module.cwrap('dispose', voidReturnType, []),\n      };\n\n      resolve({wasm: module});\n    }).catch(reject);\n  });\n}\n\nfunction typedArrayFromBuffer(\n    buffer: ArrayBuffer, dtype: DataType): backend_util.TypedArray {\n  switch (dtype) {\n    case 'float32':\n      return new Float32Array(buffer);\n    case 'int32':\n      return new Int32Array(buffer);\n    case 'bool':\n      return new Uint8Array(buffer);\n    default:\n      throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n\nconst wasmBinaryNames = [\n  'tfjs-backend-wasm.wasm', 'tfjs-backend-wasm-simd.wasm',\n  'tfjs-backend-wasm-threaded-simd.wasm'\n] as const ;\ntype WasmBinaryName = typeof wasmBinaryNames[number];\n\nlet wasmPath: string = null;\nlet wasmPathPrefix: string = null;\nlet wasmFileMap: {[key in WasmBinaryName]?: string} = {};\nlet initAborted = false;\nlet customFetch = false;\n\n/**\n * @deprecated Use `setWasmPaths` instead.\n * Sets the path to the `.wasm` file which will be fetched when the wasm\n * backend is initialized. See\n * https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers\n * for more details.\n * @param path wasm file path or url\n * @param usePlatformFetch optional boolean to use platform fetch to download\n *     the wasm file, default to false.\n *\n * @doc {heading: 'Environment', namespace: 'wasm'}\n */\nexport function setWasmPath(path: string, usePlatformFetch = false): void {\n  deprecationWarn(\n      'setWasmPath has been deprecated in favor of setWasmPaths and' +\n      ' will be removed in a future release.');\n  if (initAborted) {\n    throw new Error(\n        'The WASM backend was already initialized. Make sure you call ' +\n        '`setWasmPath()` before you call `tf.setBackend()` or `tf.ready()`');\n  }\n  wasmPath = path;\n  customFetch = usePlatformFetch;\n}\n\n/**\n * Configures the locations of the WASM binaries.\n *\n * ```js\n * setWasmPaths({\n *  'tfjs-backend-wasm.wasm': 'renamed.wasm',\n *  'tfjs-backend-wasm-simd.wasm': 'renamed-simd.wasm',\n *  'tfjs-backend-wasm-threaded-simd.wasm': 'renamed-threaded-simd.wasm'\n * });\n * tf.setBackend('wasm');\n * ```\n *\n * @param prefixOrFileMap This can be either a string or object:\n *  - (string) The path to the directory where the WASM binaries are located.\n *     Note that this prefix will be used to load each binary (vanilla,\n *     SIMD-enabled, threading-enabled, etc.).\n *  - (object) Mapping from names of WASM binaries to custom\n *     full paths specifying the locations of those binaries. This is useful if\n *     your WASM binaries are not all located in the same directory, or if your\n *     WASM binaries have been renamed.\n * @param usePlatformFetch optional boolean to use platform fetch to download\n *     the wasm file, default to false.\n *\n * @doc {heading: 'Environment', namespace: 'wasm'}\n */\nexport function setWasmPaths(\n    prefixOrFileMap: string|{[key in WasmBinaryName]?: string},\n    usePlatformFetch = false): void {\n  if (initAborted) {\n    throw new Error(\n        'The WASM backend was already initialized. Make sure you call ' +\n        '`setWasmPaths()` before you call `tf.setBackend()` or ' +\n        '`tf.ready()`');\n  }\n\n  if (typeof prefixOrFileMap === 'string') {\n    wasmPathPrefix = prefixOrFileMap;\n  } else {\n    wasmFileMap = prefixOrFileMap;\n    const missingPaths =\n        wasmBinaryNames.filter(name => wasmFileMap[name] == null);\n    if (missingPaths.length > 0) {\n      throw new Error(\n          `There were no entries found for the following binaries: ` +\n          `${missingPaths.join(',')}. Please either call setWasmPaths with a ` +\n          `map providing a path for each binary, or with a string indicating ` +\n          `the directory where all the binaries can be found.`);\n    }\n  }\n\n  customFetch = usePlatformFetch;\n}\n\n/** Used in unit tests. */\nexport function resetWasmPath(): void {\n  wasmPath = null;\n  wasmPathPrefix = null;\n  wasmFileMap = {};\n  customFetch = false;\n  initAborted = false;\n}\n\nlet threadsCount = -1;\nlet actualThreadsCount = -1;\n\n/**\n * Sets the number of threads that will be used by XNNPACK to create\n * threadpool (default to the number of logical CPU cores).\n *\n * This must be called before calling `tf.setBackend('wasm')`.\n */\nexport function setThreadsCount(numThreads: number) {\n  threadsCount = numThreads;\n}\n\n/**\n * Gets the actual threads count that is used by XNNPACK.\n *\n * It is set after the backend is intialized.\n */\nexport function getThreadsCount(): number {\n  if (actualThreadsCount === -1) {\n    throw new Error(`WASM backend not initialized.`);\n  }\n  return actualThreadsCount;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}