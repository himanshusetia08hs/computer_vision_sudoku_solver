{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function scatterImpl(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices) {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n  const indicesData = indices.values;\n  const updatesData = updates.values;\n  if (outputSize === 0) {\n    return buffer(shape, updates.dtype);\n  }\n  const outBuf = buffer(flattenShape, updates.dtype);\n  outBuf.values.fill(defaultValue);\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        outBuf.values[flattenIndex * sliceSize + k] += updatesData[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ? updatesData[0] : updatesData[i * sliceSize + k];\n      }\n    }\n  }\n  return outBuf;\n}","map":{"version":3,"sources":["../../src/kernels/Scatter_impl.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,MAAM,QAAiD,uBAAuB;AAEtF,OAAM,SAAU,WAAW,CACvB,OAAwB,EAAE,OAAwB,EAAE,KAAe,EACnE,UAAkB,EAAE,SAAiB,EAAE,UAAkB,EACzD,SAAiB,EAAE,OAAiB,EAAE,YAAoB,EAC1D,cAAuB,EAAA;EACzB,MAAM,YAAY,GAAG,CAAC,UAAU,GAAG,SAAS,EAAE,SAAS,CAAC;EAExD,MAAM,WAAW,GAAG,OAAO,CAAC,MAAoB;EAChD,MAAM,WAAW,GAAG,OAAO,CAAC,MAAoB;EAEhD,IAAI,UAAU,KAAK,CAAC,EAAE;IACpB,OAAO,MAAM,CAAC,KAAoB,EAAE,OAAO,CAAC,KAAK,CAAC;EACnD;EAED,MAAM,MAAM,GAAG,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,KAAK,CAAC;EACjD,MAAM,CAAC,MAAqB,CAAC,IAAI,CAAC,YAAY,CAAC;EAEhD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;IACnC,MAAM,KAAK,GAAG,EAAE;IAChB,IAAI,YAAY,GAAG,CAAC;IACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;MAClC,MAAM,GAAG,GAAG,WAAW,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC,CAAC;MAC1C,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;MACf,YAAY,IAAI,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC;IACjC;IAED,IAAI,YAAY,GAAG,CAAC,IAAI,YAAY,IAAI,UAAU,GAAG,SAAS,EAAE;MAC9D,MAAM,IAAI,KAAK,CAAC,oBAAoB,KAAK,wBAAwB,KAAK,EAAE,CAAC;IAC1E;IAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;MAClC,IAAI,cAAc,EAAE;QAClB,MAAM,CAAC,MAAM,CAAC,YAAY,GAAG,SAAS,GAAG,CAAC,CAAC,IACvC,WAAW,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC,CAAC;OACnC,MAAM;QACL,MAAM,CAAC,MAAM,CAAC,YAAY,GAAG,SAAS,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,KAAK,CAAC,GAC5D,WAAW,CAAC,CAAC,CAAC,GACd,WAAW,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC,CAAC;MACnC;IACF;EACF;EAED,OAAO,MAAyB;AAClC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function scatterImpl(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices) {\n    const flattenShape = [outputSize / sliceSize, sliceSize];\n    const indicesData = indices.values;\n    const updatesData = updates.values;\n    if (outputSize === 0) {\n        return buffer(shape, updates.dtype);\n    }\n    const outBuf = buffer(flattenShape, updates.dtype);\n    outBuf.values.fill(defaultValue);\n    for (let i = 0; i < numUpdates; i++) {\n        const index = [];\n        let flattenIndex = 0;\n        for (let j = 0; j < sliceRank; j++) {\n            const dim = indicesData[i * sliceRank + j];\n            index.push(dim);\n            flattenIndex += dim * strides[j];\n        }\n        if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n            throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n        }\n        for (let k = 0; k < sliceSize; k++) {\n            if (sumDupeIndices) {\n                outBuf.values[flattenIndex * sliceSize + k] +=\n                    updatesData[i * sliceSize + k];\n            }\n            else {\n                outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n                    updatesData[0] :\n                    updatesData[i * sliceSize + k];\n            }\n        }\n    }\n    return outBuf;\n}\n//# sourceMappingURL=Scatter_impl.js.map"]},"metadata":{},"sourceType":"module"}