{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unpack } from '@tensorflow/tfjs-core';\nimport { slice } from './Slice';\nfunction unpack(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    value\n  } = inputs;\n  let {\n    axis\n  } = attrs;\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n  const numOutputs = value.shape[axis];\n  const rank = value.shape.length;\n  const outShape = new Array(rank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < rank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n  const outs = new Array(numOutputs);\n  const begin = new Array(rank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  for (let i = 0; i < outs.length; i++) {\n    begin[axis] = i;\n    outs[i] = slice({\n      inputs: {\n        x: value\n      },\n      attrs: {\n        begin,\n        size\n      },\n      backend\n    });\n  }\n  return outs.map(_ref => {\n    let {\n      dataId,\n      dtype\n    } = _ref;\n    return {\n      dataId,\n      dtype,\n      shape: outShape\n    };\n  });\n}\nexport const unpackConfig = {\n  kernelName: Unpack,\n  backendName: 'wasm',\n  kernelFunc: unpack\n};","map":{"version":3,"sources":["../../src/kernels/Unpack.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAA8C,MAAM,QAAkC,uBAAuB;AAI7G,SAAQ,KAAK,QAAO,SAAS;AAE7B,SAAS,MAAM,CACX,IAAsE,EAAA;EAExE,MAAM;IAAC,MAAM;IAAE,OAAO;IAAE;EAAK,CAAC,GAAG,IAAI;EACrC,MAAM;IAAC;EAAK,CAAC,GAAG,MAAM;EACtB,IAAI;IAAC;EAAI,CAAC,GAAG,KAAK;EAElB,IAAI,IAAI,GAAG,CAAC,EAAE;IACZ,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM;EAC3B;EAED,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC;EACpC,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM;EAC/B,MAAM,QAAQ,GAAa,IAAI,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;EAC9C,IAAI,QAAQ,GAAG,CAAC;EAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;IAC7B,IAAI,CAAC,KAAK,IAAI,EAAE;MACd,QAAQ,CAAC,QAAQ,EAAE,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IACtC;EACF;EACD,MAAM,IAAI,GAAiB,IAAI,KAAK,CAAC,UAAU,CAAC;EAChD,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;EACrC,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE;EAChC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;EACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACpC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;IACf,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;MAAC,MAAM,EAAE;QAAC,CAAC,EAAE;MAAK,CAAC;MAAE,KAAK,EAAE;QAAC,KAAK;QAAE;MAAI,CAAC;MAAE;IAAO,CAAC,CAAC;EACrE;EACD,OAAO,IAAI,CAAC,GAAG,CAAC;IAAA,IAAC;MAAC,MAAM;MAAE;IAAK,CAAC;IAAA,OAAM;MAAC,MAAM;MAAE,KAAK;MAAE,KAAK,EAAE;IAAQ,CAAC;EAAA,CAAC,CAAC;AAC1E;AAEA,OAAO,MAAM,YAAY,GAAiB;EACxC,UAAU,EAAE,MAAM;EAClB,WAAW,EAAE,MAAM;EACnB,UAAU,EAAE;CACb","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unpack } from '@tensorflow/tfjs-core';\nimport { slice } from './Slice';\nfunction unpack(args) {\n    const { inputs, backend, attrs } = args;\n    const { value } = inputs;\n    let { axis } = attrs;\n    if (axis < 0) {\n        axis += value.shape.length;\n    }\n    const numOutputs = value.shape[axis];\n    const rank = value.shape.length;\n    const outShape = new Array(rank - 1);\n    let outIndex = 0;\n    for (let i = 0; i < rank; i++) {\n        if (i !== axis) {\n            outShape[outIndex++] = value.shape[i];\n        }\n    }\n    const outs = new Array(numOutputs);\n    const begin = new Array(rank).fill(0);\n    const size = value.shape.slice();\n    size[axis] = 1;\n    for (let i = 0; i < outs.length; i++) {\n        begin[axis] = i;\n        outs[i] = slice({ inputs: { x: value }, attrs: { begin, size }, backend });\n    }\n    return outs.map(({ dataId, dtype }) => ({ dataId, dtype, shape: outShape }));\n}\nexport const unpackConfig = {\n    kernelName: Unpack,\n    backendName: 'wasm',\n    kernelFunc: unpack,\n};\n//# sourceMappingURL=Unpack.js.map"]},"metadata":{},"sourceType":"module"}