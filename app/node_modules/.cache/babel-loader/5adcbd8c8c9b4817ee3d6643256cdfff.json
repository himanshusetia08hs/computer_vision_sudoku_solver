{"ast":null,"code":"'use strict';\n\nvar width = 256; // each RC4 output is 0 <= x < 256\nvar chunks = 6; // at least six RC4 outputs for each double\nvar digits = 52; // there are 52 significant digits in a double\nvar pool = []; // pool: entropy pool starts empty\nvar GLOBAL = typeof global === 'undefined' ? window : global;\n\n//\n// The following constants are related to IEEE 754 limits.\n//\nvar startdenom = Math.pow(width, chunks),\n  significance = Math.pow(2, digits),\n  overflow = significance * 2,\n  mask = width - 1;\nvar oldRandom = Math.random;\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nmodule.exports = function (seed, options) {\n  if (options && options.global === true) {\n    options.global = false;\n    Math.random = module.exports(seed, options);\n    options.global = true;\n    return Math.random;\n  }\n  var use_entropy = options && options.entropy || false;\n  var key = [];\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(use_entropy ? [seed, tostring(pool)] : 0 in arguments ? seed : autoseed(), 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Override Math.random\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n\n  return function () {\n    // Closure to return a random double:\n    var n = arc4.g(chunks),\n      // Start with a numerator n < 2 ^ 48\n      d = startdenom,\n      //   and denominator d = 2 ^ 48.\n      x = 0; //   and no 'extra last byte'.\n    while (n < significance) {\n      // Fill up all significant digits by\n      n = (n + x) * width; //   shifting numerator and\n      d *= width; //   denominator and generating a\n      x = arc4.g(1); //   new least-significant-byte.\n    }\n\n    while (n >= overflow) {\n      // To avoid rounding up, before adding\n      n /= 2; //   last byte, shift everything\n      d /= 2; //   right using integer Math until\n      x >>>= 1; //   we have exactly the desired bits.\n    }\n\n    return (n + x) / d; // Form the number within [0, 1).\n  };\n};\n\nmodule.exports.resetGlobal = function () {\n  Math.random = oldRandom;\n};\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\n/** @constructor */\nfunction ARC4(key) {\n  var t,\n    keylen = key.length,\n    me = this,\n    i = 0,\n    j = me.i = me.j = 0,\n    s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) {\n    key = [keylen++];\n  }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & j + key[i % keylen] + (t = s[i])];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function (count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t,\n      r = 0,\n      i = me.i,\n      j = me.j,\n      s = me.S;\n    while (count--) {\n      t = s[i = mask & i + 1];\n      r = r * width + s[mask & (s[i] = s[j = mask & j + t]) + (s[j] = t)];\n    }\n    me.i = i;\n    me.j = j;\n    return r;\n    // For robust unpredictability discard an initial batch of values.\n    // See http://www.rsa.com/rsalabs/node.asp?id=2009\n  })(width);\n}\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [],\n    typ = (typeof obj)[0],\n    prop;\n  if (depth && typ == 'o') {\n    for (prop in obj) {\n      try {\n        result.push(flatten(obj[prop], depth - 1));\n      } catch (e) {}\n    }\n  }\n  return result.length ? result : typ == 's' ? obj : obj + '\\0';\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '',\n    smear,\n    j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto if available.\n//\n/** @param {Uint8Array=} seed */\nfunction autoseed(seed) {\n  try {\n    GLOBAL.crypto.getRandomValues(seed = new Uint8Array(width));\n    return tostring(seed);\n  } catch (e) {\n    return [+new Date(), GLOBAL, GLOBAL.navigator && GLOBAL.navigator.plugins, GLOBAL.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to intefere with determinstic PRNG state later,\n// seedrandom will not call Math.random on its own again after\n// initialization.\n//\nmixkey(Math.random(), pool);","map":{"version":3,"names":["width","chunks","digits","pool","GLOBAL","global","window","startdenom","Math","pow","significance","overflow","mask","oldRandom","random","module","exports","seed","options","use_entropy","entropy","key","shortseed","mixkey","flatten","tostring","arguments","autoseed","arc4","ARC4","S","n","g","d","x","resetGlobal","t","keylen","length","me","i","j","s","count","r","obj","depth","result","typ","prop","push","e","stringseed","smear","charCodeAt","crypto","getRandomValues","Uint8Array","Date","navigator","plugins","screen","a","String","fromCharCode","apply"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/Project/temp/app/node_modules/seed-random/index.js"],"sourcesContent":["'use strict';\r\n\r\nvar width = 256;// each RC4 output is 0 <= x < 256\r\nvar chunks = 6;// at least six RC4 outputs for each double\r\nvar digits = 52;// there are 52 significant digits in a double\r\nvar pool = [];// pool: entropy pool starts empty\r\nvar GLOBAL = typeof global === 'undefined' ? window : global;\r\n\r\n//\r\n// The following constants are related to IEEE 754 limits.\r\n//\r\nvar startdenom = Math.pow(width, chunks),\r\n    significance = Math.pow(2, digits),\r\n    overflow = significance * 2,\r\n    mask = width - 1;\r\n\r\n\r\nvar oldRandom = Math.random;\r\n\r\n//\r\n// seedrandom()\r\n// This is the seedrandom function described above.\r\n//\r\nmodule.exports = function(seed, options) {\r\n  if (options && options.global === true) {\r\n    options.global = false;\r\n    Math.random = module.exports(seed, options);\r\n    options.global = true;\r\n    return Math.random;\r\n  }\r\n  var use_entropy = (options && options.entropy) || false;\r\n  var key = [];\r\n\r\n  // Flatten the seed string or build one from local entropy if needed.\r\n  var shortseed = mixkey(flatten(\r\n    use_entropy ? [seed, tostring(pool)] :\r\n    0 in arguments ? seed : autoseed(), 3), key);\r\n\r\n  // Use the seed to initialize an ARC4 generator.\r\n  var arc4 = new ARC4(key);\r\n\r\n  // Mix the randomness into accumulated entropy.\r\n  mixkey(tostring(arc4.S), pool);\r\n\r\n  // Override Math.random\r\n\r\n  // This function returns a random double in [0, 1) that contains\r\n  // randomness in every bit of the mantissa of the IEEE 754 value.\r\n\r\n  return function() {         // Closure to return a random double:\r\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\r\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\r\n        x = 0;                          //   and no 'extra last byte'.\r\n    while (n < significance) {          // Fill up all significant digits by\r\n      n = (n + x) * width;              //   shifting numerator and\r\n      d *= width;                       //   denominator and generating a\r\n      x = arc4.g(1);                    //   new least-significant-byte.\r\n    }\r\n    while (n >= overflow) {             // To avoid rounding up, before adding\r\n      n /= 2;                           //   last byte, shift everything\r\n      d /= 2;                           //   right using integer Math until\r\n      x >>>= 1;                         //   we have exactly the desired bits.\r\n    }\r\n    return (n + x) / d;                 // Form the number within [0, 1).\r\n  };\r\n};\r\n\r\nmodule.exports.resetGlobal = function () {\r\n  Math.random = oldRandom;\r\n};\r\n\r\n//\r\n// ARC4\r\n//\r\n// An ARC4 implementation.  The constructor takes a key in the form of\r\n// an array of at most (width) integers that should be 0 <= x < (width).\r\n//\r\n// The g(count) method returns a pseudorandom integer that concatenates\r\n// the next (count) outputs from ARC4.  Its return value is a number x\r\n// that is in the range 0 <= x < (width ^ count).\r\n//\r\n/** @constructor */\r\nfunction ARC4(key) {\r\n  var t, keylen = key.length,\r\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\r\n\r\n  // The empty key [] is treated as [0].\r\n  if (!keylen) { key = [keylen++]; }\r\n\r\n  // Set up S using the standard key scheduling algorithm.\r\n  while (i < width) {\r\n    s[i] = i++;\r\n  }\r\n  for (i = 0; i < width; i++) {\r\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\r\n    s[j] = t;\r\n  }\r\n\r\n  // The \"g\" method returns the next (count) outputs as one number.\r\n  (me.g = function(count) {\r\n    // Using instance members instead of closure state nearly doubles speed.\r\n    var t, r = 0,\r\n        i = me.i, j = me.j, s = me.S;\r\n    while (count--) {\r\n      t = s[i = mask & (i + 1)];\r\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\r\n    }\r\n    me.i = i; me.j = j;\r\n    return r;\r\n    // For robust unpredictability discard an initial batch of values.\r\n    // See http://www.rsa.com/rsalabs/node.asp?id=2009\r\n  })(width);\r\n}\r\n\r\n//\r\n// flatten()\r\n// Converts an object tree to nested arrays of strings.\r\n//\r\nfunction flatten(obj, depth) {\r\n  var result = [], typ = (typeof obj)[0], prop;\r\n  if (depth && typ == 'o') {\r\n    for (prop in obj) {\r\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\r\n    }\r\n  }\r\n  return (result.length ? result : typ == 's' ? obj : obj + '\\0');\r\n}\r\n\r\n//\r\n// mixkey()\r\n// Mixes a string seed into a key that is an array of integers, and\r\n// returns a shortened string seed that is equivalent to the result key.\r\n//\r\nfunction mixkey(seed, key) {\r\n  var stringseed = seed + '', smear, j = 0;\r\n  while (j < stringseed.length) {\r\n    key[mask & j] =\r\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\r\n  }\r\n  return tostring(key);\r\n}\r\n\r\n//\r\n// autoseed()\r\n// Returns an object for autoseeding, using window.crypto if available.\r\n//\r\n/** @param {Uint8Array=} seed */\r\nfunction autoseed(seed) {\r\n  try {\r\n    GLOBAL.crypto.getRandomValues(seed = new Uint8Array(width));\r\n    return tostring(seed);\r\n  } catch (e) {\r\n    return [+new Date, GLOBAL, GLOBAL.navigator && GLOBAL.navigator.plugins,\r\n            GLOBAL.screen, tostring(pool)];\r\n  }\r\n}\r\n\r\n//\r\n// tostring()\r\n// Converts an array of charcodes to a string\r\n//\r\nfunction tostring(a) {\r\n  return String.fromCharCode.apply(0, a);\r\n}\r\n\r\n//\r\n// When seedrandom.js is loaded, we immediately mix a few bits\r\n// from the built-in RNG into the entropy pool.  Because we do\r\n// not want to intefere with determinstic PRNG state later,\r\n// seedrandom will not call Math.random on its own again after\r\n// initialization.\r\n//\r\nmixkey(Math.random(), pool);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}