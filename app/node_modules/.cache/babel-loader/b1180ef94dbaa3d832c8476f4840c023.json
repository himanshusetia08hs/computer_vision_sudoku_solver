{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { isMatrix } from '../../utils/is';\nimport { createRng } from './util/seededRNG';\nimport { randomMatrix } from './util/randomMatrix';\nvar name = 'random';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createRandom = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    on = _ref.on;\n  // seeded pseudo random number generator\n  var rng = createRng(config.randomSeed);\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n  /**\n   * Return a random number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.random()                // generate a random number between 0 and 1\n   *     math.random(max)             // generate a random number between 0 and max\n   *     math.random(min, max)        // generate a random number between min and max\n   *     math.random(size)            // generate a matrix with random numbers between 0 and 1\n   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max\n   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max\n   *\n   * Examples:\n   *\n   *     math.random()       // returns a random number between 0 and 1\n   *     math.random(100)    // returns a random number between 0 and 100\n   *     math.random(30, 40) // returns a random number between 30 and 40\n   *     math.random([2, 3]) // returns a 2x3 matrix with random numbers between 0 and 1\n   *\n   * See also:\n   *\n   *     randomInt, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random number\n   */\n\n  return typed(name, {\n    '': function _() {\n      return _random(0, 1);\n    },\n    number: function number(max) {\n      return _random(0, max);\n    },\n    'number, number': function numberNumber(min, max) {\n      return _random(min, max);\n    },\n    'Array | Matrix': function ArrayMatrix(size) {\n      return _randomMatrix(size, 0, 1);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(size, max) {\n      return _randomMatrix(size, 0, max);\n    },\n    'Array | Matrix, number, number': function ArrayMatrixNumberNumber(size, min, max) {\n      return _randomMatrix(size, min, max);\n    }\n  });\n  function _randomMatrix(size, min, max) {\n    var res = randomMatrix(size.valueOf(), function () {\n      return _random(min, max);\n    });\n    return isMatrix(size) ? size.create(res) : res;\n  }\n  function _random(min, max) {\n    return min + rng() * (max - min);\n  }\n}); // number only implementation of random, no matrix support\n// TODO: there is quite some duplicate code in both createRandom and createRandomNumber, can we improve that?\n\nexport var createRandomNumber = /* #__PURE__ */factory(name, ['typed', 'config', '?on'], function (_ref2) {\n  var typed = _ref2.typed,\n    config = _ref2.config,\n    on = _ref2.on,\n    matrix = _ref2.matrix;\n  // seeded pseudo random number generator1\n  var rng = createRng(config.randomSeed);\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n  return typed(name, {\n    '': function _() {\n      return _random(0, 1);\n    },\n    number: function number(max) {\n      return _random(0, max);\n    },\n    'number, number': function numberNumber(min, max) {\n      return _random(min, max);\n    }\n  });\n  function _random(min, max) {\n    return min + rng() * (max - min);\n  }\n});","map":{"version":3,"names":["factory","isMatrix","createRng","randomMatrix","name","dependencies","createRandom","_ref","typed","config","on","rng","randomSeed","curr","prev","_","_random","number","max","numberNumber","min","ArrayMatrix","size","_randomMatrix","ArrayMatrixNumber","ArrayMatrixNumberNumber","res","valueOf","create","createRandomNumber","_ref2","matrix"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/P/temp/app/node_modules/mathjs/es/function/probability/random.js"],"sourcesContent":["import { factory } from '../../utils/factory';\nimport { isMatrix } from '../../utils/is';\nimport { createRng } from './util/seededRNG';\nimport { randomMatrix } from './util/randomMatrix';\nvar name = 'random';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createRandom = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      on = _ref.on;\n  // seeded pseudo random number generator\n  var rng = createRng(config.randomSeed);\n\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n  /**\n   * Return a random number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.random()                // generate a random number between 0 and 1\n   *     math.random(max)             // generate a random number between 0 and max\n   *     math.random(min, max)        // generate a random number between min and max\n   *     math.random(size)            // generate a matrix with random numbers between 0 and 1\n   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max\n   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max\n   *\n   * Examples:\n   *\n   *     math.random()       // returns a random number between 0 and 1\n   *     math.random(100)    // returns a random number between 0 and 100\n   *     math.random(30, 40) // returns a random number between 30 and 40\n   *     math.random([2, 3]) // returns a 2x3 matrix with random numbers between 0 and 1\n   *\n   * See also:\n   *\n   *     randomInt, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random number\n   */\n\n\n  return typed(name, {\n    '': function _() {\n      return _random(0, 1);\n    },\n    number: function number(max) {\n      return _random(0, max);\n    },\n    'number, number': function numberNumber(min, max) {\n      return _random(min, max);\n    },\n    'Array | Matrix': function ArrayMatrix(size) {\n      return _randomMatrix(size, 0, 1);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(size, max) {\n      return _randomMatrix(size, 0, max);\n    },\n    'Array | Matrix, number, number': function ArrayMatrixNumberNumber(size, min, max) {\n      return _randomMatrix(size, min, max);\n    }\n  });\n\n  function _randomMatrix(size, min, max) {\n    var res = randomMatrix(size.valueOf(), function () {\n      return _random(min, max);\n    });\n    return isMatrix(size) ? size.create(res) : res;\n  }\n\n  function _random(min, max) {\n    return min + rng() * (max - min);\n  }\n}); // number only implementation of random, no matrix support\n// TODO: there is quite some duplicate code in both createRandom and createRandomNumber, can we improve that?\n\nexport var createRandomNumber = /* #__PURE__ */factory(name, ['typed', 'config', '?on'], function (_ref2) {\n  var typed = _ref2.typed,\n      config = _ref2.config,\n      on = _ref2.on,\n      matrix = _ref2.matrix;\n  // seeded pseudo random number generator1\n  var rng = createRng(config.randomSeed);\n\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n\n  return typed(name, {\n    '': function _() {\n      return _random(0, 1);\n    },\n    number: function number(max) {\n      return _random(0, max);\n    },\n    'number, number': function numberNumber(min, max) {\n      return _random(min, max);\n    }\n  });\n\n  function _random(min, max) {\n    return min + rng() * (max - min);\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}