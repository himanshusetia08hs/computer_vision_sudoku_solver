{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: keras/contraints.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { epsilon } from './backend/common';\nimport { deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\n/**\n * Helper function used by many of the Constraints to find the L2Norms.\n */\nfunction calcL2Norms(w, axis) {\n  return tidy(() => tfc.sqrt(tfc.sum(tfc.mul(w, w), axis, true)));\n}\n/**\n * Base class for functions that impose constraints on weight values\n *\n * @doc {\n *   heading: 'Constraints',\n *   subheading: 'Classes',\n *   namespace: 'constraints'\n * }\n */\nexport class Constraint extends serialization.Serializable {\n  getConfig() {\n    return {};\n  }\n}\nexport class MaxNorm extends Constraint {\n  constructor(args) {\n    super();\n    this.defaultMaxValue = 2;\n    this.defaultAxis = 0;\n    this.maxValue = args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n  apply(w) {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = tfc.clipByValue(norms, 0, this.maxValue);\n      return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n    });\n  }\n  getConfig() {\n    return {\n      maxValue: this.maxValue,\n      axis: this.axis\n    };\n  }\n}\n/** @nocollapse */\nMaxNorm.className = 'MaxNorm';\nserialization.registerClass(MaxNorm);\nexport class UnitNorm extends Constraint {\n  constructor(args) {\n    super();\n    this.defaultAxis = 0;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n  apply(w) {\n    return tidy(() => tfc.div(w, tfc.add(epsilon(), calcL2Norms(w, this.axis))));\n  }\n  getConfig() {\n    return {\n      axis: this.axis\n    };\n  }\n}\n/** @nocollapse */\nUnitNorm.className = 'UnitNorm';\nserialization.registerClass(UnitNorm);\nexport class NonNeg extends Constraint {\n  apply(w) {\n    return tfc.relu(w);\n  }\n}\n/** @nocollapse */\nNonNeg.className = 'NonNeg';\nserialization.registerClass(NonNeg);\nexport class MinMaxNorm extends Constraint {\n  constructor(args) {\n    super();\n    this.defaultMinValue = 0.0;\n    this.defaultMaxValue = 1.0;\n    this.defaultRate = 1.0;\n    this.defaultAxis = 0;\n    this.minValue = args.minValue != null ? args.minValue : this.defaultMinValue;\n    this.maxValue = args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.rate = args.rate != null ? args.rate : this.defaultRate;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n  apply(w) {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = tfc.add(tfc.mul(this.rate, tfc.clipByValue(norms, this.minValue, this.maxValue)), tfc.mul(1.0 - this.rate, norms));\n      return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n    });\n  }\n  getConfig() {\n    return {\n      minValue: this.minValue,\n      maxValue: this.maxValue,\n      rate: this.rate,\n      axis: this.axis\n    };\n  }\n}\n/** @nocollapse */\nMinMaxNorm.className = 'MinMaxNorm';\nserialization.registerClass(MinMaxNorm);\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n  'maxNorm': 'MaxNorm',\n  'minMaxNorm': 'MinMaxNorm',\n  'nonNeg': 'NonNeg',\n  'unitNorm': 'UnitNorm'\n};\nexport function serializeConstraint(constraint) {\n  return serializeKerasObject(constraint);\n}\nexport function deserializeConstraint(config) {\n  let customObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'constraint');\n}\nexport function getConstraint(identifier) {\n  if (identifier == null) {\n    return null;\n  }\n  if (typeof identifier === 'string') {\n    const className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ? CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n    const config = {\n      className,\n      config: {}\n    };\n    return deserializeConstraint(config);\n  } else if (identifier instanceof Constraint) {\n    return identifier;\n  } else {\n    return deserializeConstraint(identifier);\n  }\n}","map":{"version":3,"sources":["../../../../../tfjs-layers/src/constraints.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/contraints.py */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\nimport {epsilon} from './backend/common';\nimport {deserializeKerasObject, serializeKerasObject} from './utils/generic_utils';\n\n/**\n * Helper function used by many of the Constraints to find the L2Norms.\n */\nfunction calcL2Norms(w: Tensor, axis: number): Tensor {\n  return tidy(() => tfc.sqrt(tfc.sum(tfc.mul(w, w), axis, true)));\n}\n\n/**\n * Base class for functions that impose constraints on weight values\n *\n * @doc {\n *   heading: 'Constraints',\n *   subheading: 'Classes',\n *   namespace: 'constraints'\n * }\n */\nexport abstract class Constraint extends serialization.Serializable {\n  /* Porting note: was __call__, apply chosen to match other similar choices */\n  abstract apply(w: Tensor): Tensor;\n  getConfig(): serialization.ConfigDict {\n    return {};\n  }\n}\n\nexport interface MaxNormArgs {\n  /**\n   * Maximum norm for incoming weights\n   */\n  maxValue?: number;\n  /**\n   * Axis along which to calculate norms.\n   *\n   *  For instance, in a `Dense` layer the weight matrix\n   *  has shape `[inputDim, outputDim]`,\n   *  set `axis` to `0` to constrain each weight vector\n   *  of length `[inputDim,]`.\n   *  In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   *  the weight tensor has shape\n   *  `[rows, cols, inputDepth, outputDepth]`,\n   *  set `axis` to `[0, 1, 2]`\n   *  to constrain the weights of each filter tensor of size\n   *  `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n}\n\nexport class MaxNorm extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'MaxNorm';\n  private maxValue: number;\n  private axis: number;\n  private readonly defaultMaxValue = 2;\n  private readonly defaultAxis = 0;\n\n  constructor(args: MaxNormArgs) {\n    super();\n    this.maxValue =\n        args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = tfc.clipByValue(norms, 0, this.maxValue);\n      return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {maxValue: this.maxValue, axis: this.axis};\n  }\n}\nserialization.registerClass(MaxNorm);\n\nexport interface UnitNormArgs {\n  /**\n   * Axis along which to calculate norms.\n   *\n   * For instance, in a `Dense` layer the weight matrix\n   * has shape `[inputDim, outputDim]`,\n   * set `axis` to `0` to constrain each weight vector\n   * of length `[inputDim,]`.\n   * In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   * the weight tensor has shape\n   * `[rows, cols, inputDepth, outputDepth]`,\n   * set `axis` to `[0, 1, 2]`\n   * to constrain the weights of each filter tensor of size\n   * `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n}\n\nexport class UnitNorm extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'UnitNorm';\n  private axis: number;\n  private readonly defaultAxis = 0;\n  constructor(args: UnitNormArgs) {\n    super();\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(\n        () => tfc.div(w, tfc.add(epsilon(), calcL2Norms(w, this.axis))));\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {axis: this.axis};\n  }\n}\nserialization.registerClass(UnitNorm);\n\nexport class NonNeg extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'NonNeg';\n\n  apply(w: Tensor): Tensor {\n    return tfc.relu(w);\n  }\n}\nserialization.registerClass(NonNeg);\n\nexport interface MinMaxNormArgs {\n  /**\n   * Minimum norm for incoming weights\n   */\n  minValue?: number;\n  /**\n   * Maximum norm for incoming weights\n   */\n  maxValue?: number;\n  /**\n   * Axis along which to calculate norms.\n   * For instance, in a `Dense` layer the weight matrix\n   * has shape `[inputDim, outputDim]`,\n   * set `axis` to `0` to constrain each weight vector\n   * of length `[inputDim,]`.\n   * In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   * the weight tensor has shape\n   * `[rows, cols, inputDepth, outputDepth]`,\n   * set `axis` to `[0, 1, 2]`\n   * to constrain the weights of each filter tensor of size\n   * `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n  /**\n   * Rate for enforcing the constraint: weights will be rescaled to yield:\n   * `(1 - rate) * norm + rate * norm.clip(minValue, maxValue)`.\n   * Effectively, this means that rate=1.0 stands for strict\n   * enforcement of the constraint, while rate<1.0 means that\n   * weights will be rescaled at each step to slowly move\n   * towards a value inside the desired interval.\n   */\n  rate?: number;\n}\n\nexport class MinMaxNorm extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'MinMaxNorm';\n  private minValue: number;\n  private maxValue: number;\n  private rate: number;\n  private axis: number;\n  private readonly defaultMinValue = 0.0;\n  private readonly defaultMaxValue = 1.0;\n  private readonly defaultRate = 1.0;\n  private readonly defaultAxis = 0;\n\n  constructor(args: MinMaxNormArgs) {\n    super();\n    this.minValue =\n        args.minValue != null ? args.minValue : this.defaultMinValue;\n    this.maxValue =\n        args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.rate = args.rate != null ? args.rate : this.defaultRate;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = tfc.add(\n          tfc.mul(\n              this.rate, tfc.clipByValue(norms, this.minValue, this.maxValue)),\n          tfc.mul(1.0 - this.rate, norms));\n      return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n    });\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    return {\n      minValue: this.minValue,\n      maxValue: this.maxValue,\n      rate: this.rate,\n      axis: this.axis\n    };\n  }\n}\nserialization.registerClass(MinMaxNorm);\n\n/** @docinline */\nexport type ConstraintIdentifier =\n    'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string;\n\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP:\n    {[identifier in ConstraintIdentifier]: string} = {\n      'maxNorm': 'MaxNorm',\n      'minMaxNorm': 'MinMaxNorm',\n      'nonNeg': 'NonNeg',\n      'unitNorm': 'UnitNorm'\n    };\n\nexport function serializeConstraint(constraint: Constraint):\n    serialization.ConfigDictValue {\n  return serializeKerasObject(constraint);\n}\n\nexport function deserializeConstraint(\n    config: serialization.ConfigDict,\n    customObjects: serialization.ConfigDict = {}): Constraint {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'constraint');\n}\n\nexport function getConstraint(identifier: ConstraintIdentifier|\n                              serialization.ConfigDict|Constraint): Constraint {\n  if (identifier == null) {\n    return null;\n  }\n  if (typeof identifier === 'string') {\n    const className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n        CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n        identifier;\n    const config = {className, config: {}};\n    return deserializeConstraint(config);\n  } else if (identifier instanceof Constraint) {\n    return identifier;\n  } else {\n    return deserializeConstraint(identifier);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}