{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { UnsortedSegmentSum } from '../kernel_names';\nimport { expandDims } from '../ops/expand_dims';\nimport { gather } from '../ops/gather';\nimport { greaterEqual } from '../ops/greater_equal';\nimport { logicalAnd } from '../ops/logical_and';\nimport { maximum } from '../ops/maximum';\nimport { ones } from '../ops/ones';\nimport { scalar } from '../ops/scalar';\nimport { where } from '../ops/where';\nimport { zerosLike } from '../ops/zeros_like';\nexport const unsortedSegmentSumGradConfig = {\n  kernelName: UnsortedSegmentSum,\n  inputsToSave: ['segmentIds'],\n  gradFunc: (dy, saved) => {\n    const [segmentIds] = saved;\n    const derX = () => {\n      return gatherDropNegatives(dy, segmentIds);\n    };\n    return {\n      x: derX\n    };\n  }\n};\nfunction gatherDropNegatives(x, indices) {\n  // Helper function for unsorted segment ops. Gathers params for\n  // positive segment ids and gathers 0 for inputs with negative segment id.\n  // Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py\n  const zeroClippedIndices = maximum(indices, zerosLike(indices));\n  const gathered = gather(x, zeroClippedIndices);\n  let isPositive = greaterEqual(indices, scalar(0, 'int32'));\n  const numIters = gathered.rank - isPositive.rank;\n  for (let i = 0; i < numIters; ++i) {\n    isPositive = expandDims(isPositive, i + 1);\n  }\n  isPositive = logicalAnd(isPositive, ones(gathered.shape, 'bool'));\n  const zeroSlice = zerosLike(gathered);\n  return where(isPositive, gathered, zeroSlice);\n}","map":{"version":3,"sources":["../../src/gradients/UnsortedSegmentSum_grad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,kBAAkB,QAAO,iBAAiB;AAElD,SAAQ,UAAU,QAAO,oBAAoB;AAC7C,SAAQ,MAAM,QAAO,eAAe;AACpC,SAAQ,YAAY,QAAO,sBAAsB;AACjD,SAAQ,UAAU,QAAO,oBAAoB;AAC7C,SAAQ,OAAO,QAAO,gBAAgB;AACtC,SAAQ,IAAI,QAAO,aAAa;AAChC,SAAQ,MAAM,QAAO,eAAe;AACpC,SAAQ,KAAK,QAAO,cAAc;AAClC,SAAQ,SAAS,QAAO,mBAAmB;AAG3C,OAAO,MAAM,4BAA4B,GAAe;EACtD,UAAU,EAAE,kBAAkB;EAC9B,YAAY,EAAE,CAAC,YAAY,CAAC;EAC5B,QAAQ,EAAE,CAAC,EAAU,EAAE,KAAe,KAAI;IACxC,MAAM,CAAC,UAAU,CAAC,GAAG,KAAK;IAE1B,MAAM,IAAI,GAAG,MAAK;MAChB,OAAO,mBAAmB,CAAC,EAAE,EAAE,UAAsB,CAAC;IACxD,CAAC;IACD,OAAO;MAAC,CAAC,EAAE;IAAI,CAAC;EAClB;CACD;AAED,SAAS,mBAAmB,CAAmB,CAAI,EAAE,OAAiB,EAAA;EACpE;EACA;EACA;EACA,MAAM,kBAAkB,GAAG,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC;EAC/D,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,EAAE,kBAA8B,CAAC;EAC1D,IAAI,UAAU,GAAG,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;EAC1D,MAAM,QAAQ,GAAG,QAAQ,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI;EAChD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,EAAE,CAAC,EAAE;IACjC,UAAU,GAAG,UAAU,CAAC,UAAU,EAAE,CAAC,GAAG,CAAC,CAAC;EAC3C;EACD,UAAU,GAAG,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;EACjE,MAAM,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAC;EACrC,OAAO,KAAK,CAAC,UAAU,EAAE,QAAQ,EAAE,SAAS,CAAC;AAC/C","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { UnsortedSegmentSum } from '../kernel_names';\nimport { expandDims } from '../ops/expand_dims';\nimport { gather } from '../ops/gather';\nimport { greaterEqual } from '../ops/greater_equal';\nimport { logicalAnd } from '../ops/logical_and';\nimport { maximum } from '../ops/maximum';\nimport { ones } from '../ops/ones';\nimport { scalar } from '../ops/scalar';\nimport { where } from '../ops/where';\nimport { zerosLike } from '../ops/zeros_like';\nexport const unsortedSegmentSumGradConfig = {\n    kernelName: UnsortedSegmentSum,\n    inputsToSave: ['segmentIds'],\n    gradFunc: (dy, saved) => {\n        const [segmentIds] = saved;\n        const derX = () => {\n            return gatherDropNegatives(dy, segmentIds);\n        };\n        return { x: derX };\n    }\n};\nfunction gatherDropNegatives(x, indices) {\n    // Helper function for unsorted segment ops. Gathers params for\n    // positive segment ids and gathers 0 for inputs with negative segment id.\n    // Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py\n    const zeroClippedIndices = maximum(indices, zerosLike(indices));\n    const gathered = gather(x, zeroClippedIndices);\n    let isPositive = greaterEqual(indices, scalar(0, 'int32'));\n    const numIters = gathered.rank - isPositive.rank;\n    for (let i = 0; i < numIters; ++i) {\n        isPositive = expandDims(isPositive, i + 1);\n    }\n    isPositive = logicalAnd(isPositive, ones(gathered.shape, 'bool'));\n    const zeroSlice = zerosLike(gathered);\n    return where(isPositive, gathered, zeroSlice);\n}\n//# sourceMappingURL=UnsortedSegmentSum_grad.js.map"]},"metadata":{},"sourceType":"module"}