{"ast":null,"code":"import { maxArgumentCount } from '../../utils/function';\nimport { factory } from '../../utils/factory';\nvar name = 'map';\nvar dependencies = ['typed'];\nexport var createMap = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Create a new matrix or array with the results of the callback function executed on\n   * each entry of the matrix/array.\n   *\n   * Syntax:\n   *\n   *    math.map(x, callback)\n   *\n   * Examples:\n   *\n   *    math.map([1, 2, 3], function(value) {\n   *      return value * value\n   *    })  // returns [1, 4, 9]\n   *\n   * See also:\n   *\n   *    filter, forEach, sort\n   *\n   * @param {Matrix | Array} x    The matrix to iterate on.\n   * @param {Function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the matrix being traversed.\n   * @return {Matrix | array}     Transformed map of x\n   */\n  return typed(name, {\n    'Array, function': _map,\n    'Matrix, function': function MatrixFunction(x, callback) {\n      return x.map(callback);\n    }\n  });\n});\n/**\n * Map for a multi dimensional array\n * @param {Array} array\n * @param {Function} callback\n * @return {Array}\n * @private\n */\n\nfunction _map(array, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n  var recurse = function recurse(value, index) {\n    if (Array.isArray(value)) {\n      return value.map(function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i));\n      });\n    } else {\n      // invoke the callback function with the right number of arguments\n      if (args === 1) {\n        return callback(value);\n      } else if (args === 2) {\n        return callback(value, index);\n      } else {\n        // 3 or -1\n        return callback(value, index, array);\n      }\n    }\n  };\n  return recurse(array, []);\n}","map":{"version":3,"names":["maxArgumentCount","factory","name","dependencies","createMap","_ref","typed","_map","MatrixFunction","x","callback","map","array","args","recurse","value","index","Array","isArray","child","i","concat"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/Project/temp/app/node_modules/mathjs/es/function/matrix/map.js"],"sourcesContent":["import { maxArgumentCount } from '../../utils/function';\nimport { factory } from '../../utils/factory';\nvar name = 'map';\nvar dependencies = ['typed'];\nexport var createMap = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Create a new matrix or array with the results of the callback function executed on\n   * each entry of the matrix/array.\n   *\n   * Syntax:\n   *\n   *    math.map(x, callback)\n   *\n   * Examples:\n   *\n   *    math.map([1, 2, 3], function(value) {\n   *      return value * value\n   *    })  // returns [1, 4, 9]\n   *\n   * See also:\n   *\n   *    filter, forEach, sort\n   *\n   * @param {Matrix | Array} x    The matrix to iterate on.\n   * @param {Function} callback   The callback method is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the matrix being traversed.\n   * @return {Matrix | array}     Transformed map of x\n   */\n  return typed(name, {\n    'Array, function': _map,\n    'Matrix, function': function MatrixFunction(x, callback) {\n      return x.map(callback);\n    }\n  });\n});\n/**\n * Map for a multi dimensional array\n * @param {Array} array\n * @param {Function} callback\n * @return {Array}\n * @private\n */\n\nfunction _map(array, callback) {\n  // figure out what number of arguments the callback function expects\n  var args = maxArgumentCount(callback);\n\n  var recurse = function recurse(value, index) {\n    if (Array.isArray(value)) {\n      return value.map(function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i));\n      });\n    } else {\n      // invoke the callback function with the right number of arguments\n      if (args === 1) {\n        return callback(value);\n      } else if (args === 2) {\n        return callback(value, index);\n      } else {\n        // 3 or -1\n        return callback(value, index, array);\n      }\n    }\n  };\n\n  return recurse(array, []);\n}"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,sBAAsB;AACvD,SAASC,OAAO,QAAQ,qBAAqB;AAC7C,IAAIC,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,SAAS,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAChF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOA,KAAK,CAACJ,IAAI,EAAE;IACjB,iBAAiB,EAAEK,IAAI;IACvB,kBAAkB,EAAE,SAASC,cAAc,CAACC,CAAC,EAAEC,QAAQ,EAAE;MACvD,OAAOD,CAAC,CAACE,GAAG,CAACD,QAAQ,CAAC;IACxB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASH,IAAI,CAACK,KAAK,EAAEF,QAAQ,EAAE;EAC7B;EACA,IAAIG,IAAI,GAAGb,gBAAgB,CAACU,QAAQ,CAAC;EAErC,IAAII,OAAO,GAAG,SAASA,OAAO,CAACC,KAAK,EAAEC,KAAK,EAAE;IAC3C,IAAIC,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,EAAE;MACxB,OAAOA,KAAK,CAACJ,GAAG,CAAC,UAAUQ,KAAK,EAAEC,CAAC,EAAE;QACnC;QACA,OAAON,OAAO,CAACK,KAAK,EAAEH,KAAK,CAACK,MAAM,CAACD,CAAC,CAAC,CAAC;MACxC,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACA,IAAIP,IAAI,KAAK,CAAC,EAAE;QACd,OAAOH,QAAQ,CAACK,KAAK,CAAC;MACxB,CAAC,MAAM,IAAIF,IAAI,KAAK,CAAC,EAAE;QACrB,OAAOH,QAAQ,CAACK,KAAK,EAAEC,KAAK,CAAC;MAC/B,CAAC,MAAM;QACL;QACA,OAAON,QAAQ,CAACK,KAAK,EAAEC,KAAK,EAAEJ,KAAK,CAAC;MACtC;IACF;EACF,CAAC;EAED,OAAOE,OAAO,CAACF,KAAK,EAAE,EAAE,CAAC;AAC3B"},"metadata":{},"sourceType":"module"}