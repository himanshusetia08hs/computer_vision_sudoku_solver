{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nfunction lowerBound(array, value) {\n  let left = 0;\n  let right = array.length;\n  let mid = 0;\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n    if (array[mid] < value) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n  return right;\n}\nfunction upperBound(array, value) {\n  let left = 0;\n  let right = array.length;\n  let mid = 0;\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n    if (array[mid] <= value) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n  return right;\n}\nexport function searchSortedImpl(sortedInputs, values, batchSize, numInputs, numValues, side) {\n  const output = util.getArrayFromDType('int32', batchSize * numValues);\n  for (let b = 0; b < batchSize; ++b) {\n    const sortedInputsSlice = sortedInputs.slice(b * numInputs, (b + 1) * numInputs);\n    const outputOffset = b * numValues;\n    for (let i = 0; i < numValues; ++i) {\n      output[outputOffset + i] = side === 'left' ? lowerBound(sortedInputsSlice, values[i + outputOffset]) : upperBound(sortedInputsSlice, values[i + outputOffset]);\n    }\n  }\n  return output;\n}","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/SearchSorted_impl.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAoB,IAAI,QAAO,uBAAuB;AAEtD,SAAS,UAAU,CAAC,KAAiB,EAAE,KAAa,EAAA;EAClD,IAAI,IAAI,GAAG,CAAC;EACZ,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM;EACxB,IAAI,GAAG,GAAG,CAAC;EACX,OAAO,IAAI,GAAG,KAAK,EAAE;IACnB,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,GAAG,KAAK,IAAI,CAAC,CAAC;IACpC,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,EAAE;MACtB,IAAI,GAAG,GAAG,GAAG,CAAC;KACf,MAAM;MACL,KAAK,GAAG,GAAG;IACZ;EACF;EACD,OAAO,KAAK;AACd;AAEA,SAAS,UAAU,CAAC,KAAiB,EAAE,KAAa,EAAA;EAClD,IAAI,IAAI,GAAG,CAAC;EACZ,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM;EACxB,IAAI,GAAG,GAAG,CAAC;EACX,OAAO,IAAI,GAAG,KAAK,EAAE;IACnB,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,GAAG,KAAK,IAAI,CAAC,CAAC;IACpC,IAAI,KAAK,CAAC,GAAG,CAAC,IAAI,KAAK,EAAE;MACvB,IAAI,GAAG,GAAG,GAAG,CAAC;KACf,MAAM;MACL,KAAK,GAAG,GAAG;IACZ;EACF;EACD,OAAO,KAAK;AACd;AAEA,OAAM,SAAU,gBAAgB,CAC5B,YAAwB,EAAE,MAAkB,EAAE,SAAiB,EAC/D,SAAiB,EAAE,SAAiB,EAAE,IAAoB,EAAA;EAC5D,MAAM,MAAM,GACR,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,SAAS,GAAG,SAAS,CAAe;EACxE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,EAAE,CAAC,EAAE;IAClC,MAAM,iBAAiB,GACnB,YAAY,CAAC,KAAK,CAAC,CAAC,GAAG,SAAS,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,SAAS,CAAC;IAC1D,MAAM,YAAY,GAAG,CAAC,GAAG,SAAS;IAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,EAAE,CAAC,EAAE;MAClC,MAAM,CAAC,YAAY,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,MAAM,GACtC,UAAU,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,GACvD,UAAU,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC;IAC5D;EACF;EACD,OAAO,MAAM;AACf","sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction lowerBound(array: TypedArray, value: number) {\n  let left = 0;\n  let right = array.length;\n  let mid = 0;\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n    if (array[mid] < value) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n  return right;\n}\n\nfunction upperBound(array: TypedArray, value: number) {\n  let left = 0;\n  let right = array.length;\n  let mid = 0;\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n    if (array[mid] <= value) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n  return right;\n}\n\nexport function searchSortedImpl(\n    sortedInputs: TypedArray, values: TypedArray, batchSize: number,\n    numInputs: number, numValues: number, side: 'left'|'right'): TypedArray {\n  const output =\n      util.getArrayFromDType('int32', batchSize * numValues) as TypedArray;\n  for (let b = 0; b < batchSize; ++b) {\n    const sortedInputsSlice =\n        sortedInputs.slice(b * numInputs, (b + 1) * numInputs);\n    const outputOffset = b * numValues;\n    for (let i = 0; i < numValues; ++i) {\n      output[outputOffset + i] = side === 'left' ?\n          lowerBound(sortedInputsSlice, values[i + outputOffset]) :\n          upperBound(sortedInputsSlice, values[i + outputOffset]);\n    }\n  }\n  return output;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}