{"ast":null,"code":"import { factory } from '../utils/factory';\nimport { extend, hasOwnProperty } from '../utils/object';\nimport { getSafeProperty, setSafeProperty } from '../utils/customs';\nvar name = 'Parser';\nvar dependencies = ['parse'];\nexport var createParserClass = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var parse = _ref.parse;\n\n  /**\n   * @constructor Parser\n   * Parser contains methods to evaluate or parse expressions, and has a number\n   * of convenience methods to get, set, and remove variables from memory. Parser\n   * keeps a scope containing variables in memory, which is used for all\n   * evaluations.\n   *\n   * Methods:\n   *    const result = parser.evaluate(expr)  // evaluate an expression\n   *    const value = parser.get(name)        // retrieve a variable from the parser\n   *    const values = parser.getAll()        // retrieve all defined variables\n   *    parser.set(name, value)               // set a variable in the parser\n   *    parser.remove(name)                   // clear a variable from the\n   *                                          // parsers scope\n   *    parser.clear()                        // clear the parsers scope\n   *\n   * Example usage:\n   *    const parser = new Parser()\n   *    // Note: there is a convenience method which can be used instead:\n   *    // const parser = new math.parser()\n   *\n   *    // evaluate expressions\n   *    parser.evaluate('sqrt(3^2 + 4^2)')        // 5\n   *    parser.evaluate('sqrt(-4)')               // 2i\n   *    parser.evaluate('2 inch in cm')           // 5.08 cm\n   *    parser.evaluate('cos(45 deg)')            // 0.7071067811865476\n   *\n   *    // define variables and functions\n   *    parser.evaluate('x = 7 / 2')              // 3.5\n   *    parser.evaluate('x + 3')                  // 6.5\n   *    parser.evaluate('function f(x, y) = x^y') // f(x, y)\n   *    parser.evaluate('f(2, 3)')                // 8\n   *\n   *    // get and set variables and functions\n   *    const x = parser.get('x')                 // 7\n   *    const f = parser.get('f')                 // function\n   *    const g = f(3, 2)                         // 9\n   *    parser.set('h', 500)\n   *    const i = parser.evaluate('h / 2')        // 250\n   *    parser.set('hello', function (name) {\n   *        return 'hello, ' + name + '!'\n   *    })\n   *    parser.evaluate('hello(\"user\")')          // \"hello, user!\"\n   *\n   *    // clear defined functions and variables\n   *    parser.clear()\n   *\n   */\n  function Parser() {\n    if (!(this instanceof Parser)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    this.scope = {};\n  }\n  /**\n   * Attach type information\n   */\n\n  Parser.prototype.type = 'Parser';\n  Parser.prototype.isParser = true;\n  /**\n   * Parse and evaluate the given expression\n   * @param {string} expr   A string containing an expression, for example \"2+3\"\n   * @return {*} result     The result, or undefined when the expression was empty\n   * @throws {Error}\n   */\n\n  Parser.prototype.evaluate = function (expr) {\n    // TODO: validate arguments\n    return parse(expr).compile().evaluate(this.scope);\n  };\n  /**\n   * Get a variable (a function or variable) by name from the parsers scope.\n   * Returns undefined when not found\n   * @param {string} name\n   * @return {* | undefined} value\n   */\n\n  Parser.prototype.get = function (name) {\n    // TODO: validate arguments\n    return name in this.scope ? getSafeProperty(this.scope, name) : undefined;\n  };\n  /**\n   * Get a map with all defined variables\n   * @return {Object} values\n   */\n\n  Parser.prototype.getAll = function () {\n    return extend({}, this.scope);\n  };\n  /**\n   * Set a symbol (a function or variable) by name from the parsers scope.\n   * @param {string} name\n   * @param {* | undefined} value\n   */\n\n  Parser.prototype.set = function (name, value) {\n    // TODO: validate arguments\n    return setSafeProperty(this.scope, name, value);\n  };\n  /**\n   * Remove a variable from the parsers scope\n   * @param {string} name\n   */\n\n  Parser.prototype.remove = function (name) {\n    // TODO: validate arguments\n    delete this.scope[name];\n  };\n  /**\n   * Clear the scope with variables and functions\n   */\n\n  Parser.prototype.clear = function () {\n    for (var _name in this.scope) {\n      if (hasOwnProperty(this.scope, _name)) {\n        delete this.scope[_name];\n      }\n    }\n  };\n  return Parser;\n}, {\n  isClass: true\n});","map":{"version":3,"names":["factory","extend","hasOwnProperty","getSafeProperty","setSafeProperty","name","dependencies","createParserClass","_ref","parse","Parser","SyntaxError","scope","prototype","type","isParser","evaluate","expr","compile","get","undefined","getAll","set","value","remove","clear","_name","isClass"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/P/temp/app/node_modules/mathjs/es/expression/Parser.js"],"sourcesContent":["import { factory } from '../utils/factory';\nimport { extend, hasOwnProperty } from '../utils/object';\nimport { getSafeProperty, setSafeProperty } from '../utils/customs';\nvar name = 'Parser';\nvar dependencies = ['parse'];\nexport var createParserClass = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var parse = _ref.parse;\n\n  /**\n   * @constructor Parser\n   * Parser contains methods to evaluate or parse expressions, and has a number\n   * of convenience methods to get, set, and remove variables from memory. Parser\n   * keeps a scope containing variables in memory, which is used for all\n   * evaluations.\n   *\n   * Methods:\n   *    const result = parser.evaluate(expr)  // evaluate an expression\n   *    const value = parser.get(name)        // retrieve a variable from the parser\n   *    const values = parser.getAll()        // retrieve all defined variables\n   *    parser.set(name, value)               // set a variable in the parser\n   *    parser.remove(name)                   // clear a variable from the\n   *                                          // parsers scope\n   *    parser.clear()                        // clear the parsers scope\n   *\n   * Example usage:\n   *    const parser = new Parser()\n   *    // Note: there is a convenience method which can be used instead:\n   *    // const parser = new math.parser()\n   *\n   *    // evaluate expressions\n   *    parser.evaluate('sqrt(3^2 + 4^2)')        // 5\n   *    parser.evaluate('sqrt(-4)')               // 2i\n   *    parser.evaluate('2 inch in cm')           // 5.08 cm\n   *    parser.evaluate('cos(45 deg)')            // 0.7071067811865476\n   *\n   *    // define variables and functions\n   *    parser.evaluate('x = 7 / 2')              // 3.5\n   *    parser.evaluate('x + 3')                  // 6.5\n   *    parser.evaluate('function f(x, y) = x^y') // f(x, y)\n   *    parser.evaluate('f(2, 3)')                // 8\n   *\n   *    // get and set variables and functions\n   *    const x = parser.get('x')                 // 7\n   *    const f = parser.get('f')                 // function\n   *    const g = f(3, 2)                         // 9\n   *    parser.set('h', 500)\n   *    const i = parser.evaluate('h / 2')        // 250\n   *    parser.set('hello', function (name) {\n   *        return 'hello, ' + name + '!'\n   *    })\n   *    parser.evaluate('hello(\"user\")')          // \"hello, user!\"\n   *\n   *    // clear defined functions and variables\n   *    parser.clear()\n   *\n   */\n  function Parser() {\n    if (!(this instanceof Parser)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.scope = {};\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Parser.prototype.type = 'Parser';\n  Parser.prototype.isParser = true;\n  /**\n   * Parse and evaluate the given expression\n   * @param {string} expr   A string containing an expression, for example \"2+3\"\n   * @return {*} result     The result, or undefined when the expression was empty\n   * @throws {Error}\n   */\n\n  Parser.prototype.evaluate = function (expr) {\n    // TODO: validate arguments\n    return parse(expr).compile().evaluate(this.scope);\n  };\n  /**\n   * Get a variable (a function or variable) by name from the parsers scope.\n   * Returns undefined when not found\n   * @param {string} name\n   * @return {* | undefined} value\n   */\n\n\n  Parser.prototype.get = function (name) {\n    // TODO: validate arguments\n    return name in this.scope ? getSafeProperty(this.scope, name) : undefined;\n  };\n  /**\n   * Get a map with all defined variables\n   * @return {Object} values\n   */\n\n\n  Parser.prototype.getAll = function () {\n    return extend({}, this.scope);\n  };\n  /**\n   * Set a symbol (a function or variable) by name from the parsers scope.\n   * @param {string} name\n   * @param {* | undefined} value\n   */\n\n\n  Parser.prototype.set = function (name, value) {\n    // TODO: validate arguments\n    return setSafeProperty(this.scope, name, value);\n  };\n  /**\n   * Remove a variable from the parsers scope\n   * @param {string} name\n   */\n\n\n  Parser.prototype.remove = function (name) {\n    // TODO: validate arguments\n    delete this.scope[name];\n  };\n  /**\n   * Clear the scope with variables and functions\n   */\n\n\n  Parser.prototype.clear = function () {\n    for (var _name in this.scope) {\n      if (hasOwnProperty(this.scope, _name)) {\n        delete this.scope[_name];\n      }\n    }\n  };\n\n  return Parser;\n}, {\n  isClass: true\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,MAAM,EAAEC,cAAc,QAAQ,iBAAiB;AACxD,SAASC,eAAe,EAAEC,eAAe,QAAQ,kBAAkB;AACnE,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,iBAAiB,GAAG,eAAeP,OAAO,CAACK,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACxF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASC,MAAM,GAAG;IAChB,IAAI,EAAE,IAAI,YAAYA,MAAM,CAAC,EAAE;MAC7B,MAAM,IAAIC,WAAW,CAAC,kDAAkD,CAAC;IAC3E;IAEA,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;EACjB;EACA;AACF;AACA;;EAGEF,MAAM,CAACG,SAAS,CAACC,IAAI,GAAG,QAAQ;EAChCJ,MAAM,CAACG,SAAS,CAACE,QAAQ,GAAG,IAAI;EAChC;AACF;AACA;AACA;AACA;AACA;;EAEEL,MAAM,CAACG,SAAS,CAACG,QAAQ,GAAG,UAAUC,IAAI,EAAE;IAC1C;IACA,OAAOR,KAAK,CAACQ,IAAI,CAAC,CAACC,OAAO,EAAE,CAACF,QAAQ,CAAC,IAAI,CAACJ,KAAK,CAAC;EACnD,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;;EAGEF,MAAM,CAACG,SAAS,CAACM,GAAG,GAAG,UAAUd,IAAI,EAAE;IACrC;IACA,OAAOA,IAAI,IAAI,IAAI,CAACO,KAAK,GAAGT,eAAe,CAAC,IAAI,CAACS,KAAK,EAAEP,IAAI,CAAC,GAAGe,SAAS;EAC3E,CAAC;EACD;AACF;AACA;AACA;;EAGEV,MAAM,CAACG,SAAS,CAACQ,MAAM,GAAG,YAAY;IACpC,OAAOpB,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACW,KAAK,CAAC;EAC/B,CAAC;EACD;AACF;AACA;AACA;AACA;;EAGEF,MAAM,CAACG,SAAS,CAACS,GAAG,GAAG,UAAUjB,IAAI,EAAEkB,KAAK,EAAE;IAC5C;IACA,OAAOnB,eAAe,CAAC,IAAI,CAACQ,KAAK,EAAEP,IAAI,EAAEkB,KAAK,CAAC;EACjD,CAAC;EACD;AACF;AACA;AACA;;EAGEb,MAAM,CAACG,SAAS,CAACW,MAAM,GAAG,UAAUnB,IAAI,EAAE;IACxC;IACA,OAAO,IAAI,CAACO,KAAK,CAACP,IAAI,CAAC;EACzB,CAAC;EACD;AACF;AACA;;EAGEK,MAAM,CAACG,SAAS,CAACY,KAAK,GAAG,YAAY;IACnC,KAAK,IAAIC,KAAK,IAAI,IAAI,CAACd,KAAK,EAAE;MAC5B,IAAIV,cAAc,CAAC,IAAI,CAACU,KAAK,EAAEc,KAAK,CAAC,EAAE;QACrC,OAAO,IAAI,CAACd,KAAK,CAACc,KAAK,CAAC;MAC1B;IACF;EACF,CAAC;EAED,OAAOhB,MAAM;AACf,CAAC,EAAE;EACDiB,OAAO,EAAE;AACX,CAAC,CAAC"},"metadata":{},"sourceType":"module"}