{"ast":null,"code":"import { getCoordsDataType } from './shader_compiler';\nexport class GatherNDProgram {\n  constructor(sliceDim, strides, shape) {\n    this.sliceDim = sliceDim;\n    this.strides = strides;\n    this.variableNames = ['x', 'indices'];\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n}","map":{"version":3,"sources":["../src/gather_nd_gpu.ts"],"names":[],"mappings":"AAiBA,SAAQ,iBAAiB,QAAO,mBAAmB;AAEnD,OAAM,MAAO,eAAe,CAAA;EAI1B,WAAA,CACY,QAAgB,EAAU,OAAiB,EAAE,KAAe,EAAA;IAA5D,IAAA,CAAA,QAAQ,GAAR,QAAQ;IAAkB,IAAA,CAAA,OAAO,GAAP,OAAO;IAJ7C,IAAA,CAAA,aAAa,GAAG,CAAC,GAAG,EAAE,SAAS,CAAC;IAK9B,IAAI,CAAC,WAAW,GAAG,KAAK;IACxB,MAAM,WAAW,GAAG,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC;IACrD,MAAM,KAAK,GAAG,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC;IAC7C,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,GAAG,YAAY,GAAG,SAAS;IACjE,IAAI,CAAC,QAAQ,GAAG;UACV,WAAW,cAAc,WAAW,IAAI,IAAI,CAAC,OAAO;;YAElD,KAAK;;gCAEe,IAAI,CAAC,QAAQ;;sCAEP,YAAY;;;;OAI3C;EACL;AACD","sourceRoot":"","sourcesContent":["import { getCoordsDataType } from './shader_compiler';\nexport class GatherNDProgram {\n    constructor(sliceDim, strides, shape) {\n        this.sliceDim = sliceDim;\n        this.strides = strides;\n        this.variableNames = ['x', 'indices'];\n        this.outputShape = shape;\n        const stridesType = getCoordsDataType(strides.length);\n        const dtype = getCoordsDataType(shape.length);\n        const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n        this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;\n    }\n}\n//# sourceMappingURL=gather_nd_gpu.js.map"]},"metadata":{},"sourceType":"module"}