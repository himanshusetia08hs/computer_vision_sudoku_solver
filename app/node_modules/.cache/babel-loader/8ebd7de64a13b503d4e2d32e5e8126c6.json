{"ast":null,"code":"import { deepForEach } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nvar name = 'multinomial';\nvar dependencies = ['typed', 'add', 'divide', 'multiply', 'factorial', 'isInteger', 'isPositive'];\nexport var createMultinomial = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    add = _ref.add,\n    divide = _ref.divide,\n    multiply = _ref.multiply,\n    factorial = _ref.factorial,\n    isInteger = _ref.isInteger,\n    isPositive = _ref.isPositive;\n\n  /**\n   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.\n   *\n   * multinomial takes one array of integers as an argument.\n   * The following condition must be enforced: every ai <= 0\n   *\n   * Syntax:\n   *\n   *     math.multinomial(a) // a is an array type\n   *\n   * Examples:\n   *\n   *    math.multinomial([1,2,1]) // returns 12\n   *\n   * See also:\n   *\n   *    combinations, factorial\n   *\n   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset\n   * @return {Number | BigNumber}         Multinomial coefficient.\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      var sum = 0;\n      var denom = 1;\n      deepForEach(a, function (ai) {\n        if (!isInteger(ai) || !isPositive(ai)) {\n          throw new TypeError('Positive integer value expected in function multinomial');\n        }\n        sum = add(sum, ai);\n        denom = multiply(denom, factorial(ai));\n      });\n      return divide(factorial(sum), denom);\n    }\n  });\n});","map":{"version":3,"names":["deepForEach","factory","name","dependencies","createMultinomial","_ref","typed","add","divide","multiply","factorial","isInteger","isPositive","ArrayMatrix","a","sum","denom","ai","TypeError"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/P/temp/app/node_modules/mathjs/es/function/probability/multinomial.js"],"sourcesContent":["import { deepForEach } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nvar name = 'multinomial';\nvar dependencies = ['typed', 'add', 'divide', 'multiply', 'factorial', 'isInteger', 'isPositive'];\nexport var createMultinomial = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      add = _ref.add,\n      divide = _ref.divide,\n      multiply = _ref.multiply,\n      factorial = _ref.factorial,\n      isInteger = _ref.isInteger,\n      isPositive = _ref.isPositive;\n\n  /**\n   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.\n   *\n   * multinomial takes one array of integers as an argument.\n   * The following condition must be enforced: every ai <= 0\n   *\n   * Syntax:\n   *\n   *     math.multinomial(a) // a is an array type\n   *\n   * Examples:\n   *\n   *    math.multinomial([1,2,1]) // returns 12\n   *\n   * See also:\n   *\n   *    combinations, factorial\n   *\n   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset\n   * @return {Number | BigNumber}         Multinomial coefficient.\n   */\n  return typed(name, {\n    'Array | Matrix': function ArrayMatrix(a) {\n      var sum = 0;\n      var denom = 1;\n      deepForEach(a, function (ai) {\n        if (!isInteger(ai) || !isPositive(ai)) {\n          throw new TypeError('Positive integer value expected in function multinomial');\n        }\n\n        sum = add(sum, ai);\n        denom = multiply(denom, factorial(ai));\n      });\n      return divide(factorial(sum), denom);\n    }\n  });\n});"],"mappings":"AAAA,SAASA,WAAW,QAAQ,wBAAwB;AACpD,SAASC,OAAO,QAAQ,qBAAqB;AAC7C,IAAIC,IAAI,GAAG,aAAa;AACxB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,CAAC;AACjG,OAAO,IAAIC,iBAAiB,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACxF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,GAAG,GAAGF,IAAI,CAACE,GAAG;IACdC,MAAM,GAAGH,IAAI,CAACG,MAAM;IACpBC,QAAQ,GAAGJ,IAAI,CAACI,QAAQ;IACxBC,SAAS,GAAGL,IAAI,CAACK,SAAS;IAC1BC,SAAS,GAAGN,IAAI,CAACM,SAAS;IAC1BC,UAAU,GAAGP,IAAI,CAACO,UAAU;;EAEhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAON,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAE,SAASW,WAAW,CAACC,CAAC,EAAE;MACxC,IAAIC,GAAG,GAAG,CAAC;MACX,IAAIC,KAAK,GAAG,CAAC;MACbhB,WAAW,CAACc,CAAC,EAAE,UAAUG,EAAE,EAAE;QAC3B,IAAI,CAACN,SAAS,CAACM,EAAE,CAAC,IAAI,CAACL,UAAU,CAACK,EAAE,CAAC,EAAE;UACrC,MAAM,IAAIC,SAAS,CAAC,yDAAyD,CAAC;QAChF;QAEAH,GAAG,GAAGR,GAAG,CAACQ,GAAG,EAAEE,EAAE,CAAC;QAClBD,KAAK,GAAGP,QAAQ,CAACO,KAAK,EAAEN,SAAS,CAACO,EAAE,CAAC,CAAC;MACxC,CAAC,CAAC;MACF,OAAOT,MAAM,CAACE,SAAS,CAACK,GAAG,CAAC,EAAEC,KAAK,CAAC;IACtC;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module"}