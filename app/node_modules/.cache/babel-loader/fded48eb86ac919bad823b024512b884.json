{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* original source: keras/regularizers.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { abs, add, serialization, sum, tidy, zeros } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\nfunction assertObjectArgs(args) {\n  if (args != null && typeof args !== 'object') {\n    throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an ` + `object, but received: ${args}`);\n  }\n}\n/**\n * Regularizer base class.\n */\nexport class Regularizer extends serialization.Serializable {}\nexport class L1L2 extends Regularizer {\n  constructor(args) {\n    super();\n    assertObjectArgs(args);\n    this.l1 = args == null || args.l1 == null ? 0.01 : args.l1;\n    this.l2 = args == null || args.l2 == null ? 0.01 : args.l2;\n    this.hasL1 = this.l1 !== 0;\n    this.hasL2 = this.l2 !== 0;\n  }\n  /**\n   * Porting note: Renamed from __call__.\n   * @param x Variable of which to calculate the regularization score.\n   */\n  apply(x) {\n    return tidy(() => {\n      let regularization = zeros([1]);\n      if (this.hasL1) {\n        regularization = add(regularization, sum(tfc.mul(this.l1, abs(x))));\n      }\n      if (this.hasL2) {\n        regularization = add(regularization, sum(tfc.mul(this.l2, K.square(x))));\n      }\n      return regularization.asScalar();\n    });\n  }\n  getConfig() {\n    return {\n      'l1': this.l1,\n      'l2': this.l2\n    };\n  }\n  /** @nocollapse */\n  static fromConfig(cls, config) {\n    return new cls({\n      l1: config['l1'],\n      l2: config['l2']\n    });\n  }\n}\n/** @nocollapse */\nL1L2.className = 'L1L2';\nserialization.registerClass(L1L2);\nexport function l1(args) {\n  assertObjectArgs(args);\n  return new L1L2({\n    l1: args != null ? args.l1 : null,\n    l2: 0\n  });\n}\nexport function l2(args) {\n  assertObjectArgs(args);\n  return new L1L2({\n    l2: args != null ? args.l2 : null,\n    l1: 0\n  });\n}\n// Maps the JavaScript-like identifier keys to the corresponding keras symbols.\nexport const REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n  'l1l2': 'L1L2'\n};\nexport function serializeRegularizer(constraint) {\n  return serializeKerasObject(constraint);\n}\nexport function deserializeRegularizer(config) {\n  let customObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'regularizer');\n}\nexport function getRegularizer(identifier) {\n  if (identifier == null) {\n    return null;\n  }\n  if (typeof identifier === 'string') {\n    const className = identifier in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n    const config = {\n      className,\n      config: {}\n    };\n    return deserializeRegularizer(config);\n  } else if (identifier instanceof Regularizer) {\n    return identifier;\n  } else {\n    return deserializeRegularizer(identifier);\n  }\n}","map":{"version":3,"sources":["../src/regularizers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* original source: keras/regularizers.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { abs, add, serialization, sum, tidy, zeros } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\nfunction assertObjectArgs(args) {\n    if (args != null && typeof args !== 'object') {\n        throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an ` +\n            `object, but received: ${args}`);\n    }\n}\n/**\n * Regularizer base class.\n */\nexport class Regularizer extends serialization.Serializable {\n}\nexport class L1L2 extends Regularizer {\n    constructor(args) {\n        super();\n        assertObjectArgs(args);\n        this.l1 = args == null || args.l1 == null ? 0.01 : args.l1;\n        this.l2 = args == null || args.l2 == null ? 0.01 : args.l2;\n        this.hasL1 = this.l1 !== 0;\n        this.hasL2 = this.l2 !== 0;\n    }\n    /**\n     * Porting note: Renamed from __call__.\n     * @param x Variable of which to calculate the regularization score.\n     */\n    apply(x) {\n        return tidy(() => {\n            let regularization = zeros([1]);\n            if (this.hasL1) {\n                regularization = add(regularization, sum(tfc.mul(this.l1, abs(x))));\n            }\n            if (this.hasL2) {\n                regularization =\n                    add(regularization, sum(tfc.mul(this.l2, K.square(x))));\n            }\n            return regularization.asScalar();\n        });\n    }\n    getConfig() {\n        return { 'l1': this.l1, 'l2': this.l2 };\n    }\n    /** @nocollapse */\n    static fromConfig(cls, config) {\n        return new cls({ l1: config['l1'], l2: config['l2'] });\n    }\n}\n/** @nocollapse */\nL1L2.className = 'L1L2';\nserialization.registerClass(L1L2);\nexport function l1(args) {\n    assertObjectArgs(args);\n    return new L1L2({ l1: args != null ? args.l1 : null, l2: 0 });\n}\nexport function l2(args) {\n    assertObjectArgs(args);\n    return new L1L2({ l2: args != null ? args.l2 : null, l1: 0 });\n}\n// Maps the JavaScript-like identifier keys to the corresponding keras symbols.\nexport const REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n    'l1l2': 'L1L2'\n};\nexport function serializeRegularizer(constraint) {\n    return serializeKerasObject(constraint);\n}\nexport function deserializeRegularizer(config, customObjects = {}) {\n    return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'regularizer');\n}\nexport function getRegularizer(identifier) {\n    if (identifier == null) {\n        return null;\n    }\n    if (typeof identifier === 'string') {\n        const className = identifier in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n            REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n            identifier;\n        const config = { className, config: {} };\n        return deserializeRegularizer(config);\n    }\n    else if (identifier instanceof Regularizer) {\n        return identifier;\n    }\n    else {\n        return deserializeRegularizer(identifier);\n    }\n}\n//# sourceMappingURL=regularizers.js.map"]},"metadata":{},"sourceType":"module"}