{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BatchMatMul } from '../kernel_names';\nimport { matMul } from '../ops/mat_mul';\nexport const batchMatMulGradConfig = {\n  kernelName: BatchMatMul,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy, saved, attrs) => {\n    const [a, b] = saved;\n    const {\n      transposeA,\n      transposeB\n    } = attrs;\n    if (!transposeA && !transposeB) {\n      return {\n        a: () => matMul(dy, b, false, true),\n        b: () => matMul(a, dy, true, false)\n      };\n    } else if (!transposeA && transposeB) {\n      return {\n        a: () => matMul(dy, b, false, false),\n        b: () => matMul(dy, a, true, false)\n      };\n    } else if (transposeA && !transposeB) {\n      return {\n        a: () => matMul(b, dy, false, true),\n        b: () => matMul(a, dy, false, false)\n      };\n    } else {\n      return {\n        a: () => matMul(b, dy, true, true),\n        b: () => matMul(dy, a, true, true)\n      };\n    }\n  }\n};","map":{"version":3,"sources":["../../../../../../tfjs-core/src/gradients/BatchMatMul_grad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,WAAW,QAAyB,iBAAiB;AAE7D,SAAQ,MAAM,QAAO,gBAAgB;AAGrC,OAAO,MAAM,qBAAqB,GAAe;EAC/C,UAAU,EAAE,WAAW;EACvB,YAAY,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;EACxB,QAAQ,EAAE,CAAC,EAAU,EAAE,KAAe,EAAE,KAAmB,KAAI;IAC7D,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK;IAEpB,MAAM;MAAC,UAAU;MAAE;IAAU,CAAC,GAAG,KAA+B;IAEhE,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,EAAE;MAC9B,OAAO;QACL,CAAC,EAAE,MAAM,MAAM,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC;QACnC,CAAC,EAAE,MAAM,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK;OACnC;KACF,MAAM,IAAI,CAAC,UAAU,IAAI,UAAU,EAAE;MACpC,OAAO;QACL,CAAC,EAAE,MAAM,MAAM,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC;QACpC,CAAC,EAAE,MAAM,MAAM,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK;OACnC;KACF,MAAM,IAAI,UAAU,IAAI,CAAC,UAAU,EAAE;MACpC,OAAO;QACL,CAAC,EAAE,MAAM,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC;QACnC,CAAC,EAAE,MAAM,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK;OACpC;KACF,MAAM;MACL,OAAO;QACL,CAAC,EAAE,MAAM,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC;QAClC,CAAC,EAAE,MAAM,MAAM,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI;OAClC;IACF;EACH;CACD","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {matMul} from '../ops/mat_mul';\nimport {Tensor} from '../tensor';\n\nexport const batchMatMulGradConfig: GradConfig = {\n  kernelName: BatchMatMul,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [a, b] = saved;\n\n    const {transposeA, transposeB} = attrs as {} as BatchMatMulAttrs;\n\n    if (!transposeA && !transposeB) {\n      return {\n        a: () => matMul(dy, b, false, true),\n        b: () => matMul(a, dy, true, false)\n      };\n    } else if (!transposeA && transposeB) {\n      return {\n        a: () => matMul(dy, b, false, false),\n        b: () => matMul(dy, a, true, false)\n      };\n    } else if (transposeA && !transposeB) {\n      return {\n        a: () => matMul(b, dy, false, true),\n        b: () => matMul(a, dy, false, false)\n      };\n    } else {\n      return {\n        a: () => matMul(b, dy, true, true),\n        b: () => matMul(dy, a, true, true)\n      };\n    }\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}