{"ast":null,"code":"import Image from \"./Image\";\nfunction precompute(bytes, width, height) {\n  const result = new Array(bytes.length);\n  let dst = 0;\n  let src = 0;\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      let tot = bytes[src];\n      if (x > 0) tot += result[dst - 1];\n      if (y > 0) tot += result[dst - width];\n      if (x > 0 && y > 0) tot -= result[dst - width - 1];\n      result[dst] = tot;\n      dst++;\n      src++;\n    }\n  }\n  return result;\n}\nfunction readP(precomputed, w, h, x, y) {\n  if (x < 0) x = 0;else if (x >= w) x = w - 1;\n  if (y < 0) y = 0;else if (y >= h) y = h - 1;\n  return precomputed[x + y * w];\n}\nexport default function boxBlur(src, boxw, boxh) {\n  const {\n    width,\n    height,\n    bytes\n  } = src;\n  const precomputed = precompute(bytes, width, height);\n  const result = new Uint8ClampedArray(width * height);\n  let dst = 0;\n  const mul = 1.0 / ((boxw * 2 + 1) * (boxh * 2 + 1));\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      const tot = readP(precomputed, width, height, x + boxw, y + boxh) + readP(precomputed, width, height, x - boxw, y - boxh) - readP(precomputed, width, height, x - boxw, y + boxh) - readP(precomputed, width, height, x + boxw, y - boxh);\n      result[dst] = tot * mul;\n      dst++;\n    }\n  }\n  return new Image(result, width, height);\n}","map":{"version":3,"names":["Image","precompute","bytes","width","height","result","Array","length","dst","src","y","x","tot","readP","precomputed","w","h","boxBlur","boxw","boxh","Uint8ClampedArray","mul"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/P/temp/app/src/augmentedReality/imageProcessing/boxBlur.ts"],"sourcesContent":["import Image from \"./Image\";\n\nfunction precompute(\n  bytes: Uint8ClampedArray,\n  width: number,\n  height: number\n): number[] {\n  const result: number[] = new Array(bytes.length);\n  let dst = 0;\n  let src = 0;\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      let tot = bytes[src];\n      if (x > 0) tot += result[dst - 1];\n      if (y > 0) tot += result[dst - width];\n      if (x > 0 && y > 0) tot -= result[dst - width - 1];\n      result[dst] = tot;\n      dst++;\n      src++;\n    }\n  }\n  return result;\n}\n\nfunction readP(\n  precomputed: number[],\n  w: number,\n  h: number,\n  x: number,\n  y: number\n): number {\n  if (x < 0) x = 0;\n  else if (x >= w) x = w - 1;\n  if (y < 0) y = 0;\n  else if (y >= h) y = h - 1;\n  return precomputed[x + y * w];\n}\n\nexport default function boxBlur(src: Image, boxw: number, boxh: number): Image {\n  const { width, height, bytes } = src;\n  const precomputed = precompute(bytes, width, height);\n  const result = new Uint8ClampedArray(width * height);\n  let dst = 0;\n  const mul = 1.0 / ((boxw * 2 + 1) * (boxh * 2 + 1));\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      const tot =\n        readP(precomputed, width, height, x + boxw, y + boxh) +\n        readP(precomputed, width, height, x - boxw, y - boxh) -\n        readP(precomputed, width, height, x - boxw, y + boxh) -\n        readP(precomputed, width, height, x + boxw, y - boxh);\n      result[dst] = tot * mul;\n      dst++;\n    }\n  }\n  return new Image(result, width, height);\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,SAAS;AAE3B,SAASC,UAAU,CACjBC,KAAwB,EACxBC,KAAa,EACbC,MAAc,EACJ;EACV,MAAMC,MAAgB,GAAG,IAAIC,KAAK,CAACJ,KAAK,CAACK,MAAM,CAAC;EAChD,IAAIC,GAAG,GAAG,CAAC;EACX,IAAIC,GAAG,GAAG,CAAC;EACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,MAAM,EAAEM,CAAC,EAAE,EAAE;IAC/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,KAAK,EAAEQ,CAAC,EAAE,EAAE;MAC9B,IAAIC,GAAG,GAAGV,KAAK,CAACO,GAAG,CAAC;MACpB,IAAIE,CAAC,GAAG,CAAC,EAAEC,GAAG,IAAIP,MAAM,CAACG,GAAG,GAAG,CAAC,CAAC;MACjC,IAAIE,CAAC,GAAG,CAAC,EAAEE,GAAG,IAAIP,MAAM,CAACG,GAAG,GAAGL,KAAK,CAAC;MACrC,IAAIQ,CAAC,GAAG,CAAC,IAAID,CAAC,GAAG,CAAC,EAAEE,GAAG,IAAIP,MAAM,CAACG,GAAG,GAAGL,KAAK,GAAG,CAAC,CAAC;MAClDE,MAAM,CAACG,GAAG,CAAC,GAAGI,GAAG;MACjBJ,GAAG,EAAE;MACLC,GAAG,EAAE;IACP;EACF;EACA,OAAOJ,MAAM;AACf;AAEA,SAASQ,KAAK,CACZC,WAAqB,EACrBC,CAAS,EACTC,CAAS,EACTL,CAAS,EACTD,CAAS,EACD;EACR,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,KACZ,IAAIA,CAAC,IAAII,CAAC,EAAEJ,CAAC,GAAGI,CAAC,GAAG,CAAC;EAC1B,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,KACZ,IAAIA,CAAC,IAAIM,CAAC,EAAEN,CAAC,GAAGM,CAAC,GAAG,CAAC;EAC1B,OAAOF,WAAW,CAACH,CAAC,GAAGD,CAAC,GAAGK,CAAC,CAAC;AAC/B;AAEA,eAAe,SAASE,OAAO,CAACR,GAAU,EAAES,IAAY,EAAEC,IAAY,EAAS;EAC7E,MAAM;IAAEhB,KAAK;IAAEC,MAAM;IAAEF;EAAM,CAAC,GAAGO,GAAG;EACpC,MAAMK,WAAW,GAAGb,UAAU,CAACC,KAAK,EAAEC,KAAK,EAAEC,MAAM,CAAC;EACpD,MAAMC,MAAM,GAAG,IAAIe,iBAAiB,CAACjB,KAAK,GAAGC,MAAM,CAAC;EACpD,IAAII,GAAG,GAAG,CAAC;EACX,MAAMa,GAAG,GAAG,GAAG,IAAI,CAACH,IAAI,GAAG,CAAC,GAAG,CAAC,KAAKC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;EACnD,KAAK,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,MAAM,EAAEM,CAAC,EAAE,EAAE;IAC/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,KAAK,EAAEQ,CAAC,EAAE,EAAE;MAC9B,MAAMC,GAAG,GACPC,KAAK,CAACC,WAAW,EAAEX,KAAK,EAAEC,MAAM,EAAEO,CAAC,GAAGO,IAAI,EAAER,CAAC,GAAGS,IAAI,CAAC,GACrDN,KAAK,CAACC,WAAW,EAAEX,KAAK,EAAEC,MAAM,EAAEO,CAAC,GAAGO,IAAI,EAAER,CAAC,GAAGS,IAAI,CAAC,GACrDN,KAAK,CAACC,WAAW,EAAEX,KAAK,EAAEC,MAAM,EAAEO,CAAC,GAAGO,IAAI,EAAER,CAAC,GAAGS,IAAI,CAAC,GACrDN,KAAK,CAACC,WAAW,EAAEX,KAAK,EAAEC,MAAM,EAAEO,CAAC,GAAGO,IAAI,EAAER,CAAC,GAAGS,IAAI,CAAC;MACvDd,MAAM,CAACG,GAAG,CAAC,GAAGI,GAAG,GAAGS,GAAG;MACvBb,GAAG,EAAE;IACP;EACF;EACA,OAAO,IAAIR,KAAK,CAACK,MAAM,EAAEF,KAAK,EAAEC,MAAM,CAAC;AACzC"},"metadata":{},"sourceType":"module"}