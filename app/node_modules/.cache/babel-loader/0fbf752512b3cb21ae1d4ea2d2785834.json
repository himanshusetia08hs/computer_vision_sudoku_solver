{"ast":null,"code":"import { isFunctionAssignmentNode, isSymbolNode } from '../../utils/is';\nimport { maxArgumentCount } from '../../utils/function';\nimport { map } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nimport { compileInlineExpression } from './utils/compileInlineExpression';\nvar name = 'map';\nvar dependencies = ['typed'];\nexport var createMapTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Attach a transform function to math.map\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  function mapTransform(args, math, scope) {\n    var x, callback;\n    if (args[0]) {\n      x = args[0].compile().evaluate(scope);\n    }\n    if (args[1]) {\n      if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {\n        // a function pointer, like filter([3, -2, 5], myTestFunction)\n        callback = args[1].compile().evaluate(scope);\n      } else {\n        // an expression like filter([3, -2, 5], x > 0)\n        callback = compileInlineExpression(args[1], math, scope);\n      }\n    }\n    return map(x, callback);\n  }\n  mapTransform.rawArgs = true; // one-based version of map function\n\n  var map = typed('map', {\n    'Array, function': function ArrayFunction(x, callback) {\n      return _map(x, callback, x);\n    },\n    'Matrix, function': function MatrixFunction(x, callback) {\n      return x.create(_map(x.valueOf(), callback, x));\n    }\n  });\n  return mapTransform;\n}, {\n  isTransformFunction: true\n});\n/**\n * Map for a multi dimensional array. One-based indexes\n * @param {Array} array\n * @param {function} callback\n * @param {Array} orig\n * @return {Array}\n * @private\n */\n\nfunction _map(array, callback, orig) {\n  // figure out what number of arguments the callback function expects\n  var argsCount = maxArgumentCount(callback);\n  function recurse(value, index) {\n    if (Array.isArray(value)) {\n      return map(value, function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i + 1)); // one based index, hence i + 1\n      });\n    } else {\n      // invoke the (typed) callback function with the right number of arguments\n      if (argsCount === 1) {\n        return callback(value);\n      } else if (argsCount === 2) {\n        return callback(value, index);\n      } else {\n        // 3 or -1\n        return callback(value, index, orig);\n      }\n    }\n  }\n  return recurse(array, []);\n}","map":{"version":3,"names":["isFunctionAssignmentNode","isSymbolNode","maxArgumentCount","map","factory","compileInlineExpression","name","dependencies","createMapTransform","_ref","typed","mapTransform","args","math","scope","x","callback","compile","evaluate","rawArgs","ArrayFunction","_map","MatrixFunction","create","valueOf","isTransformFunction","array","orig","argsCount","recurse","value","index","Array","isArray","child","i","concat"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/P/temp/app/node_modules/mathjs/es/expression/transform/map.transform.js"],"sourcesContent":["import { isFunctionAssignmentNode, isSymbolNode } from '../../utils/is';\nimport { maxArgumentCount } from '../../utils/function';\nimport { map } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nimport { compileInlineExpression } from './utils/compileInlineExpression';\nvar name = 'map';\nvar dependencies = ['typed'];\nexport var createMapTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Attach a transform function to math.map\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  function mapTransform(args, math, scope) {\n    var x, callback;\n\n    if (args[0]) {\n      x = args[0].compile().evaluate(scope);\n    }\n\n    if (args[1]) {\n      if (isSymbolNode(args[1]) || isFunctionAssignmentNode(args[1])) {\n        // a function pointer, like filter([3, -2, 5], myTestFunction)\n        callback = args[1].compile().evaluate(scope);\n      } else {\n        // an expression like filter([3, -2, 5], x > 0)\n        callback = compileInlineExpression(args[1], math, scope);\n      }\n    }\n\n    return map(x, callback);\n  }\n\n  mapTransform.rawArgs = true; // one-based version of map function\n\n  var map = typed('map', {\n    'Array, function': function ArrayFunction(x, callback) {\n      return _map(x, callback, x);\n    },\n    'Matrix, function': function MatrixFunction(x, callback) {\n      return x.create(_map(x.valueOf(), callback, x));\n    }\n  });\n  return mapTransform;\n}, {\n  isTransformFunction: true\n});\n/**\n * Map for a multi dimensional array. One-based indexes\n * @param {Array} array\n * @param {function} callback\n * @param {Array} orig\n * @return {Array}\n * @private\n */\n\nfunction _map(array, callback, orig) {\n  // figure out what number of arguments the callback function expects\n  var argsCount = maxArgumentCount(callback);\n\n  function recurse(value, index) {\n    if (Array.isArray(value)) {\n      return map(value, function (child, i) {\n        // we create a copy of the index array and append the new index value\n        return recurse(child, index.concat(i + 1)); // one based index, hence i + 1\n      });\n    } else {\n      // invoke the (typed) callback function with the right number of arguments\n      if (argsCount === 1) {\n        return callback(value);\n      } else if (argsCount === 2) {\n        return callback(value, index);\n      } else {\n        // 3 or -1\n        return callback(value, index, orig);\n      }\n    }\n  }\n\n  return recurse(array, []);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}