{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Built-in metrics.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { tidy } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { NotImplementedError, ValueError } from './errors';\nimport { categoricalCrossentropy as categoricalCrossentropyLoss, cosineProximity, meanAbsoluteError, meanAbsolutePercentageError, meanSquaredError, sparseCategoricalCrossentropy as sparseCategoricalCrossentropyLoss } from './losses';\nimport { binaryCrossentropy as lossBinaryCrossentropy } from './losses';\nimport { lossesMap } from './losses';\nimport * as util from './utils/generic_utils';\nexport function binaryAccuracy(yTrue, yPred) {\n  return tidy(() => {\n    const threshold = tfc.mul(.5, tfc.onesLike(yPred));\n    const yPredThresholded = K.cast(tfc.greater(yPred, threshold), yTrue.dtype);\n    return tfc.mean(tfc.equal(yTrue, yPredThresholded), -1);\n  });\n}\nexport function categoricalAccuracy(yTrue, yPred) {\n  return tidy(() => K.cast(tfc.equal(tfc.argMax(yTrue, -1), tfc.argMax(yPred, -1)), 'float32'));\n}\nfunction truePositives(yTrue, yPred) {\n  return tidy(() => {\n    return tfc.logicalAnd(yTrue.equal(1), yPred.equal(1)).sum().cast('float32');\n  });\n}\nfunction falseNegatives(yTrue, yPred) {\n  return tidy(() => {\n    return tfc.logicalAnd(yTrue.equal(1), yPred.equal(0)).sum().cast('float32');\n  });\n}\nfunction falsePositives(yTrue, yPred) {\n  return tidy(() => {\n    return tfc.logicalAnd(yTrue.equal(0), yPred.equal(1)).sum().cast('float32');\n  });\n}\nexport function precision(yTrue, yPred) {\n  return tidy(() => {\n    const tp = truePositives(yTrue, yPred);\n    const fp = falsePositives(yTrue, yPred);\n    const denominator = tp.add(fp);\n    return tfc.where(tfc.greater(denominator, 0), tp.div(denominator), 0).cast('float32');\n  });\n}\nexport function recall(yTrue, yPred) {\n  return tidy(() => {\n    const tp = truePositives(yTrue, yPred);\n    const fn = falseNegatives(yTrue, yPred);\n    const denominator = tp.add(fn);\n    return tfc.where(tfc.greater(denominator, 0), tp.div(denominator), 0).cast('float32');\n  });\n}\nexport function binaryCrossentropy(yTrue, yPred) {\n  return lossBinaryCrossentropy(yTrue, yPred);\n}\nexport function sparseCategoricalAccuracy(yTrue, yPred) {\n  if (yTrue.rank === yPred.rank) {\n    yTrue = yTrue.squeeze([yTrue.rank - 1]);\n  }\n  yPred = yPred.argMax(-1);\n  if (yPred.dtype !== yTrue.dtype) {\n    yPred = yPred.asType(yTrue.dtype);\n  }\n  return tfc.equal(yTrue, yPred).asType('float32');\n}\nexport function topKCategoricalAccuracy(yTrue, yPred) {\n  throw new NotImplementedError();\n}\nexport function sparseTopKCategoricalAccuracy(yTrue, yPred) {\n  throw new NotImplementedError();\n}\n// Aliases.\nexport const mse = meanSquaredError;\nexport const MSE = meanSquaredError;\nexport const mae = meanAbsoluteError;\nexport const MAE = meanAbsoluteError;\nexport const mape = meanAbsolutePercentageError;\nexport const MAPE = meanAbsolutePercentageError;\nexport const categoricalCrossentropy = categoricalCrossentropyLoss;\nexport const cosine = cosineProximity;\nexport const sparseCategoricalCrossentropy = sparseCategoricalCrossentropyLoss;\n// TODO(cais, nielsene): Add serialize().\nexport const metricsMap = {\n  binaryAccuracy,\n  categoricalAccuracy,\n  precision,\n  categoricalCrossentropy,\n  sparseCategoricalCrossentropy,\n  mse,\n  MSE,\n  mae,\n  MAE,\n  mape,\n  MAPE,\n  cosine\n};\nexport function get(identifier) {\n  if (typeof identifier === 'string' && identifier in metricsMap) {\n    return metricsMap[identifier];\n  } else if (typeof identifier !== 'string' && identifier != null) {\n    return identifier;\n  } else {\n    throw new ValueError(`Unknown metric ${identifier}`);\n  }\n}\n/**\n * Get the shortcut function name.\n *\n * If the fn name is a string,\n *   directly return the string name.\n * If the function is included in metricsMap or lossesMap,\n *   return key of the map.\n *   - If the function relative to multiple keys,\n *     return the first found key as the function name.\n *   - If the function exists in both lossesMap and metricsMap,\n *     search lossesMap first.\n * If the function is not included in metricsMap or lossesMap,\n *   return the function name.\n *\n * @param fn loss function, metric function, or short cut name.\n * @returns Loss or Metric name in string.\n */\nexport function getLossOrMetricName(fn) {\n  util.assert(fn !== null, `Unknown LossOrMetricFn ${fn}`);\n  if (typeof fn === 'string') {\n    return fn;\n  } else {\n    let fnName;\n    for (const key of Object.keys(lossesMap)) {\n      if (lossesMap[key] === fn) {\n        fnName = key;\n        break;\n      }\n    }\n    if (fnName !== undefined) {\n      return fnName;\n    }\n    for (const key of Object.keys(metricsMap)) {\n      if (metricsMap[key] === fn) {\n        fnName = key;\n        break;\n      }\n    }\n    if (fnName !== undefined) {\n      return fnName;\n    }\n    return fn.name;\n  }\n}","map":{"version":3,"sources":["../src/metrics.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Built-in metrics.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { tidy } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { NotImplementedError, ValueError } from './errors';\nimport { categoricalCrossentropy as categoricalCrossentropyLoss, cosineProximity, meanAbsoluteError, meanAbsolutePercentageError, meanSquaredError, sparseCategoricalCrossentropy as sparseCategoricalCrossentropyLoss } from './losses';\nimport { binaryCrossentropy as lossBinaryCrossentropy } from './losses';\nimport { lossesMap } from './losses';\nimport * as util from './utils/generic_utils';\nexport function binaryAccuracy(yTrue, yPred) {\n    return tidy(() => {\n        const threshold = tfc.mul(.5, tfc.onesLike(yPred));\n        const yPredThresholded = K.cast(tfc.greater(yPred, threshold), yTrue.dtype);\n        return tfc.mean(tfc.equal(yTrue, yPredThresholded), -1);\n    });\n}\nexport function categoricalAccuracy(yTrue, yPred) {\n    return tidy(() => K.cast(tfc.equal(tfc.argMax(yTrue, -1), tfc.argMax(yPred, -1)), 'float32'));\n}\nfunction truePositives(yTrue, yPred) {\n    return tidy(() => {\n        return tfc.logicalAnd(yTrue.equal(1), yPred.equal(1)).sum().cast('float32');\n    });\n}\nfunction falseNegatives(yTrue, yPred) {\n    return tidy(() => {\n        return tfc.logicalAnd(yTrue.equal(1), yPred.equal(0)).sum().cast('float32');\n    });\n}\nfunction falsePositives(yTrue, yPred) {\n    return tidy(() => {\n        return tfc.logicalAnd(yTrue.equal(0), yPred.equal(1)).sum().cast('float32');\n    });\n}\nexport function precision(yTrue, yPred) {\n    return tidy(() => {\n        const tp = truePositives(yTrue, yPred);\n        const fp = falsePositives(yTrue, yPred);\n        const denominator = tp.add(fp);\n        return tfc.where(tfc.greater(denominator, 0), tp.div(denominator), 0)\n            .cast('float32');\n    });\n}\nexport function recall(yTrue, yPred) {\n    return tidy(() => {\n        const tp = truePositives(yTrue, yPred);\n        const fn = falseNegatives(yTrue, yPred);\n        const denominator = tp.add(fn);\n        return tfc.where(tfc.greater(denominator, 0), tp.div(denominator), 0)\n            .cast('float32');\n    });\n}\nexport function binaryCrossentropy(yTrue, yPred) {\n    return lossBinaryCrossentropy(yTrue, yPred);\n}\nexport function sparseCategoricalAccuracy(yTrue, yPred) {\n    if (yTrue.rank === yPred.rank) {\n        yTrue = yTrue.squeeze([yTrue.rank - 1]);\n    }\n    yPred = yPred.argMax(-1);\n    if (yPred.dtype !== yTrue.dtype) {\n        yPred = yPred.asType(yTrue.dtype);\n    }\n    return tfc.equal(yTrue, yPred).asType('float32');\n}\nexport function topKCategoricalAccuracy(yTrue, yPred) {\n    throw new NotImplementedError();\n}\nexport function sparseTopKCategoricalAccuracy(yTrue, yPred) {\n    throw new NotImplementedError();\n}\n// Aliases.\nexport const mse = meanSquaredError;\nexport const MSE = meanSquaredError;\nexport const mae = meanAbsoluteError;\nexport const MAE = meanAbsoluteError;\nexport const mape = meanAbsolutePercentageError;\nexport const MAPE = meanAbsolutePercentageError;\nexport const categoricalCrossentropy = categoricalCrossentropyLoss;\nexport const cosine = cosineProximity;\nexport const sparseCategoricalCrossentropy = sparseCategoricalCrossentropyLoss;\n// TODO(cais, nielsene): Add serialize().\nexport const metricsMap = {\n    binaryAccuracy,\n    categoricalAccuracy,\n    precision,\n    categoricalCrossentropy,\n    sparseCategoricalCrossentropy,\n    mse,\n    MSE,\n    mae,\n    MAE,\n    mape,\n    MAPE,\n    cosine\n};\nexport function get(identifier) {\n    if (typeof identifier === 'string' && identifier in metricsMap) {\n        return metricsMap[identifier];\n    }\n    else if (typeof identifier !== 'string' && identifier != null) {\n        return identifier;\n    }\n    else {\n        throw new ValueError(`Unknown metric ${identifier}`);\n    }\n}\n/**\n * Get the shortcut function name.\n *\n * If the fn name is a string,\n *   directly return the string name.\n * If the function is included in metricsMap or lossesMap,\n *   return key of the map.\n *   - If the function relative to multiple keys,\n *     return the first found key as the function name.\n *   - If the function exists in both lossesMap and metricsMap,\n *     search lossesMap first.\n * If the function is not included in metricsMap or lossesMap,\n *   return the function name.\n *\n * @param fn loss function, metric function, or short cut name.\n * @returns Loss or Metric name in string.\n */\nexport function getLossOrMetricName(fn) {\n    util.assert(fn !== null, `Unknown LossOrMetricFn ${fn}`);\n    if (typeof fn === 'string') {\n        return fn;\n    }\n    else {\n        let fnName;\n        for (const key of Object.keys(lossesMap)) {\n            if (lossesMap[key] === fn) {\n                fnName = key;\n                break;\n            }\n        }\n        if (fnName !== undefined) {\n            return fnName;\n        }\n        for (const key of Object.keys(metricsMap)) {\n            if (metricsMap[key] === fn) {\n                fnName = key;\n                break;\n            }\n        }\n        if (fnName !== undefined) {\n            return fnName;\n        }\n        return fn.name;\n    }\n}\n//# sourceMappingURL=metrics.js.map"]},"metadata":{},"sourceType":"module"}