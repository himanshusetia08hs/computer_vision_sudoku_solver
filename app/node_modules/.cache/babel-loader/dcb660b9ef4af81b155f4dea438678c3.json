{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { secNumber } from '../../plain/number';\nvar name = 'sec';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createSec = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    _BigNumber = _ref.BigNumber;\n\n  /**\n   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sec(x)\n   *\n   * Examples:\n   *\n   *    math.sec(2)      // returns number -2.4029979617223822\n   *    1 / math.cos(2)  // returns number -2.4029979617223822\n   *\n   * See also:\n   *\n   *    cos, csc, cot\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Secant of x\n   */\n  return typed(name, {\n    number: secNumber,\n    Complex: function Complex(x) {\n      return x.sec();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x.cos());\n    },\n    Unit: function Unit(x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function sec is no angle');\n      }\n      return this(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"names":["factory","deepMap","secNumber","name","dependencies","createSec","_ref","typed","_BigNumber","BigNumber","number","Complex","x","sec","div","cos","Unit","hasBase","constructor","BASE_UNITS","ANGLE","TypeError","value","ArrayMatrix"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/Project/temp/app/node_modules/mathjs/es/function/trigonometry/sec.js"],"sourcesContent":["import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { secNumber } from '../../plain/number';\nvar name = 'sec';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createSec = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      _BigNumber = _ref.BigNumber;\n\n  /**\n   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sec(x)\n   *\n   * Examples:\n   *\n   *    math.sec(2)      // returns number -2.4029979617223822\n   *    1 / math.cos(2)  // returns number -2.4029979617223822\n   *\n   * See also:\n   *\n   *    cos, csc, cot\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Secant of x\n   */\n  return typed(name, {\n    number: secNumber,\n    Complex: function Complex(x) {\n      return x.sec();\n    },\n    BigNumber: function BigNumber(x) {\n      return new _BigNumber(1).div(x.cos());\n    },\n    Unit: function Unit(x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function sec is no angle');\n      }\n\n      return this(x.value);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,IAAIC,IAAI,GAAG,KAAK;AAChB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,WAAW,CAAC;AACzC,OAAO,IAAIC,SAAS,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAChF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,UAAU,GAAGF,IAAI,CAACG,SAAS;;EAE/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOF,KAAK,CAACJ,IAAI,EAAE;IACjBO,MAAM,EAAER,SAAS;IACjBS,OAAO,EAAE,SAASA,OAAO,CAACC,CAAC,EAAE;MAC3B,OAAOA,CAAC,CAACC,GAAG,EAAE;IAChB,CAAC;IACDJ,SAAS,EAAE,SAASA,SAAS,CAACG,CAAC,EAAE;MAC/B,OAAO,IAAIJ,UAAU,CAAC,CAAC,CAAC,CAACM,GAAG,CAACF,CAAC,CAACG,GAAG,EAAE,CAAC;IACvC,CAAC;IACDC,IAAI,EAAE,SAASA,IAAI,CAACJ,CAAC,EAAE;MACrB,IAAI,CAACA,CAAC,CAACK,OAAO,CAACL,CAAC,CAACM,WAAW,CAACC,UAAU,CAACC,KAAK,CAAC,EAAE;QAC9C,MAAM,IAAIC,SAAS,CAAC,kCAAkC,CAAC;MACzD;MAEA,OAAO,IAAI,CAACT,CAAC,CAACU,KAAK,CAAC;IACtB,CAAC;IACD,gBAAgB,EAAE,SAASC,WAAW,CAACX,CAAC,EAAE;MACxC,OAAOX,OAAO,CAACW,CAAC,EAAE,IAAI,CAAC;IACzB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module"}