{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Slice } from '../kernel_names';\nimport { pad } from '../ops/pad';\nimport { parseSliceParams } from '../ops/slice_util';\nexport const sliceGradConfig = {\n  kernelName: Slice,\n  inputsToSave: ['x'],\n  gradFunc: (dy, saved, attrs) => {\n    const [x] = saved;\n    const {\n      begin,\n      size\n    } = attrs;\n    const inputShape = x.shape;\n    const [begin_, size_] = parseSliceParams(x, begin, size);\n    // Create an Nx2 padding where the first column represents how many\n    // zeros are prepended (at start) for each dimension, and the second\n    // column indicates how many zeros are appended (at end).\n    // The number of zeros to append is the shape of the input\n    // elementwise-subtracted by both the begin vector and sizes vector.\n    const paddings = [];\n    for (let i = 0; i < dy.rank; i++) {\n      paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);\n    }\n    return {\n      x: () => pad(dy, paddings)\n    };\n  }\n};","map":{"version":3,"sources":["../../../../../../tfjs-core/src/gradients/Slice_grad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,KAAK,QAAmB,iBAAiB;AAEjD,SAAQ,GAAG,QAAO,YAAY;AAC9B,SAAQ,gBAAgB,QAAO,mBAAmB;AAGlD,OAAO,MAAM,eAAe,GAAe;EACzC,UAAU,EAAE,KAAK;EACjB,YAAY,EAAE,CAAC,GAAG,CAAC;EACnB,QAAQ,EAAE,CAAC,EAAU,EAAE,KAAe,EAAE,KAAmB,KAAI;IAC7D,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK;IACjB,MAAM;MAAC,KAAK;MAAE;IAAI,CAAC,GAAG,KAAyB;IAE/C,MAAM,UAAU,GAAG,CAAC,CAAC,KAAK;IAC1B,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,GAAG,gBAAgB,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC;IAExD;IACA;IACA;IAEA;IACA;IACA,MAAM,QAAQ,GAA4B,EAAE;IAC5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;MAChC,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACjE;IACD,OAAO;MAAC,CAAC,EAAE,MAAM,GAAG,CAAC,EAAE,EAAE,QAAQ;IAAC,CAAC;EACrC;CACD","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Slice, SliceAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {pad} from '../ops/pad';\nimport {parseSliceParams} from '../ops/slice_util';\nimport {Tensor} from '../tensor';\n\nexport const sliceGradConfig: GradConfig = {\n  kernelName: Slice,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x] = saved;\n    const {begin, size} = attrs as {} as SliceAttrs;\n\n    const inputShape = x.shape;\n    const [begin_, size_] = parseSliceParams(x, begin, size);\n\n    // Create an Nx2 padding where the first column represents how many\n    // zeros are prepended (at start) for each dimension, and the second\n    // column indicates how many zeros are appended (at end).\n\n    // The number of zeros to append is the shape of the input\n    // elementwise-subtracted by both the begin vector and sizes vector.\n    const paddings: Array<[number, number]> = [];\n    for (let i = 0; i < dy.rank; i++) {\n      paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);\n    }\n    return {x: () => pad(dy, paddings)};\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}