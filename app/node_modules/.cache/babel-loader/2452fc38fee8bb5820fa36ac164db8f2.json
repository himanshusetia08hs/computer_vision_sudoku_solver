{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: utils/generic_utils.py */\nimport { util } from '@tensorflow/tfjs-core';\nimport { AssertionError, ValueError } from '../errors';\n// tslint:enable\n/**\n * If `value` is an Array, equivalent to Python's `value * numValues`.\n * If `value` is not an Array, equivalent to Python's `[value] * numValues`\n */\n// tslint:disable-next-line:no-any\nexport function pyListRepeat(value, numValues) {\n  if (Array.isArray(value)) {\n    // tslint:disable-next-line:no-any\n    let newArray = [];\n    for (let i = 0; i < numValues; i++) {\n      newArray = newArray.concat(value);\n    }\n    return newArray;\n  } else {\n    const newArray = new Array(numValues);\n    newArray.fill(value);\n    return newArray;\n  }\n}\nexport function assert(val, message) {\n  if (!val) {\n    throw new AssertionError(message);\n  }\n}\n/**\n * Count the number of elements of the `array` that are equal to `reference`.\n */\nexport function count(array, refernce) {\n  let counter = 0;\n  for (const item of array) {\n    if (item === refernce) {\n      counter++;\n    }\n  }\n  return counter;\n}\n/**\n * If an array is of length 1, just return the first element. Otherwise, return\n * the full array.\n * @param tensors\n */\nexport function singletonOrArray(xs) {\n  if (xs.length === 1) {\n    return xs[0];\n  }\n  return xs;\n}\n/**\n * Normalizes a list/tensor into a list.\n *\n * If a tensor is passed, we return\n * a list of size 1 containing the tensor.\n *\n * @param x target object to be normalized.\n */\n// tslint:disable-next-line:no-any\nexport function toList(x) {\n  if (Array.isArray(x)) {\n    return x;\n  }\n  return [x];\n}\n/**\n * Generate a UID for a list\n */\n// tslint:disable-next-line:no-any\nexport function objectListUid(objs) {\n  const objectList = toList(objs);\n  let retVal = '';\n  for (const obj of objectList) {\n    if (obj.id == null) {\n      throw new ValueError(`Object ${obj} passed to objectListUid without an id`);\n    }\n    if (retVal !== '') {\n      retVal = retVal + ', ';\n    }\n    retVal = `${retVal}${Math.abs(obj.id)}`;\n  }\n  return retVal;\n}\n/**\n * Converts string to snake-case.\n * @param name\n */\nexport function toSnakeCase(name) {\n  const intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');\n  const insecure = intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n  /*\n   If the class is private the name starts with \"_\" which is not secure\n   for creating scopes. We prefix the name with \"private\" in this case.\n   */\n  if (insecure[0] !== '_') {\n    return insecure;\n  }\n  return 'private' + insecure;\n}\nexport function toCamelCase(identifier) {\n  // quick return for empty string or single character strings\n  if (identifier.length <= 1) {\n    return identifier;\n  }\n  // Check for the underscore indicating snake_case\n  if (identifier.indexOf('_') === -1) {\n    return identifier;\n  }\n  return identifier.replace(/[_]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n}\n// tslint:disable-next-line:no-any\nlet _GLOBAL_CUSTOM_OBJECTS = {};\nexport function serializeKerasObject(instance) {\n  if (instance === null || instance === undefined) {\n    return null;\n  }\n  const dict = {};\n  dict['className'] = instance.getClassName();\n  dict['config'] = instance.getConfig();\n  return dict;\n}\n/**\n * Replace ndarray-style scalar objects in serialization objects with numbers.\n *\n * Background: In some versions of tf.keras, certain scalar values in the HDF5\n * model save file can be serialized as: `{'type': 'ndarray', 'value': num}`,\n * where in `num` is a plain number. This method converts such serialization\n * to a `number`.\n *\n * @param config The keras-format serialization object to be processed\n *   (in place).\n */\nfunction convertNDArrayScalarsInConfig(config) {\n  if (config == null || typeof config !== 'object') {\n    return;\n  } else if (Array.isArray(config)) {\n    config.forEach(configItem => convertNDArrayScalarsInConfig(configItem));\n  } else {\n    const fields = Object.keys(config);\n    for (const field of fields) {\n      const value = config[field];\n      if (value != null && typeof value === 'object') {\n        if (!Array.isArray(value) && value['type'] === 'ndarray' && typeof value['value'] === 'number') {\n          config[field] = value['value'];\n        } else {\n          convertNDArrayScalarsInConfig(value);\n        }\n      }\n    }\n  }\n}\n/**\n * Deserialize a saved Keras Object\n * @param identifier either a string ID or a saved Keras dictionary\n * @param moduleObjects a list of Python class names to object constructors\n * @param customObjects a list of Python class names to object constructors\n * @param printableModuleName debug text for the object being reconstituted\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns a TensorFlow.js Layers object\n */\n// tslint:disable:no-any\nexport function deserializeKerasObject(identifier) {\n  let moduleObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customObjects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let printableModuleName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'object';\n  let fastWeightInit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  // tslint:enable\n  if (typeof identifier === 'string') {\n    const functionName = identifier;\n    let fn;\n    if (functionName in customObjects) {\n      fn = customObjects[functionName];\n    } else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {\n      fn = _GLOBAL_CUSTOM_OBJECTS[functionName];\n    } else {\n      fn = moduleObjects[functionName];\n      if (fn == null) {\n        throw new ValueError(`Unknown ${printableModuleName}: ${identifier}. ` + `This may be due to one of the following reasons:\\n` + `1. The ${printableModuleName} is defined in Python, in which ` + `case it needs to be ported to TensorFlow.js or your JavaScript ` + `code.\\n` + `2. The custom ${printableModuleName} is defined in JavaScript, ` + `but is not registered properly with ` + `tf.serialization.registerClass().`);\n        // TODO(cais): Add link to tutorial page on custom layers.\n      }\n    }\n\n    return fn;\n  } else {\n    // In this case we are dealing with a Keras config dictionary.\n    const config = identifier;\n    if (config['className'] == null || config['config'] == null) {\n      throw new ValueError(`${printableModuleName}: Improper config format: ` + `${JSON.stringify(config)}.\\n` + `'className' and 'config' must set.`);\n    }\n    const className = config['className'];\n    let cls, fromConfig;\n    if (className in customObjects) {\n      [cls, fromConfig] = customObjects[className];\n    } else if (className in _GLOBAL_CUSTOM_OBJECTS) {\n      [cls, fromConfig] = _GLOBAL_CUSTOM_OBJECTS['className'];\n    } else if (className in moduleObjects) {\n      [cls, fromConfig] = moduleObjects[className];\n    }\n    if (cls == null) {\n      throw new ValueError(`Unknown ${printableModuleName}: ${className}. ` + `This may be due to one of the following reasons:\\n` + `1. The ${printableModuleName} is defined in Python, in which ` + `case it needs to be ported to TensorFlow.js or your JavaScript ` + `code.\\n` + `2. The custom ${printableModuleName} is defined in JavaScript, ` + `but is not registered properly with ` + `tf.serialization.registerClass().`);\n      // TODO(cais): Add link to tutorial page on custom layers.\n    }\n\n    if (fromConfig != null) {\n      // Porting notes: Instead of checking to see whether fromConfig accepts\n      // customObjects, we create a customObjects dictionary and tack it on to\n      // config['config'] as config['config'].customObjects. Objects can use it,\n      // if they want.\n      // tslint:disable-next-line:no-any\n      const customObjectsCombined = {};\n      for (const key of Object.keys(_GLOBAL_CUSTOM_OBJECTS)) {\n        customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];\n      }\n      for (const key of Object.keys(customObjects)) {\n        customObjectsCombined[key] = customObjects[key];\n      }\n      // Add the customObjects to config\n      const nestedConfig = config['config'];\n      nestedConfig['customObjects'] = customObjectsCombined;\n      const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n      convertNDArrayScalarsInConfig(config['config']);\n      const returnObj = fromConfig(cls, config['config'], customObjects, fastWeightInit);\n      _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n      return returnObj;\n    } else {\n      // Then `cls` may be a function returning a class.\n      // In this case by convention `config` holds\n      // the kwargs of the function.\n      const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n      // In python this is **config['config'], for tfjs-layers we require\n      // classes that use this fall-through construction method to take\n      // a config interface that mimics the expansion of named parameters.\n      const returnObj = new cls(config['config']);\n      _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n      return returnObj;\n    }\n  }\n}\n/**\n * Compares two numbers for sorting.\n * @param a\n * @param b\n */\nexport function numberCompare(a, b) {\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n/**\n * Comparison of two numbers for reverse sorting.\n * @param a\n * @param b\n */\nexport function reverseNumberCompare(a, b) {\n  return -1 * numberCompare(a, b);\n}\n/**\n * Convert a string into the corresponding DType.\n * @param dtype\n * @returns An instance of DType.\n */\nexport function stringToDType(dtype) {\n  switch (dtype) {\n    case 'float32':\n      return 'float32';\n    default:\n      throw new ValueError(`Invalid dtype: ${dtype}`);\n  }\n}\n/**\n * Test the element-by-element equality of two Arrays of strings.\n * @param xs First array of strings.\n * @param ys Second array of strings.\n * @returns Wether the two arrays are all equal, element by element.\n */\nexport function stringsEqual(xs, ys) {\n  if (xs == null || ys == null) {\n    return xs === ys;\n  }\n  if (xs.length !== ys.length) {\n    return false;\n  }\n  for (let i = 0; i < xs.length; ++i) {\n    if (xs[i] !== ys[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Get the unique elements of an array.\n * @param xs Array.\n * @returns An Array consisting of the unique elements in `xs`.\n */\nexport function unique(xs) {\n  if (xs == null) {\n    return xs;\n  }\n  const out = [];\n  // TODO(cais): Maybe improve performance by sorting.\n  for (const x of xs) {\n    if (out.indexOf(x) === -1) {\n      out.push(x);\n    }\n  }\n  return out;\n}\n/**\n * Determine if an Object is empty (i.e., does not have own properties).\n * @param obj Object\n * @returns Whether the Object is empty.\n * @throws ValueError: If object is `null` or `undefined`.\n */\nexport function isObjectEmpty(obj) {\n  if (obj == null) {\n    throw new ValueError(`Invalid value in obj: ${JSON.stringify(obj)}`);\n  }\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Helper function used to build type union/enum run-time checkers.\n * @param values The list of allowed values.\n * @param label A string name for the type\n * @param value The value to test.\n * @throws ValueError: If the value is not in values nor `undefined`/`null`.\n */\nexport function checkStringTypeUnionValue(values, label, value) {\n  if (value == null) {\n    return;\n  }\n  if (values.indexOf(value) < 0) {\n    throw new ValueError(`${value} is not a valid ${label}.  Valid values are ${values} or null/undefined.`);\n  }\n}\n/**\n * Helper function for verifying the types of inputs.\n *\n * Ensures that the elements of `x` are all of type `expectedType`.\n * Also verifies that the length of `x` is within bounds.\n *\n * @param x Object to test.\n * @param expectedType The string expected type of all of the elements in the\n * Array.\n * @param minLength Return false if x.length is less than this.\n * @param maxLength Return false if x.length is greater than this.\n * @returns true if and only if `x` is an `Array<expectedType>` with\n * length >= `minLength` and <= `maxLength`.\n */\n// tslint:disable:no-any\nexport function checkArrayTypeAndLength(x, expectedType) {\n  let minLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let maxLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;\n  assert(minLength >= 0);\n  assert(maxLength >= minLength);\n  return Array.isArray(x) && x.length >= minLength && x.length <= maxLength && x.every(e => typeof e === expectedType);\n}\n// tslint:enable:no-any\n/**\n * Assert that a value or an array of value are positive integer.\n *\n * @param value The value being asserted on. May be a single number or an array\n *   of numbers.\n * @param name Name of the value, used to make the error message.\n */\nexport function assertPositiveInteger(value, name) {\n  if (Array.isArray(value)) {\n    util.assert(value.length > 0, () => `${name} is unexpectedly an empty array.`);\n    value.forEach((v, i) => assertPositiveInteger(v, `element ${i + 1} of ${name}`));\n  } else {\n    util.assert(Number.isInteger(value) && value > 0, () => `Expected ${name} to be a positive integer, but got ` + `${formatAsFriendlyString(value)}.`);\n  }\n}\n/**\n * Format a value into a display-friendly, human-readable fashion.\n *\n * - `null` is formatted as `'null'`\n * - Strings are formated with flanking pair of quotes.\n * - Arrays are formatted with flanking pair of square brackets.\n *\n * @param value The value to display.\n * @return Formatted string.\n */\n// tslint:disable-next-line:no-any\nexport function formatAsFriendlyString(value) {\n  if (value === null) {\n    return 'null';\n  } else if (Array.isArray(value)) {\n    return '[' + value.map(v => formatAsFriendlyString(v)).join(',') + ']';\n  } else if (typeof value === 'string') {\n    return `\"${value}\"`;\n  } else {\n    return `${value}`;\n  }\n}\n/**\n * Returns a function `f2` (decorator) which wraps the original function\n * `f`. `f2` guarantees that `f` can be called at most once\n * every `waitMs` ms. If `f2` is called more often, it will return\n * the last returned result of `f`.\n *\n * @param f The original function `f` to wrap.\n * @param waitMs The time between two consecutive calls to `f` in ms.\n */\nexport function debounce(f, waitMs, nowFunc) {\n  let lastTime = nowFunc != null ? nowFunc() : util.now();\n  let lastResult;\n  const f2 = function () {\n    const now = nowFunc != null ? nowFunc() : util.now();\n    if (now - lastTime < waitMs) {\n      return lastResult;\n    }\n    lastTime = now;\n    lastResult = f(...arguments);\n    return lastResult;\n  };\n  return f2;\n}\n/**\n * Returns the fusable activation given a layers identifier.\n *\n * @param activationName The layers identifier string.\n * @return The name of the fusable activation.\n */\nexport function mapActivationToFusedKernel(activationName) {\n  if (activationName === 'relu') {\n    return 'relu';\n  }\n  if (activationName === 'linear') {\n    return 'linear';\n  }\n  if (activationName === 'elu') {\n    return 'elu';\n  }\n  return null;\n}\n/**\n * Returns the cartesian product of sets of values.\n * This works the same as itertools.product in Python.\n *\n * Example:\n *\n * filters = [128, 256, 512]\n * paddings = ['same', 'valid']\n *\n * product = [ [128, 'same'], [128, 'valid'], [256, 'same'], [256, 'valid'],\n * [512, 'same'], [512, 'valid']]\n *\n * @param arrayOfValues List/array of values.\n * @return The cartesian product.\n */\nexport function getCartesianProductOfValues() {\n  for (var _len = arguments.length, arrayOfValues = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrayOfValues[_key] = arguments[_key];\n  }\n  assert(arrayOfValues.length > 0, 'arrayOfValues is empty');\n  for (const values of arrayOfValues) {\n    assert(Array.isArray(values), 'one of the values is not an array');\n    assert(values.length > 0, 'one of the values is empty');\n  }\n  return arrayOfValues.reduce((products, values) => {\n    if (products.length === 0) {\n      return values.map(value => [value]);\n    }\n    return values.map(value => {\n      return products.map(prevValue => [...prevValue, value]);\n    }).reduce((flattenedProduct, unflattenedProduct) => {\n      return flattenedProduct.concat(unflattenedProduct);\n    }, []);\n  }, []);\n}","map":{"version":3,"sources":["../../../../../../tfjs-layers/src/utils/generic_utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: utils/generic_utils.py */\n\nimport {DataType, fused, serialization, util} from '@tensorflow/tfjs-core';\n\nimport {AssertionError, ValueError} from '../errors';\n\n// tslint:enable\n\n/**\n * If `value` is an Array, equivalent to Python's `value * numValues`.\n * If `value` is not an Array, equivalent to Python's `[value] * numValues`\n */\n// tslint:disable-next-line:no-any\nexport function pyListRepeat(value: any, numValues: number): any[] {\n  if (Array.isArray(value)) {\n    // tslint:disable-next-line:no-any\n    let newArray: any[] = [];\n    for (let i = 0; i < numValues; i++) {\n      newArray = newArray.concat(value);\n    }\n    return newArray;\n  } else {\n    const newArray = new Array(numValues);\n    newArray.fill(value);\n    return newArray;\n  }\n}\n\nexport function assert(val: boolean, message?: string): void {\n  if (!val) {\n    throw new AssertionError(message);\n  }\n}\n\n/**\n * Count the number of elements of the `array` that are equal to `reference`.\n */\nexport function count<T>(array: T[], refernce: T) {\n  let counter = 0;\n  for (const item of array) {\n    if (item === refernce) {\n      counter++;\n    }\n  }\n  return counter;\n}\n\n/**\n * If an array is of length 1, just return the first element. Otherwise, return\n * the full array.\n * @param tensors\n */\nexport function singletonOrArray<T>(xs: T[]): T|T[] {\n  if (xs.length === 1) {\n    return xs[0];\n  }\n  return xs;\n}\n\n/**\n * Normalizes a list/tensor into a list.\n *\n * If a tensor is passed, we return\n * a list of size 1 containing the tensor.\n *\n * @param x target object to be normalized.\n */\n// tslint:disable-next-line:no-any\nexport function toList(x: any): any[] {\n  if (Array.isArray(x)) {\n    return x;\n  }\n  return [x];\n}\n\n/**\n * Generate a UID for a list\n */\n// tslint:disable-next-line:no-any\nexport function objectListUid(objs: any|any[]): string {\n  const objectList = toList(objs);\n  let retVal = '';\n  for (const obj of objectList) {\n    if (obj.id == null) {\n      throw new ValueError(\n          `Object ${obj} passed to objectListUid without an id`);\n    }\n    if (retVal !== '') {\n      retVal = retVal + ', ';\n    }\n    retVal = `${retVal}${Math.abs(obj.id)}`;\n  }\n  return retVal;\n}\n/**\n * Converts string to snake-case.\n * @param name\n */\nexport function toSnakeCase(name: string): string {\n  const intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');\n  const insecure =\n      intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n  /*\n   If the class is private the name starts with \"_\" which is not secure\n   for creating scopes. We prefix the name with \"private\" in this case.\n   */\n  if (insecure[0] !== '_') {\n    return insecure;\n  }\n  return 'private' + insecure;\n}\n\nexport function toCamelCase(identifier: string): string {\n  // quick return for empty string or single character strings\n  if (identifier.length <= 1) {\n    return identifier;\n  }\n  // Check for the underscore indicating snake_case\n  if (identifier.indexOf('_') === -1) {\n    return identifier;\n  }\n  return identifier.replace(/[_]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n}\n\n// tslint:disable-next-line:no-any\nlet _GLOBAL_CUSTOM_OBJECTS = {} as {[objName: string]: any};\n\nexport function serializeKerasObject(instance: serialization.Serializable):\n    serialization.ConfigDictValue {\n  if (instance === null || instance === undefined) {\n    return null;\n  }\n  const dict: serialization.ConfigDictValue = {};\n  dict['className'] = instance.getClassName();\n  dict['config'] = instance.getConfig();\n  return dict;\n}\n\n/**\n * Replace ndarray-style scalar objects in serialization objects with numbers.\n *\n * Background: In some versions of tf.keras, certain scalar values in the HDF5\n * model save file can be serialized as: `{'type': 'ndarray', 'value': num}`,\n * where in `num` is a plain number. This method converts such serialization\n * to a `number`.\n *\n * @param config The keras-format serialization object to be processed\n *   (in place).\n */\nfunction convertNDArrayScalarsInConfig(config: serialization.ConfigDictValue):\n    void {\n  if (config == null || typeof config !== 'object') {\n    return;\n  } else if (Array.isArray(config)) {\n    config.forEach(configItem => convertNDArrayScalarsInConfig(configItem));\n  } else {\n    const fields = Object.keys(config);\n    for (const field of fields) {\n      const value = config[field];\n      if (value != null && typeof value === 'object') {\n        if (!Array.isArray(value) && value['type'] === 'ndarray' &&\n            typeof value['value'] === 'number') {\n          config[field] = value['value'];\n        } else {\n          convertNDArrayScalarsInConfig(value as serialization.ConfigDict);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Deserialize a saved Keras Object\n * @param identifier either a string ID or a saved Keras dictionary\n * @param moduleObjects a list of Python class names to object constructors\n * @param customObjects a list of Python class names to object constructors\n * @param printableModuleName debug text for the object being reconstituted\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns a TensorFlow.js Layers object\n */\n// tslint:disable:no-any\nexport function deserializeKerasObject(\n    identifier: string|serialization.ConfigDict,\n    moduleObjects = {} as {[objName: string]: any},\n    customObjects = {} as {[objName: string]: any},\n    printableModuleName = 'object', fastWeightInit = false): any {\n  // tslint:enable\n  if (typeof identifier === 'string') {\n    const functionName = identifier;\n    let fn;\n    if (functionName in customObjects) {\n      fn = customObjects[functionName];\n    } else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {\n      fn = _GLOBAL_CUSTOM_OBJECTS[functionName];\n    } else {\n      fn = moduleObjects[functionName];\n      if (fn == null) {\n        throw new ValueError(\n            `Unknown ${printableModuleName}: ${identifier}. ` +\n            `This may be due to one of the following reasons:\\n` +\n            `1. The ${printableModuleName} is defined in Python, in which ` +\n            `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n            `code.\\n` +\n            `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n            `but is not registered properly with ` +\n            `tf.serialization.registerClass().`);\n        // TODO(cais): Add link to tutorial page on custom layers.\n      }\n    }\n    return fn;\n  } else {\n    // In this case we are dealing with a Keras config dictionary.\n    const config = identifier;\n    if (config['className'] == null || config['config'] == null) {\n      throw new ValueError(\n          `${printableModuleName}: Improper config format: ` +\n          `${JSON.stringify(config)}.\\n` +\n          `'className' and 'config' must set.`);\n    }\n    const className = config['className'] as string;\n    let cls, fromConfig;\n    if (className in customObjects) {\n      [cls, fromConfig] = customObjects[className];\n    } else if (className in _GLOBAL_CUSTOM_OBJECTS) {\n      [cls, fromConfig] = _GLOBAL_CUSTOM_OBJECTS['className'];\n    } else if (className in moduleObjects) {\n      [cls, fromConfig] = moduleObjects[className];\n    }\n    if (cls == null) {\n      throw new ValueError(\n          `Unknown ${printableModuleName}: ${className}. ` +\n          `This may be due to one of the following reasons:\\n` +\n          `1. The ${printableModuleName} is defined in Python, in which ` +\n          `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n          `code.\\n` +\n          `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n          `but is not registered properly with ` +\n          `tf.serialization.registerClass().`);\n      // TODO(cais): Add link to tutorial page on custom layers.\n    }\n    if (fromConfig != null) {\n      // Porting notes: Instead of checking to see whether fromConfig accepts\n      // customObjects, we create a customObjects dictionary and tack it on to\n      // config['config'] as config['config'].customObjects. Objects can use it,\n      // if they want.\n\n      // tslint:disable-next-line:no-any\n      const customObjectsCombined = {} as {[objName: string]: any};\n      for (const key of Object.keys(_GLOBAL_CUSTOM_OBJECTS)) {\n        customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];\n      }\n      for (const key of Object.keys(customObjects)) {\n        customObjectsCombined[key] = customObjects[key];\n      }\n      // Add the customObjects to config\n      const nestedConfig = config['config'] as serialization.ConfigDict;\n      nestedConfig['customObjects'] = customObjectsCombined;\n\n      const backupCustomObjects = {..._GLOBAL_CUSTOM_OBJECTS};\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n      convertNDArrayScalarsInConfig(config['config']);\n      const returnObj =\n          fromConfig(cls, config['config'], customObjects, fastWeightInit);\n      _GLOBAL_CUSTOM_OBJECTS = {...backupCustomObjects};\n\n      return returnObj;\n    } else {\n      // Then `cls` may be a function returning a class.\n      // In this case by convention `config` holds\n      // the kwargs of the function.\n      const backupCustomObjects = {..._GLOBAL_CUSTOM_OBJECTS};\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n      // In python this is **config['config'], for tfjs-layers we require\n      // classes that use this fall-through construction method to take\n      // a config interface that mimics the expansion of named parameters.\n      const returnObj = new cls(config['config']);\n      _GLOBAL_CUSTOM_OBJECTS = {...backupCustomObjects};\n      return returnObj;\n    }\n  }\n}\n\n/**\n * Compares two numbers for sorting.\n * @param a\n * @param b\n */\nexport function numberCompare(a: number, b: number) {\n  return (a < b) ? -1 : ((a > b) ? 1 : 0);\n}\n\n/**\n * Comparison of two numbers for reverse sorting.\n * @param a\n * @param b\n */\nexport function reverseNumberCompare(a: number, b: number) {\n  return -1 * numberCompare(a, b);\n}\n\n/**\n * Convert a string into the corresponding DType.\n * @param dtype\n * @returns An instance of DType.\n */\nexport function stringToDType(dtype: string): DataType {\n  switch (dtype) {\n    case 'float32':\n      return 'float32';\n    default:\n      throw new ValueError(`Invalid dtype: ${dtype}`);\n  }\n}\n\n/**\n * Test the element-by-element equality of two Arrays of strings.\n * @param xs First array of strings.\n * @param ys Second array of strings.\n * @returns Wether the two arrays are all equal, element by element.\n */\nexport function stringsEqual(xs: string[], ys: string[]): boolean {\n  if (xs == null || ys == null) {\n    return xs === ys;\n  }\n  if (xs.length !== ys.length) {\n    return false;\n  }\n  for (let i = 0; i < xs.length; ++i) {\n    if (xs[i] !== ys[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Get the unique elements of an array.\n * @param xs Array.\n * @returns An Array consisting of the unique elements in `xs`.\n */\nexport function unique<T>(xs: T[]): T[] {\n  if (xs == null) {\n    return xs;\n  }\n  const out: T[] = [];\n  // TODO(cais): Maybe improve performance by sorting.\n  for (const x of xs) {\n    if (out.indexOf(x) === -1) {\n      out.push(x);\n    }\n  }\n  return out;\n}\n\n/**\n * Determine if an Object is empty (i.e., does not have own properties).\n * @param obj Object\n * @returns Whether the Object is empty.\n * @throws ValueError: If object is `null` or `undefined`.\n */\nexport function isObjectEmpty(obj: {}): boolean {\n  if (obj == null) {\n    throw new ValueError(`Invalid value in obj: ${JSON.stringify(obj)}`);\n  }\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Helper function used to build type union/enum run-time checkers.\n * @param values The list of allowed values.\n * @param label A string name for the type\n * @param value The value to test.\n * @throws ValueError: If the value is not in values nor `undefined`/`null`.\n */\nexport function checkStringTypeUnionValue(\n    values: string[], label: string, value: string): void {\n  if (value == null) {\n    return;\n  }\n  if (values.indexOf(value) < 0) {\n    throw new ValueError(`${value} is not a valid ${label}.  Valid values are ${\n        values} or null/undefined.`);\n  }\n}\n\n/**\n * Helper function for verifying the types of inputs.\n *\n * Ensures that the elements of `x` are all of type `expectedType`.\n * Also verifies that the length of `x` is within bounds.\n *\n * @param x Object to test.\n * @param expectedType The string expected type of all of the elements in the\n * Array.\n * @param minLength Return false if x.length is less than this.\n * @param maxLength Return false if x.length is greater than this.\n * @returns true if and only if `x` is an `Array<expectedType>` with\n * length >= `minLength` and <= `maxLength`.\n */\n// tslint:disable:no-any\nexport function checkArrayTypeAndLength(\n    x: any, expectedType: string, minLength = 0,\n    maxLength = Infinity): boolean {\n  assert(minLength >= 0);\n  assert(maxLength >= minLength);\n  return (\n      Array.isArray(x) && x.length >= minLength && x.length <= maxLength &&\n      x.every(e => typeof e === expectedType));\n}\n// tslint:enable:no-any\n\n/**\n * Assert that a value or an array of value are positive integer.\n *\n * @param value The value being asserted on. May be a single number or an array\n *   of numbers.\n * @param name Name of the value, used to make the error message.\n */\nexport function assertPositiveInteger(value: number|number[], name: string) {\n  if (Array.isArray(value)) {\n    util.assert(\n        value.length > 0, () => `${name} is unexpectedly an empty array.`);\n    value.forEach(\n        (v, i) => assertPositiveInteger(v, `element ${i + 1} of ${name}`));\n  } else {\n    util.assert(\n        Number.isInteger(value) && value > 0,\n        () => `Expected ${name} to be a positive integer, but got ` +\n            `${formatAsFriendlyString(value)}.`);\n  }\n}\n\n/**\n * Format a value into a display-friendly, human-readable fashion.\n *\n * - `null` is formatted as `'null'`\n * - Strings are formated with flanking pair of quotes.\n * - Arrays are formatted with flanking pair of square brackets.\n *\n * @param value The value to display.\n * @return Formatted string.\n */\n// tslint:disable-next-line:no-any\nexport function formatAsFriendlyString(value: any): string {\n  if (value === null) {\n    return 'null';\n  } else if (Array.isArray(value)) {\n    return '[' + value.map(v => formatAsFriendlyString(v)).join(',') + ']';\n  } else if (typeof value === 'string') {\n    return `\"${value}\"`;\n  } else {\n    return `${value}`;\n  }\n}\n\n/**\n * Returns a function `f2` (decorator) which wraps the original function\n * `f`. `f2` guarantees that `f` can be called at most once\n * every `waitMs` ms. If `f2` is called more often, it will return\n * the last returned result of `f`.\n *\n * @param f The original function `f` to wrap.\n * @param waitMs The time between two consecutive calls to `f` in ms.\n */\nexport function debounce<T>(\n    f: (...args: Array<{}>) => T, waitMs: number,\n    nowFunc?: Function): (...args: Array<{}>) => T {\n  let lastTime = nowFunc != null ? nowFunc() : util.now();\n  let lastResult: T;\n  const f2 = (...args: Array<{}>) => {\n    const now = nowFunc != null ? nowFunc() : util.now();\n    if (now - lastTime < waitMs) {\n      return lastResult;\n    }\n    lastTime = now;\n    lastResult = f(...args);\n    return lastResult;\n  };\n  return f2;\n}\n\n/**\n * Returns the fusable activation given a layers identifier.\n *\n * @param activationName The layers identifier string.\n * @return The name of the fusable activation.\n */\nexport function mapActivationToFusedKernel(activationName: string):\n    fused.Activation {\n  if (activationName === 'relu') {\n    return 'relu';\n  }\n  if (activationName === 'linear') {\n    return 'linear';\n  }\n  if (activationName === 'elu') {\n    return 'elu';\n  }\n  return null;\n}\n\ntype PossibleValues = Array<Array<boolean|string|number>>;\n\n/**\n * Returns the cartesian product of sets of values.\n * This works the same as itertools.product in Python.\n *\n * Example:\n *\n * filters = [128, 256, 512]\n * paddings = ['same', 'valid']\n *\n * product = [ [128, 'same'], [128, 'valid'], [256, 'same'], [256, 'valid'],\n * [512, 'same'], [512, 'valid']]\n *\n * @param arrayOfValues List/array of values.\n * @return The cartesian product.\n */\nexport function getCartesianProductOfValues(...arrayOfValues: PossibleValues):\n    PossibleValues {\n  assert(arrayOfValues.length > 0, 'arrayOfValues is empty');\n\n  for (const values of arrayOfValues) {\n    assert(Array.isArray(values), 'one of the values is not an array');\n    assert(values.length > 0, 'one of the values is empty');\n  }\n\n  return arrayOfValues.reduce((products, values) => {\n    if (products.length === 0) {\n      return values.map(value => [value]);\n    }\n\n    return values\n        .map(value => {\n          return products.map((prevValue) => [...prevValue, value]);\n        })\n        .reduce((flattenedProduct, unflattenedProduct) => {\n          return flattenedProduct.concat(unflattenedProduct);\n        }, []);\n  }, [] as PossibleValues);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}