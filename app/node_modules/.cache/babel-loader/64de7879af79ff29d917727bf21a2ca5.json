{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { basename, concatenateArrayBuffers, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\nfunction defer(f) {\n  return new Promise(resolve => setTimeout(resolve)).then(f);\n}\nexport class BrowserDownloads {\n  constructor(fileNamePrefix) {\n    if (!env().getBool('IS_BROWSER')) {\n      // TODO(cais): Provide info on what IOHandlers are available under the\n      //   current environment.\n      throw new Error('browserDownloads() cannot proceed because the current environment ' + 'is not a browser.');\n    }\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n    this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName = fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n  async save(modelArtifacts) {\n    if (typeof document === 'undefined') {\n      throw new Error('Browser downloads are not supported in ' + 'this environment since `document` is not present');\n    }\n    const weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], {\n      type: 'application/octet-stream'\n    }));\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error('BrowserDownloads.save() does not support saving model topology ' + 'in binary formats yet.');\n    } else {\n      const weightsManifest = [{\n        paths: ['./' + this.weightDataFileName],\n        weights: modelArtifacts.weightSpecs\n      }];\n      const modelTopologyAndWeightManifest = {\n        modelTopology: modelArtifacts.modelTopology,\n        format: modelArtifacts.format,\n        generatedBy: modelArtifacts.generatedBy,\n        convertedBy: modelArtifacts.convertedBy,\n        weightsManifest\n      };\n      if (modelArtifacts.signature != null) {\n        modelTopologyAndWeightManifest.signature = modelArtifacts.signature;\n      }\n      if (modelArtifacts.userDefinedMetadata != null) {\n        modelTopologyAndWeightManifest.userDefinedMetadata = modelArtifacts.userDefinedMetadata;\n      }\n      if (modelArtifacts.modelInitializer != null) {\n        modelTopologyAndWeightManifest.modelInitializer = modelArtifacts.modelInitializer;\n      }\n      const modelTopologyAndWeightManifestURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelTopologyAndWeightManifest)], {\n        type: 'application/json'\n      }));\n      // If anchor elements are not provided, create them without attaching them\n      // to parents, so that the downloaded file names can be controlled.\n      const jsonAnchor = this.jsonAnchor == null ? document.createElement('a') : this.jsonAnchor;\n      jsonAnchor.download = this.modelTopologyFileName;\n      jsonAnchor.href = modelTopologyAndWeightManifestURL;\n      // Trigger downloads by evoking a click event on the download anchors.\n      // When multiple downloads are started synchronously, Firefox will only\n      // save the last one.\n      await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n      if (modelArtifacts.weightData != null) {\n        const weightDataAnchor = this.weightDataAnchor == null ? document.createElement('a') : this.weightDataAnchor;\n        weightDataAnchor.download = this.weightDataFileName;\n        weightDataAnchor.href = weightsURL;\n        await defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n      }\n      return {\n        modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts)\n      };\n    }\n  }\n}\nBrowserDownloads.URL_SCHEME = 'downloads://';\nclass BrowserFiles {\n  constructor(files) {\n    if (files == null || files.length < 1) {\n      throw new Error(`When calling browserFiles, at least 1 file is required, ` + `but received ${files}`);\n    }\n    this.files = files;\n  }\n  async load() {\n    const jsonFile = this.files[0];\n    const weightFiles = this.files.slice(1);\n    return new Promise((resolve, reject) => {\n      const jsonReader = new FileReader();\n      jsonReader.onload = event => {\n        // tslint:disable-next-line:no-any\n        const modelJSON = JSON.parse(event.target.result);\n        const modelTopology = modelJSON.modelTopology;\n        if (modelTopology == null) {\n          reject(new Error(`modelTopology field is missing from file ${jsonFile.name}`));\n          return;\n        }\n        if (weightFiles.length === 0) {\n          resolve({\n            modelTopology\n          });\n        }\n        const weightsManifest = modelJSON.weightsManifest;\n        if (weightsManifest == null) {\n          reject(new Error(`weightManifest field is missing from file ${jsonFile.name}`));\n          return;\n        }\n        let pathToFile;\n        try {\n          pathToFile = this.checkManifestAndWeightFiles(weightsManifest, weightFiles);\n        } catch (err) {\n          reject(err);\n          return;\n        }\n        const weightSpecs = [];\n        const paths = [];\n        const perFileBuffers = [];\n        weightsManifest.forEach(weightsGroup => {\n          weightsGroup.paths.forEach(path => {\n            paths.push(path);\n            perFileBuffers.push(null);\n          });\n          weightSpecs.push(...weightsGroup.weights);\n        });\n        weightsManifest.forEach(weightsGroup => {\n          weightsGroup.paths.forEach(path => {\n            const weightFileReader = new FileReader();\n            weightFileReader.onload = event => {\n              // tslint:disable-next-line:no-any\n              const weightData = event.target.result;\n              const index = paths.indexOf(path);\n              perFileBuffers[index] = weightData;\n              if (perFileBuffers.indexOf(null) === -1) {\n                const result = {\n                  modelTopology,\n                  weightSpecs,\n                  weightData: concatenateArrayBuffers(perFileBuffers),\n                  format: modelJSON.format,\n                  generatedBy: modelJSON.generatedBy,\n                  convertedBy: modelJSON.convertedBy\n                };\n                if (modelJSON.signature != null) {\n                  result.signature = modelJSON.signature;\n                }\n                if (modelJSON.userDefinedMetadata != null) {\n                  result.userDefinedMetadata = modelJSON.userDefinedMetadata;\n                }\n                if (modelJSON.modelInitializer != null) {\n                  result.modelInitializer = modelJSON.modelInitializer;\n                }\n                resolve(result);\n              }\n            };\n            weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);\n            weightFileReader.readAsArrayBuffer(pathToFile[path]);\n          });\n        });\n      };\n      jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` + `from file '${jsonFile.name}'. BrowserFiles supports loading ` + `Keras-style tf.Model artifacts only.`);\n      jsonReader.readAsText(jsonFile);\n    });\n  }\n  /**\n   * Check the compatibility between weights manifest and weight files.\n   */\n  checkManifestAndWeightFiles(manifest, files) {\n    const basenames = [];\n    const fileNames = files.map(file => basename(file.name));\n    const pathToFile = {};\n    for (const group of manifest) {\n      group.paths.forEach(path => {\n        const pathBasename = basename(path);\n        if (basenames.indexOf(pathBasename) !== -1) {\n          throw new Error(`Duplicate file basename found in weights manifest: ` + `'${pathBasename}'`);\n        }\n        basenames.push(pathBasename);\n        if (fileNames.indexOf(pathBasename) === -1) {\n          throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);\n        } else {\n          pathToFile[path] = files[fileNames.indexOf(pathBasename)];\n        }\n      });\n    }\n    if (basenames.length !== files.length) {\n      throw new Error(`Mismatch in the number of files in weights manifest ` + `(${basenames.length}) and the number of weight files provided ` + `(${files.length}).`);\n    }\n    return pathToFile;\n  }\n}\nexport const browserDownloadsRouter = url => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads() {\n  let fileNamePrefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'model';\n  return new BrowserDownloads(fileNamePrefix);\n}\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, One or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files) {\n  return new BrowserFiles(files);\n}","map":{"version":3,"sources":["../../src/io/browser_files.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { basename, concatenateArrayBuffers, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\nfunction defer(f) {\n    return new Promise(resolve => setTimeout(resolve)).then(f);\n}\nexport class BrowserDownloads {\n    constructor(fileNamePrefix) {\n        if (!env().getBool('IS_BROWSER')) {\n            // TODO(cais): Provide info on what IOHandlers are available under the\n            //   current environment.\n            throw new Error('browserDownloads() cannot proceed because the current environment ' +\n                'is not a browser.');\n        }\n        if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n            fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n        }\n        if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n            fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n        }\n        this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n        this.weightDataFileName =\n            fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n    }\n    async save(modelArtifacts) {\n        if (typeof (document) === 'undefined') {\n            throw new Error('Browser downloads are not supported in ' +\n                'this environment since `document` is not present');\n        }\n        const weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], { type: 'application/octet-stream' }));\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserDownloads.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        else {\n            const weightsManifest = [{\n                    paths: ['./' + this.weightDataFileName],\n                    weights: modelArtifacts.weightSpecs\n                }];\n            const modelTopologyAndWeightManifest = {\n                modelTopology: modelArtifacts.modelTopology,\n                format: modelArtifacts.format,\n                generatedBy: modelArtifacts.generatedBy,\n                convertedBy: modelArtifacts.convertedBy,\n                weightsManifest\n            };\n            if (modelArtifacts.signature != null) {\n                modelTopologyAndWeightManifest.signature = modelArtifacts.signature;\n            }\n            if (modelArtifacts.userDefinedMetadata != null) {\n                modelTopologyAndWeightManifest.userDefinedMetadata =\n                    modelArtifacts.userDefinedMetadata;\n            }\n            if (modelArtifacts.modelInitializer != null) {\n                modelTopologyAndWeightManifest.modelInitializer =\n                    modelArtifacts.modelInitializer;\n            }\n            const modelTopologyAndWeightManifestURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelTopologyAndWeightManifest)], { type: 'application/json' }));\n            // If anchor elements are not provided, create them without attaching them\n            // to parents, so that the downloaded file names can be controlled.\n            const jsonAnchor = this.jsonAnchor == null ? document.createElement('a') :\n                this.jsonAnchor;\n            jsonAnchor.download = this.modelTopologyFileName;\n            jsonAnchor.href = modelTopologyAndWeightManifestURL;\n            // Trigger downloads by evoking a click event on the download anchors.\n            // When multiple downloads are started synchronously, Firefox will only\n            // save the last one.\n            await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n            if (modelArtifacts.weightData != null) {\n                const weightDataAnchor = this.weightDataAnchor == null ?\n                    document.createElement('a') :\n                    this.weightDataAnchor;\n                weightDataAnchor.download = this.weightDataFileName;\n                weightDataAnchor.href = weightsURL;\n                await defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n            }\n            return { modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts) };\n        }\n    }\n}\nBrowserDownloads.URL_SCHEME = 'downloads://';\nclass BrowserFiles {\n    constructor(files) {\n        if (files == null || files.length < 1) {\n            throw new Error(`When calling browserFiles, at least 1 file is required, ` +\n                `but received ${files}`);\n        }\n        this.files = files;\n    }\n    async load() {\n        const jsonFile = this.files[0];\n        const weightFiles = this.files.slice(1);\n        return new Promise((resolve, reject) => {\n            const jsonReader = new FileReader();\n            jsonReader.onload = (event) => {\n                // tslint:disable-next-line:no-any\n                const modelJSON = JSON.parse(event.target.result);\n                const modelTopology = modelJSON.modelTopology;\n                if (modelTopology == null) {\n                    reject(new Error(`modelTopology field is missing from file ${jsonFile.name}`));\n                    return;\n                }\n                if (weightFiles.length === 0) {\n                    resolve({ modelTopology });\n                }\n                const weightsManifest = modelJSON.weightsManifest;\n                if (weightsManifest == null) {\n                    reject(new Error(`weightManifest field is missing from file ${jsonFile.name}`));\n                    return;\n                }\n                let pathToFile;\n                try {\n                    pathToFile =\n                        this.checkManifestAndWeightFiles(weightsManifest, weightFiles);\n                }\n                catch (err) {\n                    reject(err);\n                    return;\n                }\n                const weightSpecs = [];\n                const paths = [];\n                const perFileBuffers = [];\n                weightsManifest.forEach(weightsGroup => {\n                    weightsGroup.paths.forEach(path => {\n                        paths.push(path);\n                        perFileBuffers.push(null);\n                    });\n                    weightSpecs.push(...weightsGroup.weights);\n                });\n                weightsManifest.forEach(weightsGroup => {\n                    weightsGroup.paths.forEach(path => {\n                        const weightFileReader = new FileReader();\n                        weightFileReader.onload = (event) => {\n                            // tslint:disable-next-line:no-any\n                            const weightData = event.target.result;\n                            const index = paths.indexOf(path);\n                            perFileBuffers[index] = weightData;\n                            if (perFileBuffers.indexOf(null) === -1) {\n                                const result = {\n                                    modelTopology,\n                                    weightSpecs,\n                                    weightData: concatenateArrayBuffers(perFileBuffers),\n                                    format: modelJSON.format,\n                                    generatedBy: modelJSON.generatedBy,\n                                    convertedBy: modelJSON.convertedBy\n                                };\n                                if (modelJSON.signature != null) {\n                                    result.signature = modelJSON.signature;\n                                }\n                                if (modelJSON.userDefinedMetadata != null) {\n                                    result.userDefinedMetadata = modelJSON.userDefinedMetadata;\n                                }\n                                if (modelJSON.modelInitializer != null) {\n                                    result.modelInitializer = modelJSON.modelInitializer;\n                                }\n                                resolve(result);\n                            }\n                        };\n                        weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);\n                        weightFileReader.readAsArrayBuffer(pathToFile[path]);\n                    });\n                });\n            };\n            jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` +\n                `from file '${jsonFile.name}'. BrowserFiles supports loading ` +\n                `Keras-style tf.Model artifacts only.`);\n            jsonReader.readAsText(jsonFile);\n        });\n    }\n    /**\n     * Check the compatibility between weights manifest and weight files.\n     */\n    checkManifestAndWeightFiles(manifest, files) {\n        const basenames = [];\n        const fileNames = files.map(file => basename(file.name));\n        const pathToFile = {};\n        for (const group of manifest) {\n            group.paths.forEach(path => {\n                const pathBasename = basename(path);\n                if (basenames.indexOf(pathBasename) !== -1) {\n                    throw new Error(`Duplicate file basename found in weights manifest: ` +\n                        `'${pathBasename}'`);\n                }\n                basenames.push(pathBasename);\n                if (fileNames.indexOf(pathBasename) === -1) {\n                    throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);\n                }\n                else {\n                    pathToFile[path] = files[fileNames.indexOf(pathBasename)];\n                }\n            });\n        }\n        if (basenames.length !== files.length) {\n            throw new Error(`Mismatch in the number of files in weights manifest ` +\n                `(${basenames.length}) and the number of weight files provided ` +\n                `(${files.length}).`);\n        }\n        return pathToFile;\n    }\n}\nexport const browserDownloadsRouter = (url) => {\n    if (!env().getBool('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n            return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n        }\n        else {\n            return null;\n        }\n    }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads(fileNamePrefix = 'model') {\n    return new BrowserDownloads(fileNamePrefix);\n}\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, One or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files) {\n    return new BrowserFiles(files);\n}\n//# sourceMappingURL=browser_files.js.map"]},"metadata":{},"sourceType":"module"}