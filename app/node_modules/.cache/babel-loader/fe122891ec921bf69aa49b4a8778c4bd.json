{"ast":null,"code":"import { isFunctionNode, isNode, isOperatorNode, isParenthesisNode, isSymbolNode } from '../../../utils/is';\nimport { factory } from '../../../utils/factory';\nvar name = 'resolve';\nvar dependencies = ['parse', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];\nexport var createResolve = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var parse = _ref.parse,\n    FunctionNode = _ref.FunctionNode,\n    OperatorNode = _ref.OperatorNode,\n    ParenthesisNode = _ref.ParenthesisNode;\n\n  /**\n   * resolve(expr, scope) replaces variable nodes with their scoped values\n   *\n   * Syntax:\n   *\n   *     simplify.resolve(expr, scope)\n   *\n   * Examples:\n   *\n   *     math.simplify.resolve('x + y', {x:1, y:2})           // Node {1 + 2}\n   *     math.simplify.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}\n   *     math.simplify('x+y', {x:2, y:'x+x'}).toString()      // \"6\"\n   *\n   * @param {Node} node\n   *     The expression tree to be simplified\n   * @param {Object} scope with variables to be resolved\n   */\n  function resolve(node, scope) {\n    if (!scope) {\n      return node;\n    }\n    if (isSymbolNode(node)) {\n      var value = scope[node.name];\n      if (isNode(value)) {\n        return resolve(value, scope);\n      } else if (typeof value === 'number') {\n        return parse(String(value));\n      }\n    } else if (isOperatorNode(node)) {\n      var args = node.args.map(function (arg) {\n        return resolve(arg, scope);\n      });\n      return new OperatorNode(node.op, node.fn, args, node.implicit);\n    } else if (isParenthesisNode(node)) {\n      return new ParenthesisNode(resolve(node.content, scope));\n    } else if (isFunctionNode(node)) {\n      var _args = node.args.map(function (arg) {\n        return resolve(arg, scope);\n      });\n      return new FunctionNode(node.name, _args);\n    }\n    return node;\n  }\n  return resolve;\n});","map":{"version":3,"names":["isFunctionNode","isNode","isOperatorNode","isParenthesisNode","isSymbolNode","factory","name","dependencies","createResolve","_ref","parse","FunctionNode","OperatorNode","ParenthesisNode","resolve","node","scope","value","String","args","map","arg","op","fn","implicit","content","_args"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/P/temp/app/node_modules/mathjs/es/function/algebra/simplify/resolve.js"],"sourcesContent":["import { isFunctionNode, isNode, isOperatorNode, isParenthesisNode, isSymbolNode } from '../../../utils/is';\nimport { factory } from '../../../utils/factory';\nvar name = 'resolve';\nvar dependencies = ['parse', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];\nexport var createResolve = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var parse = _ref.parse,\n      FunctionNode = _ref.FunctionNode,\n      OperatorNode = _ref.OperatorNode,\n      ParenthesisNode = _ref.ParenthesisNode;\n\n  /**\n   * resolve(expr, scope) replaces variable nodes with their scoped values\n   *\n   * Syntax:\n   *\n   *     simplify.resolve(expr, scope)\n   *\n   * Examples:\n   *\n   *     math.simplify.resolve('x + y', {x:1, y:2})           // Node {1 + 2}\n   *     math.simplify.resolve(math.parse('x+y'), {x:1, y:2}) // Node {1 + 2}\n   *     math.simplify('x+y', {x:2, y:'x+x'}).toString()      // \"6\"\n   *\n   * @param {Node} node\n   *     The expression tree to be simplified\n   * @param {Object} scope with variables to be resolved\n   */\n  function resolve(node, scope) {\n    if (!scope) {\n      return node;\n    }\n\n    if (isSymbolNode(node)) {\n      var value = scope[node.name];\n\n      if (isNode(value)) {\n        return resolve(value, scope);\n      } else if (typeof value === 'number') {\n        return parse(String(value));\n      }\n    } else if (isOperatorNode(node)) {\n      var args = node.args.map(function (arg) {\n        return resolve(arg, scope);\n      });\n      return new OperatorNode(node.op, node.fn, args, node.implicit);\n    } else if (isParenthesisNode(node)) {\n      return new ParenthesisNode(resolve(node.content, scope));\n    } else if (isFunctionNode(node)) {\n      var _args = node.args.map(function (arg) {\n        return resolve(arg, scope);\n      });\n\n      return new FunctionNode(node.name, _args);\n    }\n\n    return node;\n  }\n\n  return resolve;\n});"],"mappings":"AAAA,SAASA,cAAc,EAAEC,MAAM,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,YAAY,QAAQ,mBAAmB;AAC3G,SAASC,OAAO,QAAQ,wBAAwB;AAChD,IAAIC,IAAI,GAAG,SAAS;AACpB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,cAAc,EAAE,cAAc,EAAE,iBAAiB,CAAC;AAC/E,OAAO,IAAIC,aAAa,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACpF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,YAAY,GAAGF,IAAI,CAACE,YAAY;IAChCC,YAAY,GAAGH,IAAI,CAACG,YAAY;IAChCC,eAAe,GAAGJ,IAAI,CAACI,eAAe;;EAE1C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASC,OAAO,CAACC,IAAI,EAAEC,KAAK,EAAE;IAC5B,IAAI,CAACA,KAAK,EAAE;MACV,OAAOD,IAAI;IACb;IAEA,IAAIX,YAAY,CAACW,IAAI,CAAC,EAAE;MACtB,IAAIE,KAAK,GAAGD,KAAK,CAACD,IAAI,CAACT,IAAI,CAAC;MAE5B,IAAIL,MAAM,CAACgB,KAAK,CAAC,EAAE;QACjB,OAAOH,OAAO,CAACG,KAAK,EAAED,KAAK,CAAC;MAC9B,CAAC,MAAM,IAAI,OAAOC,KAAK,KAAK,QAAQ,EAAE;QACpC,OAAOP,KAAK,CAACQ,MAAM,CAACD,KAAK,CAAC,CAAC;MAC7B;IACF,CAAC,MAAM,IAAIf,cAAc,CAACa,IAAI,CAAC,EAAE;MAC/B,IAAII,IAAI,GAAGJ,IAAI,CAACI,IAAI,CAACC,GAAG,CAAC,UAAUC,GAAG,EAAE;QACtC,OAAOP,OAAO,CAACO,GAAG,EAAEL,KAAK,CAAC;MAC5B,CAAC,CAAC;MACF,OAAO,IAAIJ,YAAY,CAACG,IAAI,CAACO,EAAE,EAAEP,IAAI,CAACQ,EAAE,EAAEJ,IAAI,EAAEJ,IAAI,CAACS,QAAQ,CAAC;IAChE,CAAC,MAAM,IAAIrB,iBAAiB,CAACY,IAAI,CAAC,EAAE;MAClC,OAAO,IAAIF,eAAe,CAACC,OAAO,CAACC,IAAI,CAACU,OAAO,EAAET,KAAK,CAAC,CAAC;IAC1D,CAAC,MAAM,IAAIhB,cAAc,CAACe,IAAI,CAAC,EAAE;MAC/B,IAAIW,KAAK,GAAGX,IAAI,CAACI,IAAI,CAACC,GAAG,CAAC,UAAUC,GAAG,EAAE;QACvC,OAAOP,OAAO,CAACO,GAAG,EAAEL,KAAK,CAAC;MAC5B,CAAC,CAAC;MAEF,OAAO,IAAIL,YAAY,CAACI,IAAI,CAACT,IAAI,EAAEoB,KAAK,CAAC;IAC3C;IAEA,OAAOX,IAAI;EACb;EAEA,OAAOD,OAAO;AAChB,CAAC,CAAC"},"metadata":{},"sourceType":"module"}