{"ast":null,"code":"/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { Layer } from '../../engine/topology';\nimport { serialization, mul, add, tidy } from '@tensorflow/tfjs-core';\nimport { getExactlyOneTensor } from '../../utils/types_utils';\nimport * as K from '../../backend/tfjs_backend';\n/**\n * Preprocessing Rescaling Layer\n *\n * This rescales images by a scaling and offset factor\n */\nexport class Rescaling extends Layer {\n  constructor(args) {\n    super(args);\n    this.scale = args.scale;\n    if (args.offset) {\n      this.offset = args.offset;\n    } else {\n      this.offset = 0;\n    }\n  }\n  getConfig() {\n    const config = {\n      'scale': this.scale,\n      'offset': this.offset\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      if (inputs.dtype !== 'float32') {\n        inputs = K.cast(inputs, 'float32');\n      }\n      return add(mul(inputs, this.scale), this.offset);\n    });\n  }\n}\n/** @nocollapse */\nRescaling.className = 'Rescaling';\nserialization.registerClass(Rescaling);","map":{"version":3,"sources":["../../../../../../../tfjs-layers/src/layers/preprocessing/image_preprocessing.ts"],"names":[],"mappings":"AAAA;;;;;;;;AAQG;AAEH,SAAmB,KAAK,QAAO,uBAAuB;AACtD,SAAS,aAAa,EAAU,GAAG,EAAE,GAAG,EAAE,IAAI,QAAQ,uBAAuB;AAC7E,SAAS,mBAAmB,QAAQ,yBAAyB;AAC7D,OAAO,KAAK,CAAC,MAAM,4BAA4B;AAQ/C;;;;AAIG;AACH,OAAM,MAAO,SAAU,SAAQ,KAAK,CAAA;EAKlC,WAAA,CAAY,IAAmB,EAAA;IAC7B,KAAK,CAAC,IAAI,CAAC;IAEX,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK;IAEvB,IAAG,IAAI,CAAC,MAAM,EAAE;MAChB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM;KACxB,MAAM;MACL,IAAI,CAAC,MAAM,GAAG,CAAC;IAChB;EACH;EAES,SAAS,GAAA;IAChB,MAAM,MAAM,GAA6B;MACvC,OAAO,EAAE,IAAI,CAAC,KAAK;MACnB,QAAQ,EAAE,IAAI,CAAC;KAChB;IAED,MAAM,UAAU,GAAG,KAAK,CAAC,SAAS,EAAE;IACpC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,UAAU,CAAC;IACjC,OAAO,MAAM;EACf;EAES,IAAI,CAAC,MAAuB,EAAE,MAAc,EAAA;IACnD,OAAO,IAAI,CAAC,MAAK;MACf,MAAM,GAAG,mBAAmB,CAAC,MAAM,CAAC;MACpC,IAAG,MAAM,CAAC,KAAK,KAAK,SAAS,EAAE;QAC3B,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC;MACrC;MACD,OAAO,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC;IAClD,CAAC,CAAC;EACJ;;AAnCA;AACO,SAAA,CAAA,SAAS,GAAG,WAAW;AAqChC,aAAa,CAAC,aAAa,CAAC,SAAS,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {LayerArgs, Layer} from '../../engine/topology';\nimport { serialization, Tensor, mul, add, tidy } from '@tensorflow/tfjs-core';\nimport { getExactlyOneTensor } from '../../utils/types_utils';\nimport * as K from '../../backend/tfjs_backend';\nimport { Kwargs } from '../../types';\n\nexport declare interface RescalingArgs extends LayerArgs {\n  scale: number;\n  offset?: number;\n}\n\n/**\n * Preprocessing Rescaling Layer\n *\n * This rescales images by a scaling and offset factor\n */\nexport class Rescaling extends Layer {\n  /** @nocollapse */\n  static className = 'Rescaling';\n  private readonly scale: number;\n  private readonly offset: number;\n  constructor(args: RescalingArgs) {\n    super(args);\n\n    this.scale = args.scale;\n\n    if(args.offset) {\n    this.offset = args.offset;\n    } else {\n      this.offset = 0;\n    }\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      'scale': this.scale,\n      'offset': this.offset\n    };\n\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor[]|Tensor {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      if(inputs.dtype !== 'float32') {\n          inputs = K.cast(inputs, 'float32');\n      }\n      return add(mul(inputs, this.scale), this.offset);\n    });\n  }\n}\n\nserialization.registerClass(Rescaling);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}