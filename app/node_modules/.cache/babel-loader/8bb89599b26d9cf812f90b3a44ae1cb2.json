{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport './flags_wasm';\nimport { DataStorage, deprecationWarn, engine, env, KernelBackend, util } from '@tensorflow/tfjs-core';\nimport wasmFactoryThreadedSimd from '../wasm-out/tfjs-backend-wasm-threaded-simd.js';\n// @ts-ignore\nimport { wasmWorkerContents } from '../wasm-out/tfjs-backend-wasm-threaded-simd.worker.js';\nimport wasmFactory from '../wasm-out/tfjs-backend-wasm.js';\nexport class BackendWasm extends KernelBackend {\n  constructor(wasm) {\n    super();\n    this.wasm = wasm;\n    // 0 is reserved for null data ids.\n    this.dataIdNextNumber = 1;\n    this.wasm.tfjs.init();\n    this.dataIdMap = new DataStorage(this, engine());\n  }\n  write(values, shape, dtype) {\n    const dataId = {};\n    this.move(dataId, values, shape, dtype);\n    return dataId;\n  }\n  numDataIds() {\n    return this.dataIdMap.numDataIds();\n  }\n  async time(f) {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {\n      kernelMs\n    };\n  }\n  move(dataId, values, shape, dtype) {\n    const id = this.dataIdNextNumber++;\n    if (dtype === 'string') {\n      const stringBytes = values;\n      this.dataIdMap.set(dataId, {\n        id,\n        stringBytes,\n        shape,\n        dtype,\n        memoryOffset: null\n      });\n      return;\n    }\n    const size = util.sizeFromShape(shape);\n    const numBytes = size * util.bytesPerElement(dtype);\n    const memoryOffset = this.wasm._malloc(numBytes);\n    this.dataIdMap.set(dataId, {\n      id,\n      memoryOffset,\n      shape,\n      dtype\n    });\n    this.wasm.tfjs.registerTensor(id, size, memoryOffset);\n    if (values != null) {\n      this.wasm.HEAPU8.set(new Uint8Array(values.buffer, values.byteOffset, numBytes), memoryOffset);\n    }\n  }\n  async read(dataId) {\n    return this.readSync(dataId);\n  }\n  readSync(dataId) {\n    const {\n      memoryOffset,\n      dtype,\n      shape,\n      stringBytes\n    } = this.dataIdMap.get(dataId);\n    if (dtype === 'string') {\n      return stringBytes;\n    }\n    const bytes = this.wasm.HEAPU8.slice(memoryOffset, memoryOffset + util.sizeFromShape(shape) * util.bytesPerElement(dtype));\n    return typedArrayFromBuffer(bytes.buffer, dtype);\n  }\n  disposeData(dataId) {\n    const data = this.dataIdMap.get(dataId);\n    this.wasm._free(data.memoryOffset);\n    this.wasm.tfjs.disposeData(data.id);\n    this.dataIdMap.delete(dataId);\n  }\n  floatPrecision() {\n    return 32;\n  }\n  // Returns the memory offset of a tensor. Useful for debugging and unit\n  // testing.\n  getMemoryOffset(dataId) {\n    return this.dataIdMap.get(dataId).memoryOffset;\n  }\n  dispose() {\n    this.wasm.tfjs.dispose();\n    this.wasm = null;\n  }\n  memory() {\n    return {\n      unreliable: false\n    };\n  }\n  /**\n   * Make a tensor info for the output of an op. If `memoryOffset` is not\n   * present, this method allocates memory on the WASM heap. If `memoryOffset`\n   * is present, the memory was allocated elsewhere (in c++) and we just record\n   * the pointer where that memory lives.\n   */\n  makeOutput(shape, dtype, memoryOffset) {\n    let dataId;\n    if (memoryOffset == null) {\n      dataId = this.write(null /* values */, shape, dtype);\n    } else {\n      dataId = {};\n      const id = this.dataIdNextNumber++;\n      this.dataIdMap.set(dataId, {\n        id,\n        memoryOffset,\n        shape,\n        dtype\n      });\n      const size = util.sizeFromShape(shape);\n      this.wasm.tfjs.registerTensor(id, size, memoryOffset);\n    }\n    return {\n      dataId,\n      shape,\n      dtype\n    };\n  }\n  typedArrayFromHeap(_ref) {\n    let {\n      shape,\n      dtype,\n      dataId\n    } = _ref;\n    const buffer = this.wasm.HEAPU8.buffer;\n    const {\n      memoryOffset\n    } = this.dataIdMap.get(dataId);\n    const size = util.sizeFromShape(shape);\n    switch (dtype) {\n      case 'float32':\n        return new Float32Array(buffer, memoryOffset, size);\n      case 'int32':\n        return new Int32Array(buffer, memoryOffset, size);\n      case 'bool':\n        return new Uint8Array(buffer, memoryOffset, size);\n      default:\n        throw new Error(`Unknown dtype ${dtype}`);\n    }\n  }\n}\nfunction createInstantiateWasmFunc(path) {\n  // tslint:disable-next-line:no-any\n  return (imports, callback) => {\n    util.fetch(path, {\n      credentials: 'same-origin'\n    }).then(response => {\n      if (!response['ok']) {\n        imports.env.a(`failed to load wasm binary file at '${path}'`);\n      }\n      response.arrayBuffer().then(binary => {\n        WebAssembly.instantiate(binary, imports).then(output => {\n          callback(output.instance);\n        });\n      });\n    });\n    return {};\n  };\n}\n/**\n * Returns the path of the WASM binary.\n * @param simdSupported whether SIMD is supported\n * @param threadsSupported whether multithreading is supported\n * @param wasmModuleFolder the directory containing the WASM binaries.\n */\nfunction getPathToWasmBinary(simdSupported, threadsSupported, wasmModuleFolder) {\n  if (wasmPath != null) {\n    // If wasmPath is defined, the user has supplied a full path to\n    // the vanilla .wasm binary.\n    return wasmPath;\n  }\n  let path = 'tfjs-backend-wasm.wasm';\n  if (simdSupported && threadsSupported) {\n    path = 'tfjs-backend-wasm-threaded-simd.wasm';\n  } else if (simdSupported) {\n    path = 'tfjs-backend-wasm-simd.wasm';\n  }\n  if (wasmFileMap != null) {\n    if (wasmFileMap[path] != null) {\n      return wasmFileMap[path];\n    }\n  }\n  return wasmModuleFolder + path;\n}\n/**\n * Initializes the wasm module and creates the js <--> wasm bridge.\n *\n * NOTE: We wrap the wasm module in a object with property 'wasm' instead of\n * returning Promise<BackendWasmModule> to avoid freezing Chrome (last tested\n * in Chrome 76).\n */\nexport async function init() {\n  const [simdSupported, threadsSupported] = await Promise.all([env().getAsync('WASM_HAS_SIMD_SUPPORT'), env().getAsync('WASM_HAS_MULTITHREAD_SUPPORT')]);\n  return new Promise((resolve, reject) => {\n    const factoryConfig = {};\n    /**\n     * This function overrides the Emscripten module locateFile utility.\n     * @param path The relative path to the file that needs to be loaded.\n     * @param prefix The path to the main JavaScript file's directory.\n     */\n    factoryConfig.locateFile = (path, prefix) => {\n      if (path.endsWith('.worker.js')) {\n        const response = wasmWorkerContents;\n        const blob = new Blob([response], {\n          type: 'application/javascript'\n        });\n        return URL.createObjectURL(blob);\n      }\n      if (path.endsWith('.wasm')) {\n        return getPathToWasmBinary(simdSupported, threadsSupported, wasmPathPrefix != null ? wasmPathPrefix : prefix);\n      }\n      return prefix + path;\n    };\n    // Use the instantiateWasm override when system fetch is not available.\n    // Reference:\n    // https://github.com/emscripten-core/emscripten/blob/2bca083cbbd5a4133db61fbd74d04f7feecfa907/tests/manual_wasm_instantiate.html#L170\n    if (customFetch) {\n      factoryConfig.instantiateWasm = createInstantiateWasmFunc(getPathToWasmBinary(simdSupported, threadsSupported, wasmPathPrefix != null ? wasmPathPrefix : ''));\n    }\n    let wasm;\n    // If `wasmPath` has been defined we must initialize the vanilla module.\n    if (threadsSupported && simdSupported && wasmPath == null) {\n      wasm = wasmFactoryThreadedSimd(factoryConfig);\n      wasm.mainScriptUrlOrBlob = new Blob([`var WasmBackendModuleThreadedSimd = ` + wasmFactoryThreadedSimd.toString()], {\n        type: 'text/javascript'\n      });\n    } else {\n      // The wasmFactory works for both vanilla and SIMD binaries.\n      wasm = wasmFactory(factoryConfig);\n    }\n    const voidReturnType = null;\n    // Using the tfjs namespace to avoid conflict with emscripten's API.\n    wasm.tfjs = {\n      init: wasm.cwrap('init', null, []),\n      registerTensor: wasm.cwrap('register_tensor', null, ['number', 'number', 'number']),\n      disposeData: wasm.cwrap('dispose_data', voidReturnType, ['number']),\n      dispose: wasm.cwrap('dispose', voidReturnType, [])\n    };\n    let initialized = false;\n    wasm.onRuntimeInitialized = () => {\n      initialized = true;\n      initAborted = false;\n      resolve({\n        wasm\n      });\n    };\n    wasm.onAbort = () => {\n      if (initialized) {\n        // Emscripten already called console.warn so no need to double log.\n        return;\n      }\n      if (initAborted) {\n        // Emscripten calls `onAbort` twice, resulting in double error\n        // messages.\n        return;\n      }\n      initAborted = true;\n      const rejectMsg = 'Make sure the server can serve the `.wasm` file relative to the ' + 'bundled js file. For more details see https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers';\n      reject({\n        message: rejectMsg\n      });\n    };\n  });\n}\nfunction typedArrayFromBuffer(buffer, dtype) {\n  switch (dtype) {\n    case 'float32':\n      return new Float32Array(buffer);\n    case 'int32':\n      return new Int32Array(buffer);\n    case 'bool':\n      return new Uint8Array(buffer);\n    default:\n      throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\nconst wasmBinaryNames = ['tfjs-backend-wasm.wasm', 'tfjs-backend-wasm-simd.wasm', 'tfjs-backend-wasm-threaded-simd.wasm'];\nlet wasmPath = null;\nlet wasmPathPrefix = null;\nlet wasmFileMap = {};\nlet initAborted = false;\nlet customFetch = false;\n/**\n * @deprecated Use `setWasmPaths` instead.\n * Sets the path to the `.wasm` file which will be fetched when the wasm\n * backend is initialized. See\n * https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers\n * for more details.\n * @param path wasm file path or url\n * @param usePlatformFetch optional boolean to use platform fetch to download\n *     the wasm file, default to false.\n *\n * @doc {heading: 'Environment', namespace: 'wasm'}\n */\nexport function setWasmPath(path) {\n  let usePlatformFetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  deprecationWarn('setWasmPath has been deprecated in favor of setWasmPaths and' + ' will be removed in a future release.');\n  if (initAborted) {\n    throw new Error('The WASM backend was already initialized. Make sure you call ' + '`setWasmPath()` before you call `tf.setBackend()` or `tf.ready()`');\n  }\n  wasmPath = path;\n  customFetch = usePlatformFetch;\n}\n/**\n * Configures the locations of the WASM binaries.\n *\n * ```js\n * setWasmPaths({\n *  'tfjs-backend-wasm.wasm': 'renamed.wasm',\n *  'tfjs-backend-wasm-simd.wasm': 'renamed-simd.wasm',\n *  'tfjs-backend-wasm-threaded-simd.wasm': 'renamed-threaded-simd.wasm'\n * });\n * tf.setBackend('wasm');\n * ```\n *\n * @param prefixOrFileMap This can be either a string or object:\n *  - (string) The path to the directory where the WASM binaries are located.\n *     Note that this prefix will be used to load each binary (vanilla,\n *     SIMD-enabled, threading-enabled, etc.).\n *  - (object) Mapping from names of WASM binaries to custom\n *     full paths specifying the locations of those binaries. This is useful if\n *     your WASM binaries are not all located in the same directory, or if your\n *     WASM binaries have been renamed.\n * @param usePlatformFetch optional boolean to use platform fetch to download\n *     the wasm file, default to false.\n *\n * @doc {heading: 'Environment', namespace: 'wasm'}\n */\nexport function setWasmPaths(prefixOrFileMap) {\n  let usePlatformFetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (initAborted) {\n    throw new Error('The WASM backend was already initialized. Make sure you call ' + '`setWasmPaths()` before you call `tf.setBackend()` or ' + '`tf.ready()`');\n  }\n  if (typeof prefixOrFileMap === 'string') {\n    wasmPathPrefix = prefixOrFileMap;\n  } else {\n    wasmFileMap = prefixOrFileMap;\n    const missingPaths = wasmBinaryNames.filter(name => wasmFileMap[name] == null);\n    if (missingPaths.length > 0) {\n      throw new Error(`There were no entries found for the following binaries: ` + `${missingPaths.join(',')}. Please either call setWasmPaths with a ` + `map providing a path for each binary, or with a string indicating ` + `the directory where all the binaries can be found.`);\n    }\n  }\n  customFetch = usePlatformFetch;\n}\n/** Used in unit tests. */\nexport function resetWasmPath() {\n  wasmPath = null;\n  wasmPathPrefix = null;\n  wasmFileMap = {};\n  customFetch = false;\n  initAborted = false;\n}","map":{"version":3,"sources":["../src/backend_wasm.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport './flags_wasm';\nimport { DataStorage, deprecationWarn, engine, env, KernelBackend, util } from '@tensorflow/tfjs-core';\nimport wasmFactoryThreadedSimd from '../wasm-out/tfjs-backend-wasm-threaded-simd.js';\n// @ts-ignore\nimport { wasmWorkerContents } from '../wasm-out/tfjs-backend-wasm-threaded-simd.worker.js';\nimport wasmFactory from '../wasm-out/tfjs-backend-wasm.js';\nexport class BackendWasm extends KernelBackend {\n    constructor(wasm) {\n        super();\n        this.wasm = wasm;\n        // 0 is reserved for null data ids.\n        this.dataIdNextNumber = 1;\n        this.wasm.tfjs.init();\n        this.dataIdMap = new DataStorage(this, engine());\n    }\n    write(values, shape, dtype) {\n        const dataId = {};\n        this.move(dataId, values, shape, dtype);\n        return dataId;\n    }\n    numDataIds() {\n        return this.dataIdMap.numDataIds();\n    }\n    async time(f) {\n        const start = util.now();\n        f();\n        const kernelMs = util.now() - start;\n        return { kernelMs };\n    }\n    move(dataId, values, shape, dtype) {\n        const id = this.dataIdNextNumber++;\n        if (dtype === 'string') {\n            const stringBytes = values;\n            this.dataIdMap.set(dataId, { id, stringBytes, shape, dtype, memoryOffset: null });\n            return;\n        }\n        const size = util.sizeFromShape(shape);\n        const numBytes = size * util.bytesPerElement(dtype);\n        const memoryOffset = this.wasm._malloc(numBytes);\n        this.dataIdMap.set(dataId, { id, memoryOffset, shape, dtype });\n        this.wasm.tfjs.registerTensor(id, size, memoryOffset);\n        if (values != null) {\n            this.wasm.HEAPU8.set(new Uint8Array(values.buffer, values.byteOffset, numBytes), memoryOffset);\n        }\n    }\n    async read(dataId) {\n        return this.readSync(dataId);\n    }\n    readSync(dataId) {\n        const { memoryOffset, dtype, shape, stringBytes } = this.dataIdMap.get(dataId);\n        if (dtype === 'string') {\n            return stringBytes;\n        }\n        const bytes = this.wasm.HEAPU8.slice(memoryOffset, memoryOffset + util.sizeFromShape(shape) * util.bytesPerElement(dtype));\n        return typedArrayFromBuffer(bytes.buffer, dtype);\n    }\n    disposeData(dataId) {\n        const data = this.dataIdMap.get(dataId);\n        this.wasm._free(data.memoryOffset);\n        this.wasm.tfjs.disposeData(data.id);\n        this.dataIdMap.delete(dataId);\n    }\n    floatPrecision() {\n        return 32;\n    }\n    // Returns the memory offset of a tensor. Useful for debugging and unit\n    // testing.\n    getMemoryOffset(dataId) {\n        return this.dataIdMap.get(dataId).memoryOffset;\n    }\n    dispose() {\n        this.wasm.tfjs.dispose();\n        this.wasm = null;\n    }\n    memory() {\n        return { unreliable: false };\n    }\n    /**\n     * Make a tensor info for the output of an op. If `memoryOffset` is not\n     * present, this method allocates memory on the WASM heap. If `memoryOffset`\n     * is present, the memory was allocated elsewhere (in c++) and we just record\n     * the pointer where that memory lives.\n     */\n    makeOutput(shape, dtype, memoryOffset) {\n        let dataId;\n        if (memoryOffset == null) {\n            dataId = this.write(null /* values */, shape, dtype);\n        }\n        else {\n            dataId = {};\n            const id = this.dataIdNextNumber++;\n            this.dataIdMap.set(dataId, { id, memoryOffset, shape, dtype });\n            const size = util.sizeFromShape(shape);\n            this.wasm.tfjs.registerTensor(id, size, memoryOffset);\n        }\n        return { dataId, shape, dtype };\n    }\n    typedArrayFromHeap({ shape, dtype, dataId }) {\n        const buffer = this.wasm.HEAPU8.buffer;\n        const { memoryOffset } = this.dataIdMap.get(dataId);\n        const size = util.sizeFromShape(shape);\n        switch (dtype) {\n            case 'float32':\n                return new Float32Array(buffer, memoryOffset, size);\n            case 'int32':\n                return new Int32Array(buffer, memoryOffset, size);\n            case 'bool':\n                return new Uint8Array(buffer, memoryOffset, size);\n            default:\n                throw new Error(`Unknown dtype ${dtype}`);\n        }\n    }\n}\nfunction createInstantiateWasmFunc(path) {\n    // tslint:disable-next-line:no-any\n    return (imports, callback) => {\n        util.fetch(path, { credentials: 'same-origin' }).then((response) => {\n            if (!response['ok']) {\n                imports.env.a(`failed to load wasm binary file at '${path}'`);\n            }\n            response.arrayBuffer().then(binary => {\n                WebAssembly.instantiate(binary, imports).then(output => {\n                    callback(output.instance);\n                });\n            });\n        });\n        return {};\n    };\n}\n/**\n * Returns the path of the WASM binary.\n * @param simdSupported whether SIMD is supported\n * @param threadsSupported whether multithreading is supported\n * @param wasmModuleFolder the directory containing the WASM binaries.\n */\nfunction getPathToWasmBinary(simdSupported, threadsSupported, wasmModuleFolder) {\n    if (wasmPath != null) {\n        // If wasmPath is defined, the user has supplied a full path to\n        // the vanilla .wasm binary.\n        return wasmPath;\n    }\n    let path = 'tfjs-backend-wasm.wasm';\n    if (simdSupported && threadsSupported) {\n        path = 'tfjs-backend-wasm-threaded-simd.wasm';\n    }\n    else if (simdSupported) {\n        path = 'tfjs-backend-wasm-simd.wasm';\n    }\n    if (wasmFileMap != null) {\n        if (wasmFileMap[path] != null) {\n            return wasmFileMap[path];\n        }\n    }\n    return wasmModuleFolder + path;\n}\n/**\n * Initializes the wasm module and creates the js <--> wasm bridge.\n *\n * NOTE: We wrap the wasm module in a object with property 'wasm' instead of\n * returning Promise<BackendWasmModule> to avoid freezing Chrome (last tested\n * in Chrome 76).\n */\nexport async function init() {\n    const [simdSupported, threadsSupported] = await Promise.all([\n        env().getAsync('WASM_HAS_SIMD_SUPPORT'),\n        env().getAsync('WASM_HAS_MULTITHREAD_SUPPORT')\n    ]);\n    return new Promise((resolve, reject) => {\n        const factoryConfig = {};\n        /**\n         * This function overrides the Emscripten module locateFile utility.\n         * @param path The relative path to the file that needs to be loaded.\n         * @param prefix The path to the main JavaScript file's directory.\n         */\n        factoryConfig.locateFile = (path, prefix) => {\n            if (path.endsWith('.worker.js')) {\n                const response = wasmWorkerContents;\n                const blob = new Blob([response], { type: 'application/javascript' });\n                return URL.createObjectURL(blob);\n            }\n            if (path.endsWith('.wasm')) {\n                return getPathToWasmBinary(simdSupported, threadsSupported, wasmPathPrefix != null ? wasmPathPrefix : prefix);\n            }\n            return prefix + path;\n        };\n        // Use the instantiateWasm override when system fetch is not available.\n        // Reference:\n        // https://github.com/emscripten-core/emscripten/blob/2bca083cbbd5a4133db61fbd74d04f7feecfa907/tests/manual_wasm_instantiate.html#L170\n        if (customFetch) {\n            factoryConfig.instantiateWasm =\n                createInstantiateWasmFunc(getPathToWasmBinary(simdSupported, threadsSupported, wasmPathPrefix != null ? wasmPathPrefix : ''));\n        }\n        let wasm;\n        // If `wasmPath` has been defined we must initialize the vanilla module.\n        if (threadsSupported && simdSupported && wasmPath == null) {\n            wasm = wasmFactoryThreadedSimd(factoryConfig);\n            wasm.mainScriptUrlOrBlob = new Blob([`var WasmBackendModuleThreadedSimd = ` +\n                    wasmFactoryThreadedSimd.toString()], { type: 'text/javascript' });\n        }\n        else {\n            // The wasmFactory works for both vanilla and SIMD binaries.\n            wasm = wasmFactory(factoryConfig);\n        }\n        const voidReturnType = null;\n        // Using the tfjs namespace to avoid conflict with emscripten's API.\n        wasm.tfjs = {\n            init: wasm.cwrap('init', null, []),\n            registerTensor: wasm.cwrap('register_tensor', null, [\n                'number',\n                'number',\n                'number',\n            ]),\n            disposeData: wasm.cwrap('dispose_data', voidReturnType, ['number']),\n            dispose: wasm.cwrap('dispose', voidReturnType, []),\n        };\n        let initialized = false;\n        wasm.onRuntimeInitialized = () => {\n            initialized = true;\n            initAborted = false;\n            resolve({ wasm });\n        };\n        wasm.onAbort = () => {\n            if (initialized) {\n                // Emscripten already called console.warn so no need to double log.\n                return;\n            }\n            if (initAborted) {\n                // Emscripten calls `onAbort` twice, resulting in double error\n                // messages.\n                return;\n            }\n            initAborted = true;\n            const rejectMsg = 'Make sure the server can serve the `.wasm` file relative to the ' +\n                'bundled js file. For more details see https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers';\n            reject({ message: rejectMsg });\n        };\n    });\n}\nfunction typedArrayFromBuffer(buffer, dtype) {\n    switch (dtype) {\n        case 'float32':\n            return new Float32Array(buffer);\n        case 'int32':\n            return new Int32Array(buffer);\n        case 'bool':\n            return new Uint8Array(buffer);\n        default:\n            throw new Error(`Unknown dtype ${dtype}`);\n    }\n}\nconst wasmBinaryNames = [\n    'tfjs-backend-wasm.wasm', 'tfjs-backend-wasm-simd.wasm',\n    'tfjs-backend-wasm-threaded-simd.wasm'\n];\nlet wasmPath = null;\nlet wasmPathPrefix = null;\nlet wasmFileMap = {};\nlet initAborted = false;\nlet customFetch = false;\n/**\n * @deprecated Use `setWasmPaths` instead.\n * Sets the path to the `.wasm` file which will be fetched when the wasm\n * backend is initialized. See\n * https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers\n * for more details.\n * @param path wasm file path or url\n * @param usePlatformFetch optional boolean to use platform fetch to download\n *     the wasm file, default to false.\n *\n * @doc {heading: 'Environment', namespace: 'wasm'}\n */\nexport function setWasmPath(path, usePlatformFetch = false) {\n    deprecationWarn('setWasmPath has been deprecated in favor of setWasmPaths and' +\n        ' will be removed in a future release.');\n    if (initAborted) {\n        throw new Error('The WASM backend was already initialized. Make sure you call ' +\n            '`setWasmPath()` before you call `tf.setBackend()` or `tf.ready()`');\n    }\n    wasmPath = path;\n    customFetch = usePlatformFetch;\n}\n/**\n * Configures the locations of the WASM binaries.\n *\n * ```js\n * setWasmPaths({\n *  'tfjs-backend-wasm.wasm': 'renamed.wasm',\n *  'tfjs-backend-wasm-simd.wasm': 'renamed-simd.wasm',\n *  'tfjs-backend-wasm-threaded-simd.wasm': 'renamed-threaded-simd.wasm'\n * });\n * tf.setBackend('wasm');\n * ```\n *\n * @param prefixOrFileMap This can be either a string or object:\n *  - (string) The path to the directory where the WASM binaries are located.\n *     Note that this prefix will be used to load each binary (vanilla,\n *     SIMD-enabled, threading-enabled, etc.).\n *  - (object) Mapping from names of WASM binaries to custom\n *     full paths specifying the locations of those binaries. This is useful if\n *     your WASM binaries are not all located in the same directory, or if your\n *     WASM binaries have been renamed.\n * @param usePlatformFetch optional boolean to use platform fetch to download\n *     the wasm file, default to false.\n *\n * @doc {heading: 'Environment', namespace: 'wasm'}\n */\nexport function setWasmPaths(prefixOrFileMap, usePlatformFetch = false) {\n    if (initAborted) {\n        throw new Error('The WASM backend was already initialized. Make sure you call ' +\n            '`setWasmPaths()` before you call `tf.setBackend()` or ' +\n            '`tf.ready()`');\n    }\n    if (typeof prefixOrFileMap === 'string') {\n        wasmPathPrefix = prefixOrFileMap;\n    }\n    else {\n        wasmFileMap = prefixOrFileMap;\n        const missingPaths = wasmBinaryNames.filter(name => wasmFileMap[name] == null);\n        if (missingPaths.length > 0) {\n            throw new Error(`There were no entries found for the following binaries: ` +\n                `${missingPaths.join(',')}. Please either call setWasmPaths with a ` +\n                `map providing a path for each binary, or with a string indicating ` +\n                `the directory where all the binaries can be found.`);\n        }\n    }\n    customFetch = usePlatformFetch;\n}\n/** Used in unit tests. */\nexport function resetWasmPath() {\n    wasmPath = null;\n    wasmPathPrefix = null;\n    wasmFileMap = {};\n    customFetch = false;\n    initAborted = false;\n}\n//# sourceMappingURL=backend_wasm.js.map"]},"metadata":{},"sourceType":"module"}