{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, StridedSlice, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nlet wasmStridedSlice;\nfunction setup(backend) {\n  wasmStridedSlice = backend.wasm.cwrap(StridedSlice, null /*void*/, ['number', 'array', 'number', 'array', 'array', 'array', 'array', 'array', 'number', 'number']);\n}\nexport function stridedSlice(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  let {\n    begin,\n    end,\n    strides\n  } = attrs;\n  if (strides == null) {\n    strides = new Array(begin.length);\n  }\n  const {\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n  const ellipsisAxes = backend_util.slice_util.maskToAxes(ellipsisMask);\n  if (ellipsisAxes.length > 1) {\n    throw new Error('Multiple ellipses in slice is not allowed.');\n  }\n  if (ellipsisMask !== 0 && newAxisMask !== 0) {\n    throw new Error('Using both ellipsisMask and newAxisMask is not yet supported.');\n  }\n  if (ellipsisMask !== 0 && shrinkAxisMask !== 0) {\n    throw new Error('Using both ellipsisMask and shrinkAxisMask is not yet supported.');\n  }\n  const numInterpolatedAxes = x.shape.length - begin.length;\n  // Expand the dims of x based on the newAxisMask.\n  const expandAxes = backend_util.slice_util.maskToAxes(newAxisMask);\n  const newShape = x.shape.slice();\n  expandAxes.forEach(axis => {\n    begin[axis] = 0;\n    end[axis] = 1;\n    newShape.splice(axis, 0, 1);\n  });\n  const xReshaped = reshape({\n    inputs: {\n      x\n    },\n    attrs: {\n      shape: newShape\n    },\n    backend\n  });\n  const {\n    begin: normalizedBegin,\n    end: normalizedEnd,\n    strides: normalizedStrides\n  } = backend_util.slice_util.getNormalizedAxes(xReshaped.shape, ellipsisAxes, numInterpolatedAxes, begin, end, strides, beginMask, endMask, ellipsisMask);\n  begin = normalizedBegin;\n  end = normalizedEnd;\n  strides = normalizedStrides;\n  const shrinkAxes = backend_util.slice_util.maskToAxes(shrinkAxisMask);\n  // Adjust the ends based on the shrink mask.\n  shrinkAxes.forEach(axis => {\n    end[axis] = begin[axis] + 1;\n    strides[axis] = 1;\n  });\n  // Figure out the output shape.\n  const size = backend_util.slice_util.computeOutShape(begin, end, strides);\n  // Remove the axes based on shrinkMask.\n  const outShape = size.filter((_, axis) => shrinkAxes.indexOf(axis) === -1);\n  const nonStrided = strides.every(v => v === 1);\n  if (nonStrided) {\n    const xSliced = slice({\n      inputs: {\n        x\n      },\n      attrs: {\n        begin,\n        size\n      },\n      backend\n    });\n    return reshape({\n      inputs: {\n        x: xSliced\n      },\n      attrs: {\n        shape: outShape\n      },\n      backend\n    });\n  }\n  const out = backend.makeOutput(outShape, 'float32');\n  if (!outShape.some(axis => axis === 0)) {\n    const xId = backend.dataIdMap.get(xReshaped.dataId).id;\n    const xStridesBytes = new Uint8Array(new Int32Array(util.computeStrides(xReshaped.shape)).buffer);\n    const beginBytes = new Uint8Array(new Int32Array(begin).buffer);\n    const endBytes = new Uint8Array(new Int32Array(end).buffer);\n    const stridesBytes = new Uint8Array(new Int32Array(strides).buffer);\n    const outputShapeBytes = new Uint8Array(new Int32Array(outShape).buffer);\n    const outStridesBytes = new Uint8Array(new Int32Array(util.computeStrides(outShape)).buffer);\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmStridedSlice(xId, xStridesBytes, xReshaped.shape.length, beginBytes, endBytes, stridesBytes, outputShapeBytes, outStridesBytes, outShape.length, outId);\n  }\n  return reshape({\n    inputs: {\n      x: out\n    },\n    attrs: {\n      shape: outShape\n    },\n    backend\n  });\n}\nexport const stridedSliceConfig = {\n  kernelName: StridedSlice,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: stridedSlice\n};","map":{"version":3,"sources":["../../src/kernels/StridedSlice.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, StridedSlice, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nlet wasmStridedSlice;\nfunction setup(backend) {\n    wasmStridedSlice = backend.wasm.cwrap(StridedSlice, null /*void*/, [\n        'number',\n        'array',\n        'number',\n        'array',\n        'array',\n        'array',\n        'array',\n        'array',\n        'number',\n        'number',\n    ]);\n}\nexport function stridedSlice(args) {\n    const { backend, inputs, attrs } = args;\n    const { x } = inputs;\n    let { begin, end, strides } = attrs;\n    if (strides == null) {\n        strides = new Array(begin.length);\n    }\n    const { beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask } = attrs;\n    const ellipsisAxes = backend_util.slice_util.maskToAxes(ellipsisMask);\n    if (ellipsisAxes.length > 1) {\n        throw new Error('Multiple ellipses in slice is not allowed.');\n    }\n    if (ellipsisMask !== 0 && newAxisMask !== 0) {\n        throw new Error('Using both ellipsisMask and newAxisMask is not yet supported.');\n    }\n    if (ellipsisMask !== 0 && shrinkAxisMask !== 0) {\n        throw new Error('Using both ellipsisMask and shrinkAxisMask is not yet supported.');\n    }\n    const numInterpolatedAxes = x.shape.length - begin.length;\n    // Expand the dims of x based on the newAxisMask.\n    const expandAxes = backend_util.slice_util.maskToAxes(newAxisMask);\n    const newShape = x.shape.slice();\n    expandAxes.forEach(axis => {\n        begin[axis] = 0;\n        end[axis] = 1;\n        newShape.splice(axis, 0, 1);\n    });\n    const xReshaped = reshape({ inputs: { x }, attrs: { shape: newShape }, backend });\n    const { begin: normalizedBegin, end: normalizedEnd, strides: normalizedStrides } = backend_util.slice_util.getNormalizedAxes(xReshaped.shape, ellipsisAxes, numInterpolatedAxes, begin, end, strides, beginMask, endMask, ellipsisMask);\n    begin = normalizedBegin;\n    end = normalizedEnd;\n    strides = normalizedStrides;\n    const shrinkAxes = backend_util.slice_util.maskToAxes(shrinkAxisMask);\n    // Adjust the ends based on the shrink mask.\n    shrinkAxes.forEach(axis => {\n        end[axis] = begin[axis] + 1;\n        strides[axis] = 1;\n    });\n    // Figure out the output shape.\n    const size = backend_util.slice_util.computeOutShape(begin, end, strides);\n    // Remove the axes based on shrinkMask.\n    const outShape = size.filter((_, axis) => shrinkAxes.indexOf(axis) === -1);\n    const nonStrided = strides.every(v => v === 1);\n    if (nonStrided) {\n        const xSliced = slice({ inputs: { x }, attrs: { begin, size }, backend });\n        return reshape({ inputs: { x: xSliced }, attrs: { shape: outShape }, backend });\n    }\n    const out = backend.makeOutput(outShape, 'float32');\n    if (!outShape.some(axis => axis === 0)) {\n        const xId = backend.dataIdMap.get(xReshaped.dataId).id;\n        const xStridesBytes = new Uint8Array(new Int32Array(util.computeStrides(xReshaped.shape)).buffer);\n        const beginBytes = new Uint8Array(new Int32Array(begin).buffer);\n        const endBytes = new Uint8Array(new Int32Array(end).buffer);\n        const stridesBytes = new Uint8Array(new Int32Array(strides).buffer);\n        const outputShapeBytes = new Uint8Array(new Int32Array(outShape).buffer);\n        const outStridesBytes = new Uint8Array(new Int32Array(util.computeStrides(outShape)).buffer);\n        const outId = backend.dataIdMap.get(out.dataId).id;\n        wasmStridedSlice(xId, xStridesBytes, xReshaped.shape.length, beginBytes, endBytes, stridesBytes, outputShapeBytes, outStridesBytes, outShape.length, outId);\n    }\n    return reshape({ inputs: { x: out }, attrs: { shape: outShape }, backend });\n}\nexport const stridedSliceConfig = {\n    kernelName: StridedSlice,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: stridedSlice\n};\n//# sourceMappingURL=StridedSlice.js.map"]},"metadata":{},"sourceType":"module"}