{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedConv2D } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { conv2D } from './Conv2D';\nimport { reshape } from './Reshape';\nexport function fusedConv2D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  let result = conv2D({\n    inputs: {\n      x,\n      filter\n    },\n    backend,\n    attrs: {\n      strides,\n      pad,\n      dataFormat,\n      dilations,\n      dimRoundingMode\n    }\n  });\n  if (bias) {\n    const resultOld = result;\n    // For NCHW format, if bias is a 1-D tensor, it is supposed to be aligned\n    // to the channel of the conv2d's result; if the bias is a scalar, the\n    // bias_add is computed as if the bias was broadcasted to the shape of the\n    // conv2d's result.\n    if (dataFormat === 'NCHW' && bias.shape.length === 1 && bias.shape[0] !== 1) {\n      const reshapedBias = reshape({\n        inputs: {\n          x: bias\n        },\n        backend,\n        attrs: {\n          shape: [bias.shape[0], 1, 1]\n        }\n      });\n      result = add({\n        inputs: {\n          a: result,\n          b: reshapedBias\n        },\n        backend\n      });\n      backend.disposeIntermediateTensorInfo(reshapedBias);\n    } else {\n      // This condition handles NHWC and NCHW (scalar case). The only other case\n      // for NCHW (1D case) is handled above.\n      result = add({\n        inputs: {\n          a: result,\n          b: bias\n        },\n        backend\n      });\n    }\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n  if (activation) {\n    const resultOld = result;\n    // For NCHW format, if PReLu activation weights is a 1-D tensor, it is\n    // supposed to be aligned with the channel of the conv2d's result. For other\n    // cases, whether NCHW or NHWC data format, the conv2d result is\n    // already aligned with the activation weights.\n    if (dataFormat === 'NCHW' && activation === 'prelu' && preluActivationWeights.shape.length === 1 && preluActivationWeights.shape[0] !== 1) {\n      const reshapedAlpha = reshape({\n        inputs: {\n          x: preluActivationWeights\n        },\n        backend,\n        attrs: {\n          shape: [preluActivationWeights.shape[0], 1, 1]\n        }\n      });\n      result = applyActivation(backend, result, activation, reshapedAlpha, leakyreluAlpha);\n      backend.disposeIntermediateTensorInfo(reshapedAlpha);\n    } else {\n      result = applyActivation(backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    }\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n  return result;\n}\nexport const fusedConv2DConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedConv2D\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/FusedConv2D.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {conv2D} from './Conv2D';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2D(args: {\n  inputs: FusedConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = conv2D({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const resultOld = result;\n    // For NCHW format, if bias is a 1-D tensor, it is supposed to be aligned\n    // to the channel of the conv2d's result; if the bias is a scalar, the\n    // bias_add is computed as if the bias was broadcasted to the shape of the\n    // conv2d's result.\n    if (dataFormat === 'NCHW' && bias.shape.length === 1 &&\n        bias.shape[0] !== 1) {\n      const reshapedBias = reshape(\n          {inputs: {x: bias}, backend, attrs: {shape: [bias.shape[0], 1, 1]}});\n      result =\n          add({inputs: {a: result, b: reshapedBias}, backend}) as TensorInfo;\n      backend.disposeIntermediateTensorInfo(reshapedBias);\n    } else {\n      // This condition handles NHWC and NCHW (scalar case). The only other case\n      // for NCHW (1D case) is handled above.\n      result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    }\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  if (activation) {\n    const resultOld = result;\n    // For NCHW format, if PReLu activation weights is a 1-D tensor, it is\n    // supposed to be aligned with the channel of the conv2d's result. For other\n    // cases, whether NCHW or NHWC data format, the conv2d result is\n    // already aligned with the activation weights.\n    if (dataFormat === 'NCHW' && activation === 'prelu' &&\n        preluActivationWeights.shape.length === 1 &&\n        preluActivationWeights.shape[0] !== 1) {\n      const reshapedAlpha = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: [preluActivationWeights.shape[0], 1, 1]}\n      });\n      result = applyActivation(\n          backend, result, activation, reshapedAlpha, leakyreluAlpha);\n      backend.disposeIntermediateTensorInfo(reshapedAlpha);\n    } else {\n      result = applyActivation(\n          backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    }\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  return result;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedConv2D as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}