{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n/**\n * A ring buffer, providing O(1) FIFO, LIFO, and related operations.\n */\nexport class RingBuffer {\n  /**\n   * Constructs a `RingBuffer`.\n   * @param capacity The number of items that the buffer can accomodate.\n   */\n  constructor(capacity) {\n    this.capacity = capacity;\n    // Note we store the indices in the range 0 <= index < 2*capacity.\n    // This allows us to distinguish the full from the empty case.\n    // See https://www.snellman.net/blog/archive/2016-12-13-ring-buffers/\n    this.begin = 0; // inclusive\n    this.end = 0; // exclusive\n    if (capacity == null) {\n      throw new RangeError('Can\\'t create a ring buffer of unknown capacity.');\n    }\n    if (capacity < 1) {\n      throw new RangeError('Can\\'t create ring buffer of capacity < 1.');\n    }\n    this.data = new Array(capacity);\n    this.doubledCapacity = 2 * capacity;\n  }\n  /**\n   * Map any index into the range 0 <= index < 2*capacity.\n   */\n  wrap(index) {\n    // don't trust % on negative numbers\n    while (index < 0) {\n      index += this.doubledCapacity;\n    }\n    return index % this.doubledCapacity;\n  }\n  get(index) {\n    if (index < 0) {\n      throw new RangeError('Can\\'t get item at a negative index.');\n    }\n    return this.data[index % this.capacity];\n  }\n  set(index, value) {\n    if (index < 0) {\n      throw new RangeError('Can\\'t set item at a negative index.');\n    }\n    this.data[index % this.capacity] = value;\n  }\n  /**\n   * Returns the current number of items in the buffer.\n   */\n  length() {\n    let length = this.end - this.begin;\n    if (length < 0) {\n      length = this.doubledCapacity + length;\n    }\n    return length;\n  }\n  /**\n   * Reports whether the buffer is full.\n   * @returns true if the number of items in the buffer equals its capacity, and\n   *   false otherwise.\n   */\n  isFull() {\n    return this.length() === this.capacity;\n  }\n  /**\n   * Reports whether the buffer is empty.\n   * @returns true if the number of items in the buffer equals zero, and\n   *   false otherwise.\n   */\n  isEmpty() {\n    return this.length() === 0;\n  }\n  /**\n   * Adds an item to the end of the buffer.\n   */\n  push(value) {\n    if (this.isFull()) {\n      throw new RangeError('Ring buffer is full.');\n    }\n    this.set(this.end, value);\n    this.end = this.wrap(this.end + 1);\n  }\n  /**\n   * Adds many items to the end of the buffer, in order.\n   */\n  pushAll(values) {\n    for (const value of values) {\n      this.push(value);\n    }\n  }\n  /**\n   * Removes and returns the last item in the buffer.\n   */\n  pop() {\n    if (this.isEmpty()) {\n      throw new RangeError('Ring buffer is empty.');\n    }\n    this.end = this.wrap(this.end - 1);\n    const result = this.get(this.end);\n    this.set(this.end, undefined);\n    return result;\n  }\n  /**\n   * Adds an item to the beginning of the buffer.\n   */\n  unshift(value) {\n    if (this.isFull()) {\n      throw new RangeError('Ring buffer is full.');\n    }\n    this.begin = this.wrap(this.begin - 1);\n    this.set(this.begin, value);\n  }\n  /**\n   * Removes and returns the first item in the buffer.\n   */\n  shift() {\n    if (this.isEmpty()) {\n      throw new RangeError('Ring buffer is empty.');\n    }\n    const result = this.get(this.begin);\n    this.set(this.begin, undefined);\n    this.begin = this.wrap(this.begin + 1);\n    return result;\n  }\n  /**\n   * Removes and returns a specific item in the buffer, and moves the last item\n   * to the vacated slot.  This is useful for implementing a shuffling stream.\n   * Note that this operation necessarily scrambles the original order.\n   *\n   * @param relativeIndex: the index of the item to remove, relative to the\n   *   first item in the buffer (e.g., hiding the ring nature of the underlying\n   *   storage).\n   */\n  shuffleExcise(relativeIndex) {\n    if (this.isEmpty()) {\n      throw new RangeError('Ring buffer is empty.');\n    }\n    const index = this.wrap(this.begin + relativeIndex);\n    const result = this.get(index);\n    this.set(index, this.pop());\n    return result;\n  }\n}","map":{"version":3,"sources":["../../src/util/ring_buffer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n/**\n * A ring buffer, providing O(1) FIFO, LIFO, and related operations.\n */\nexport class RingBuffer {\n    /**\n     * Constructs a `RingBuffer`.\n     * @param capacity The number of items that the buffer can accomodate.\n     */\n    constructor(capacity) {\n        this.capacity = capacity;\n        // Note we store the indices in the range 0 <= index < 2*capacity.\n        // This allows us to distinguish the full from the empty case.\n        // See https://www.snellman.net/blog/archive/2016-12-13-ring-buffers/\n        this.begin = 0; // inclusive\n        this.end = 0; // exclusive\n        if (capacity == null) {\n            throw new RangeError('Can\\'t create a ring buffer of unknown capacity.');\n        }\n        if (capacity < 1) {\n            throw new RangeError('Can\\'t create ring buffer of capacity < 1.');\n        }\n        this.data = new Array(capacity);\n        this.doubledCapacity = 2 * capacity;\n    }\n    /**\n     * Map any index into the range 0 <= index < 2*capacity.\n     */\n    wrap(index) {\n        // don't trust % on negative numbers\n        while (index < 0) {\n            index += this.doubledCapacity;\n        }\n        return index % this.doubledCapacity;\n    }\n    get(index) {\n        if (index < 0) {\n            throw new RangeError('Can\\'t get item at a negative index.');\n        }\n        return this.data[index % this.capacity];\n    }\n    set(index, value) {\n        if (index < 0) {\n            throw new RangeError('Can\\'t set item at a negative index.');\n        }\n        this.data[index % this.capacity] = value;\n    }\n    /**\n     * Returns the current number of items in the buffer.\n     */\n    length() {\n        let length = this.end - this.begin;\n        if (length < 0) {\n            length = this.doubledCapacity + length;\n        }\n        return length;\n    }\n    /**\n     * Reports whether the buffer is full.\n     * @returns true if the number of items in the buffer equals its capacity, and\n     *   false otherwise.\n     */\n    isFull() {\n        return this.length() === this.capacity;\n    }\n    /**\n     * Reports whether the buffer is empty.\n     * @returns true if the number of items in the buffer equals zero, and\n     *   false otherwise.\n     */\n    isEmpty() {\n        return this.length() === 0;\n    }\n    /**\n     * Adds an item to the end of the buffer.\n     */\n    push(value) {\n        if (this.isFull()) {\n            throw new RangeError('Ring buffer is full.');\n        }\n        this.set(this.end, value);\n        this.end = this.wrap(this.end + 1);\n    }\n    /**\n     * Adds many items to the end of the buffer, in order.\n     */\n    pushAll(values) {\n        for (const value of values) {\n            this.push(value);\n        }\n    }\n    /**\n     * Removes and returns the last item in the buffer.\n     */\n    pop() {\n        if (this.isEmpty()) {\n            throw new RangeError('Ring buffer is empty.');\n        }\n        this.end = this.wrap(this.end - 1);\n        const result = this.get(this.end);\n        this.set(this.end, undefined);\n        return result;\n    }\n    /**\n     * Adds an item to the beginning of the buffer.\n     */\n    unshift(value) {\n        if (this.isFull()) {\n            throw new RangeError('Ring buffer is full.');\n        }\n        this.begin = this.wrap(this.begin - 1);\n        this.set(this.begin, value);\n    }\n    /**\n     * Removes and returns the first item in the buffer.\n     */\n    shift() {\n        if (this.isEmpty()) {\n            throw new RangeError('Ring buffer is empty.');\n        }\n        const result = this.get(this.begin);\n        this.set(this.begin, undefined);\n        this.begin = this.wrap(this.begin + 1);\n        return result;\n    }\n    /**\n     * Removes and returns a specific item in the buffer, and moves the last item\n     * to the vacated slot.  This is useful for implementing a shuffling stream.\n     * Note that this operation necessarily scrambles the original order.\n     *\n     * @param relativeIndex: the index of the item to remove, relative to the\n     *   first item in the buffer (e.g., hiding the ring nature of the underlying\n     *   storage).\n     */\n    shuffleExcise(relativeIndex) {\n        if (this.isEmpty()) {\n            throw new RangeError('Ring buffer is empty.');\n        }\n        const index = this.wrap(this.begin + relativeIndex);\n        const result = this.get(index);\n        this.set(index, this.pop());\n        return result;\n    }\n}\n//# sourceMappingURL=ring_buffer.js.map"]},"metadata":{},"sourceType":"module"}