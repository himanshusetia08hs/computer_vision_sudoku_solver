{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ExpandDims, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nexport function expandDims(args) {\n  const {\n    inputs,\n    attrs,\n    backend\n  } = args;\n  const {\n    input\n  } = inputs;\n  const {\n    dim\n  } = attrs;\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(-(inputRank + 1) <= dim, () => `Axis must be in the interval [${-(inputRank + 1)}, ${inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n  return reshape({\n    inputs: {\n      x: input\n    },\n    backend,\n    attrs: {\n      shape: newShape\n    }\n  });\n}\nexport const expandDimsConfig = {\n  kernelName: ExpandDims,\n  backendName: 'wasm',\n  kernelFunc: expandDims\n};","map":{"version":3,"sources":["../../src/kernels/ExpandDims.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,UAAU,EAA+D,IAAI,QAAO,uBAAuB;AAGnH,SAAQ,OAAO,QAAO,WAAW;AAEjC,OAAM,SAAU,UAAU,CAAC,IAI1B,EAAA;EACC,MAAM;IAAC,MAAM;IAAE,KAAK;IAAE;EAAO,CAAC,GAAG,IAAI;EACrC,MAAM;IAAC;EAAK,CAAC,GAAG,MAAM;EACtB,MAAM;IAAC;EAAG,CAAC,GAAG,KAAK;EAEnB,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM;EACpC,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE;EACpC,IAAI,IAAI,GAAG,GAAG;EACd,IAAI,GAAG,GAAG,CAAC,EAAE;IACX;IACA,IAAI,CAAC,MAAM,CACP,EAAE,SAAS,GAAG,CAAC,CAAC,IAAI,GAAG,EACvB,MAAM,iCAAiC,EAAG,SAAS,GAAG,CAAC,CAAC,KACpD,SAAS,GAAG,CAAC;IACrB,IAAI,GAAG,SAAS,GAAG,GAAG,GAAG,CAAC;EAC3B;EACD,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;EAE3B,OAAO,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAK,CAAC;IAAE,OAAO;IAAE,KAAK,EAAE;MAAC,KAAK,EAAE;IAAQ;EAAC,CAAC,CAAC;AACzE;AAEA,OAAO,MAAM,gBAAgB,GAAiB;EAC5C,UAAU,EAAE,UAAU;EACtB,WAAW,EAAE,MAAM;EACnB,UAAU,EAAE;CACb","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ExpandDims, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nexport function expandDims(args) {\n    const { inputs, attrs, backend } = args;\n    const { input } = inputs;\n    const { dim } = attrs;\n    const inputRank = input.shape.length;\n    const newShape = input.shape.slice();\n    let $dim = dim;\n    if (dim < 0) {\n        // Negative value is counted from the tail of rank.\n        util.assert(-(inputRank + 1) <= dim, () => `Axis must be in the interval [${-(inputRank + 1)}, ${inputRank}]`);\n        $dim = inputRank + dim + 1;\n    }\n    newShape.splice($dim, 0, 1);\n    return reshape({ inputs: { x: input }, backend, attrs: { shape: newShape } });\n}\nexport const expandDimsConfig = {\n    kernelName: ExpandDims,\n    backendName: 'wasm',\n    kernelFunc: expandDims,\n};\n//# sourceMappingURL=ExpandDims.js.map"]},"metadata":{},"sourceType":"module"}