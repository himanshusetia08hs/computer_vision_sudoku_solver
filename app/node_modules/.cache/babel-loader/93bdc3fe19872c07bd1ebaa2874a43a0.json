{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LogicalNot } from '@tensorflow/tfjs-core';\nimport { createUnaryKernelConfig } from './unary_kernel';\nexport const logicalNotConfig = createUnaryKernelConfig(LogicalNot);","map":{"version":3,"sources":["../../../../../../tfjs-backend-wasm/src/kernels/LogicalNot.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAsB,UAAU,QAAO,uBAAuB;AAE9D,SAAQ,uBAAuB,QAAO,gBAAgB;AAEtD,OAAO,MAAM,gBAAgB,GAC3B,uBAAuB,CAAC,UAAU,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\n\nimport {createUnaryKernelConfig} from './unary_kernel';\n\nexport const logicalNotConfig: KernelConfig =\n  createUnaryKernelConfig(LogicalNot);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}