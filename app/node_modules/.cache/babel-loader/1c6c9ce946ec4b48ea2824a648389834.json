{"ast":null,"code":"import { getConnectedComponent } from \"./getLargestConnectedComponent\";\nexport default function extractBoxes(greyScale, thresholded) {\n  const results = [];\n  const size = greyScale.width;\n  const boxSize = size / 9;\n  const searchSize = boxSize / 5;\n  for (let y = 0; y < 9; y++) {\n    for (let x = 0; x < 9; x++) {\n      let minX = Number.MAX_SAFE_INTEGER;\n      let minY = Number.MAX_SAFE_INTEGER;\n      let maxX = 0;\n      let maxY = 0;\n      let pointsCount = 0;\n      const searchX1 = x * boxSize + searchSize;\n      const searchY1 = y * boxSize + searchSize;\n      const searchX2 = x * boxSize + boxSize - searchSize;\n      const searchY2 = y * boxSize + boxSize - searchSize;\n      for (let searchY = searchY1; searchY < searchY2; searchY++) {\n        for (let searchX = searchX1; searchX < searchX2; searchX++) {\n          if (thresholded.bytes[searchY * size + searchX] === 255) {\n            const component = getConnectedComponent(thresholded, searchX, searchY);\n            const foundWidth = component.bounds.bottomRight.x - component.bounds.topLeft.x;\n            const foundHeight = component.bounds.bottomRight.y - component.bounds.topLeft.y;\n            if (component.points.length > 10 && foundWidth < boxSize && foundHeight < boxSize) {\n              minX = Math.min(minX, component.bounds.topLeft.x);\n              minY = Math.min(minY, component.bounds.topLeft.y);\n              maxX = Math.max(maxX, component.bounds.bottomRight.x);\n              maxY = Math.max(maxY, component.bounds.bottomRight.y);\n              pointsCount += component.points.length;\n            }\n          }\n        }\n      }\n      const foundWidth = maxX - minX;\n      const foundHeight = maxY - minY;\n      if (pointsCount > 10 && foundWidth < boxSize && foundHeight < boxSize && foundWidth > boxSize / 10 && foundHeight > boxSize / 3) {\n        const numberImage = greyScale.subImage(Math.max(0, minX - 2), Math.max(0, minY - 2), Math.min(size - 1, maxX + 2), Math.min(size - 1, maxY + 2));\n        results.push({\n          x,\n          y,\n          minX,\n          maxX,\n          minY,\n          maxY,\n          numberImage,\n          contents: 0\n        });\n      }\n    }\n  }\n  return results;\n}","map":{"version":3,"names":["getConnectedComponent","extractBoxes","greyScale","thresholded","results","size","width","boxSize","searchSize","y","x","minX","Number","MAX_SAFE_INTEGER","minY","maxX","maxY","pointsCount","searchX1","searchY1","searchX2","searchY2","searchY","searchX","bytes","component","foundWidth","bounds","bottomRight","topLeft","foundHeight","points","length","Math","min","max","numberImage","subImage","push","contents"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/P/temp/app/src/setiaSudokuSolver/imageProcessing/extractBoxes.ts"],"sourcesContent":["import Image from \"./Image\";\nimport { getConnectedComponent } from \"./getLargestConnectedComponent\";\n\nexport interface PuzzleBox {\n  x: number;\n  y: number;\n  minX: number;\n  maxX: number;\n  minY: number;\n  maxY: number;\n  numberImage: Image;\n  contents: number;\n}\n\nexport default function extractBoxes(greyScale: Image, thresholded: Image) {\n  const results: PuzzleBox[] = [];\n  const size = greyScale.width;\n  const boxSize = size / 9;\n  const searchSize = boxSize / 5;\n\n  for (let y = 0; y < 9; y++) {\n    for (let x = 0; x < 9; x++) {\n      let minX = Number.MAX_SAFE_INTEGER;\n      let minY = Number.MAX_SAFE_INTEGER;\n      let maxX = 0;\n      let maxY = 0;\n      let pointsCount = 0;\n      const searchX1 = x * boxSize + searchSize;\n      const searchY1 = y * boxSize + searchSize;\n      const searchX2 = x * boxSize + boxSize - searchSize;\n      const searchY2 = y * boxSize + boxSize - searchSize;\n      for (let searchY = searchY1; searchY < searchY2; searchY++) {\n        for (let searchX = searchX1; searchX < searchX2; searchX++) {\n          if (thresholded.bytes[searchY * size + searchX] === 255) {\n            const component = getConnectedComponent(\n              thresholded,\n              searchX,\n              searchY\n            );\n            const foundWidth =\n              component.bounds.bottomRight.x - component.bounds.topLeft.x;\n            const foundHeight =\n              component.bounds.bottomRight.y - component.bounds.topLeft.y;\n            if (\n              component.points.length > 10 &&\n              foundWidth < boxSize &&\n              foundHeight < boxSize\n            ) {\n              minX = Math.min(minX, component.bounds.topLeft.x);\n              minY = Math.min(minY, component.bounds.topLeft.y);\n              maxX = Math.max(maxX, component.bounds.bottomRight.x);\n              maxY = Math.max(maxY, component.bounds.bottomRight.y);\n              pointsCount += component.points.length;\n            }\n          }\n        }\n      }\n\n      const foundWidth = maxX - minX;\n      const foundHeight = maxY - minY;\n      if (\n        pointsCount > 10 &&\n        foundWidth < boxSize &&\n        foundHeight < boxSize &&\n        foundWidth > boxSize / 10 &&\n        foundHeight > boxSize / 3\n      ) {\n        const numberImage = greyScale.subImage(\n          Math.max(0, minX - 2),\n          Math.max(0, minY - 2),\n          Math.min(size - 1, maxX + 2),\n          Math.min(size - 1, maxY + 2)\n        );\n        results.push({\n          x,\n          y,\n          minX,\n          maxX,\n          minY,\n          maxY,\n          numberImage,\n          contents: 0,\n        });\n      }\n    }\n  }\n  return results;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}