{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { NonMaxSuppressionV4 } from '@tensorflow/tfjs-core';\nimport { parseResultStruct } from './NonMaxSuppression_util';\nlet wasmFunc;\nfunction setup(backend) {\n  wasmFunc = backend.wasm.cwrap(NonMaxSuppressionV4, 'number',\n  // Result*\n  ['number', 'number', 'number', 'number', 'number', 'bool' // padToMaxOutputSize\n  ]);\n}\n\nfunction nonMaxSuppressionV4(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    iouThreshold,\n    maxOutputSize,\n    scoreThreshold,\n    padToMaxOutputSize\n  } = attrs;\n  const {\n    boxes,\n    scores\n  } = inputs;\n  const boxesId = backend.dataIdMap.get(boxes.dataId).id;\n  const scoresId = backend.dataIdMap.get(scores.dataId).id;\n  const resOffset = wasmFunc(boxesId, scoresId, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n  const {\n    pSelectedIndices,\n    selectedSize,\n    pSelectedScores,\n    pValidOutputs\n  } = parseResultStruct(backend, resOffset);\n  // Since we are not using scores for V4, we have to delete it from the heap.\n  backend.wasm._free(pSelectedScores);\n  const selectedIndicesTensor = backend.makeOutput([selectedSize], 'int32', pSelectedIndices);\n  const validOutputsTensor = backend.makeOutput([], 'int32', pValidOutputs);\n  return [selectedIndicesTensor, validOutputsTensor];\n}\nexport const nonMaxSuppressionV4Config = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: nonMaxSuppressionV4\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-wasm/src/kernels/NonMaxSuppressionV4.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,mBAAmB,QAAwE,uBAAuB;AAIpJ,SAAQ,iBAAiB,QAAO,0BAA0B;AAE1D,IAAI,QAGsC;AAE1C,SAAS,KAAK,CAAC,OAAoB,EAAA;EACjC,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CACzB,mBAAmB,EACnB,QAAQ;EAAG;EACX,CACE,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,MAAM,CAAK;EAAA,CACZ,CAAC;AACR;;AAEA,SAAS,mBAAmB,CAAC,IAI5B,EAAA;EACC,MAAM;IAAC,OAAO;IAAE,MAAM;IAAE;EAAK,CAAC,GAAG,IAAI;EACrC,MAAM;IAAC,YAAY;IAAE,aAAa;IAAE,cAAc;IAAE;EAAkB,CAAC,GACnE,KAAK;EACT,MAAM;IAAC,KAAK;IAAE;EAAM,CAAC,GAAG,MAAM;EAE9B,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE;EACtD,MAAM,QAAQ,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE;EAExD,MAAM,SAAS,GAAG,QAAQ,CACtB,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,YAAY,EAAE,cAAc,EAC9D,kBAAkB,CAAC;EAEvB,MAAM;IAAC,gBAAgB;IAAE,YAAY;IAAE,eAAe;IAAE;EAAa,CAAC,GAClE,iBAAiB,CAAC,OAAO,EAAE,SAAS,CAAC;EAEzC;EACA,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;EAEnC,MAAM,qBAAqB,GACvB,OAAO,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,EAAE,OAAO,EAAE,gBAAgB,CAAC;EAEjE,MAAM,kBAAkB,GAAG,OAAO,CAAC,UAAU,CAAC,EAAE,EAAE,OAAO,EAAE,aAAa,CAAC;EAEzE,OAAO,CAAC,qBAAqB,EAAE,kBAAkB,CAAC;AACpD;AAEA,OAAO,MAAM,yBAAyB,GAAiB;EACrD,UAAU,EAAE,mBAAmB;EAC/B,WAAW,EAAE,MAAM;EACnB,SAAS,EAAE,KAAK;EAChB,UAAU,EAAE;CACb","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {parseResultStruct} from './NonMaxSuppression_util';\n\nlet wasmFunc: (\n    boxesId: number, scoresId: number, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number,\n    padToMaxOutputSize: boolean) => number;\n\nfunction setup(backend: BackendWasm): void {\n  wasmFunc = backend.wasm.cwrap(\n      NonMaxSuppressionV4,\n      'number',  // Result*\n      [\n        'number',  // boxesId\n        'number',  // scoresId\n        'number',  // maxOutputSize\n        'number',  // iouThreshold\n        'number',  // scoreThreshold\n        'bool',    // padToMaxOutputSize\n      ]);\n}\n\nfunction nonMaxSuppressionV4(args: {\n  backend: BackendWasm,\n  inputs: NonMaxSuppressionV4Inputs,\n  attrs: NonMaxSuppressionV4Attrs\n}): TensorInfo[] {\n  const {backend, inputs, attrs} = args;\n  const {iouThreshold, maxOutputSize, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n  const {boxes, scores} = inputs;\n\n  const boxesId = backend.dataIdMap.get(boxes.dataId).id;\n  const scoresId = backend.dataIdMap.get(scores.dataId).id;\n\n  const resOffset = wasmFunc(\n      boxesId, scoresId, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  const {pSelectedIndices, selectedSize, pSelectedScores, pValidOutputs} =\n      parseResultStruct(backend, resOffset);\n\n  // Since we are not using scores for V4, we have to delete it from the heap.\n  backend.wasm._free(pSelectedScores);\n\n  const selectedIndicesTensor =\n      backend.makeOutput([selectedSize], 'int32', pSelectedIndices);\n\n  const validOutputsTensor = backend.makeOutput([], 'int32', pValidOutputs);\n\n  return [selectedIndicesTensor, validOutputsTensor];\n}\n\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: nonMaxSuppressionV4 as {} as KernelFunc,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}