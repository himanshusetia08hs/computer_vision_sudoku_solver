{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthToSpace, util } from '@tensorflow/tfjs-core';\nlet wasmDepthToSpace;\nfunction setup(backend) {\n  wasmDepthToSpace = backend.wasm.cwrap(DepthToSpace, null /*void*/, ['number', 'number', 'number', 'array', 'number', 'array', 'array', 'number', 'number']);\n}\nexport function depthToSpace(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockSize,\n    dataFormat\n  } = attrs;\n  util.assert(blockSize > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n  const batchSize = x.shape[0];\n  const inputHeight = dataFormat === 'NHWC' ? x.shape[1] : x.shape[2];\n  const inputWidth = dataFormat === 'NHWC' ? x.shape[2] : x.shape[3];\n  const inputDepth = dataFormat === 'NHWC' ? x.shape[3] : x.shape[1];\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n  const outputShape = dataFormat === 'NHWC' ? [batchSize, outputHeight, outputWidth, outputDepth] : [batchSize, outputDepth, outputHeight, outputWidth];\n  const out = backend.makeOutput(outputShape, 'float32');\n  const xData = backend.dataIdMap.get(x.dataId);\n  const xId = xData.id;\n  const xStridesBytes = new Uint8Array(new Int32Array(util.computeStrides(x.shape)).buffer);\n  const outputShapeBytes = new Uint8Array(new Int32Array(outputShape).buffer);\n  const outStridesBytes = new Uint8Array(new Int32Array(util.computeStrides(outputShape)).buffer);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const channelsLast = dataFormat === 'NHWC' ? 1 : 0;\n  wasmDepthToSpace(xId, blockSize, channelsLast, xStridesBytes, x.shape.length - 1, outputShapeBytes, outStridesBytes, outputShape.length, outId);\n  return out;\n}\nexport const depthToSpaceConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: depthToSpace\n};","map":{"version":3,"sources":["../../src/kernels/DepthToSpace.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAY,EAA+E,IAAI,QAAO,uBAAuB;AAIrI,IAAI,gBAGuC;AAE3C,SAAS,KAAK,CAAC,OAAoB,EAAA;EACjC,gBAAgB,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CACjE,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,OAAO,EACP,OAAO,EACP,QAAQ,EACR,QAAQ,CACT,CAAC;AACJ;AAEA,OAAM,SAAU,YAAY,CAAC,IAI5B,EAAA;EACC,MAAM;IAAC,OAAO;IAAE,MAAM;IAAE;EAAK,CAAC,GAAG,IAAI;EACrC,MAAM;IAAC;EAAC,CAAC,GAAG,MAAM;EAClB,MAAM;IAAC,SAAS;IAAE;EAAU,CAAC,GAAG,KAAK;EAErC,IAAI,CAAC,MAAM,CACP,SAAS,GAAG,CAAC,EACb,MAAM,sDAAsD,SAAS,EAAE,CAAC;EAE5E,MAAM,SAAS,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;EAC5B,MAAM,WAAW,GAAI,UAAU,KAAK,MAAM,GAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;EACrE,MAAM,UAAU,GAAI,UAAU,KAAK,MAAM,GAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;EACpE,MAAM,UAAU,GAAI,UAAU,KAAK,MAAM,GAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;EAEpE,MAAM,YAAY,GAAG,WAAW,GAAG,SAAS;EAC5C,MAAM,WAAW,GAAG,UAAU,GAAG,SAAS;EAC1C,MAAM,WAAW,GAAG,UAAU,IAAI,SAAS,GAAG,SAAS,CAAC;EAExD,MAAM,WAAW,GAAI,UAAU,KAAK,MAAM,GACtC,CAAC,SAAS,EAAE,YAAY,EAAE,WAAW,EAAE,WAAW,CAAC,GACnD,CAAC,SAAS,EAAE,WAAW,EAAE,YAAY,EAAE,WAAW,CAAC;EAEvD,MAAM,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,WAAW,EAAE,SAAS,CAAC;EAEtD,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC;EAC7C,MAAM,GAAG,GAAG,KAAK,CAAC,EAAE;EACpB,MAAM,aAAa,GACf,IAAI,UAAU,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC;EAEvE,MAAM,gBAAgB,GAAG,IAAI,UAAU,CAAC,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC;EAC3E,MAAM,eAAe,GACjB,IAAI,UAAU,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC;EAE3E,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE;EAClD,MAAM,YAAY,GAAG,UAAU,KAAK,MAAM,GAAG,CAAC,GAAG,CAAC;EAClD,gBAAgB,CACZ,GAAG,EAAE,SAAS,EAAE,YAAY,EAAE,aAAa,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAC/D,gBAAgB,EAAE,eAAe,EAAE,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC;EAEjE,OAAO,GAAG;AACZ;AAEA,OAAO,MAAM,kBAAkB,GAAiB;EAC9C,UAAU,EAAE,YAAY;EACxB,WAAW,EAAE,MAAM;EACnB,SAAS,EAAE,KAAK;EAChB,UAAU,EAAE;CACb","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthToSpace, util } from '@tensorflow/tfjs-core';\nlet wasmDepthToSpace;\nfunction setup(backend) {\n    wasmDepthToSpace = backend.wasm.cwrap(DepthToSpace, null /*void*/, [\n        'number',\n        'number',\n        'number',\n        'array',\n        'number',\n        'array',\n        'array',\n        'number',\n        'number',\n    ]);\n}\nexport function depthToSpace(args) {\n    const { backend, inputs, attrs } = args;\n    const { x } = inputs;\n    const { blockSize, dataFormat } = attrs;\n    util.assert(blockSize > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n    const batchSize = x.shape[0];\n    const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n    const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n    const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n    const outputHeight = inputHeight * blockSize;\n    const outputWidth = inputWidth * blockSize;\n    const outputDepth = inputDepth / (blockSize * blockSize);\n    const outputShape = (dataFormat === 'NHWC') ?\n        [batchSize, outputHeight, outputWidth, outputDepth] :\n        [batchSize, outputDepth, outputHeight, outputWidth];\n    const out = backend.makeOutput(outputShape, 'float32');\n    const xData = backend.dataIdMap.get(x.dataId);\n    const xId = xData.id;\n    const xStridesBytes = new Uint8Array(new Int32Array(util.computeStrides(x.shape)).buffer);\n    const outputShapeBytes = new Uint8Array(new Int32Array(outputShape).buffer);\n    const outStridesBytes = new Uint8Array(new Int32Array(util.computeStrides(outputShape)).buffer);\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    const channelsLast = dataFormat === 'NHWC' ? 1 : 0;\n    wasmDepthToSpace(xId, blockSize, channelsLast, xStridesBytes, x.shape.length - 1, outputShapeBytes, outStridesBytes, outputShape.length, outId);\n    return out;\n}\nexport const depthToSpaceConfig = {\n    kernelName: DepthToSpace,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: depthToSpace\n};\n//# sourceMappingURL=DepthToSpace.js.map"]},"metadata":{},"sourceType":"module"}