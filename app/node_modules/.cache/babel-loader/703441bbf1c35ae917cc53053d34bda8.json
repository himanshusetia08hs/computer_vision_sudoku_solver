{"ast":null,"code":"var _jsxFileName = \"F:\\\\extension\\\\SEM 7\\\\NN\\\\Lab\\\\my lab\\\\P\\\\temp\\\\app\\\\src\\\\App.tsx\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Processor from \"./setiaSudokuSolver/Processor\";\n// start processing video\nconst processor = new Processor();\nfunction App() {\n  const videoRef = useRef(null);\n  const previewCanvasRef = useRef(null);\n  const [videoWidth, setVideoWidth] = useState(100);\n  const [videoHeight, setVideoHeight] = useState(100);\n  const [imageCaptureTime, setImageCaptureTime] = useState(0);\n  const [thresholdTime, setThresholdTime] = useState(0);\n  const [connectedComponentTime, setConnectedComponentTime] = useState(0);\n  const [getCornerPointsTime, setGetCornerPOintsTime] = useState(0);\n  const [extractImageTime, setExtractImageTime] = useState(0);\n  const [extractBoxesTime, setExtractBoxesTime] = useState(0);\n  const [ocrTime, setOcrTime] = useState(0);\n  const [solveTime, setSolveTime] = useState(0);\n\n  // start the video playing\n  useEffect(() => {\n    const video = videoRef.current;\n    if (video) {\n      processor.startVideo(video).then(() => console.log(\"Video started\"), error => alert(error.message));\n    }\n  }, [videoRef]);\n\n  // render the overlay\n  useEffect(() => {\n    const interval = window.setInterval(() => {\n      const canvas = previewCanvasRef.current;\n      if (canvas && processor.isVideoRunning) {\n        // update the peformance stats\n        setImageCaptureTime(processor.captureTime);\n        setThresholdTime(processor.thresholdTime);\n        setConnectedComponentTime(processor.connectedComponentTime);\n        setGetCornerPOintsTime(processor.cornerPointTime);\n        setExtractImageTime(processor.extractPuzzleTime);\n        setExtractBoxesTime(processor.extractBoxesTime);\n        setOcrTime(processor.neuralNetTime);\n        setSolveTime(processor.solveTime);\n        // display the output from the processor\n        const context = canvas.getContext(\"2d\");\n        if (context) {\n          context.drawImage(processor.video, 0, 0);\n          if (processor.corners) {\n            const {\n              topLeft,\n              topRight,\n              bottomLeft,\n              bottomRight\n            } = processor.corners;\n            context.strokeStyle = \"rgba(255,0,0,0.5)\";\n            context.fillStyle = \"rgba(0,0,0,0.3)\";\n            context.lineWidth = 3;\n            context.beginPath();\n            context.moveTo(topLeft.x, topLeft.y);\n            context.lineTo(topRight.x, topRight.y);\n            context.lineTo(bottomRight.x, bottomRight.y);\n            context.lineTo(bottomLeft.x, bottomLeft.y);\n            context.closePath();\n            context.stroke();\n            context.fill();\n          }\n          if (processor.gridLines) {\n            context.strokeStyle = \"rgba(255,0,0,0.5)\";\n            context.lineWidth = 2;\n            processor.gridLines.forEach(line => {\n              context.moveTo(line.p1.x, line.p1.y);\n              context.lineTo(line.p2.x, line.p2.y);\n            });\n            context.stroke();\n          }\n          if (processor.solvedPuzzle) {\n            context.fillStyle = \"rgba(255,0,0,1)\";\n            for (let y = 0; y < 9; y++) {\n              for (let x = 0; x < 9; x++) {\n                if (processor.solvedPuzzle[y][x]) {\n                  const {\n                    digit,\n                    digitHeight,\n                    digitRotation,\n                    position,\n                    isKnown\n                  } = processor.solvedPuzzle[y][x];\n                  if (!isKnown) {\n                    context.font = `bold ${digitHeight}px sans-serif`;\n                    context.translate(position.x, position.y);\n                    context.rotate(Math.PI - digitRotation);\n                    context.fillText(digit.toString(), -digitHeight / 4, digitHeight / 3);\n                    context.setTransform();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }, 100);\n    return () => {\n      window.clearInterval(interval);\n    };\n  }, [previewCanvasRef]);\n\n  // update the video scale as needed\n  useEffect(() => {\n    function videoReadyListener(_ref) {\n      let {\n        width,\n        height\n      } = _ref;\n      setVideoWidth(width);\n      setVideoHeight(height);\n    }\n    processor.on(\"videoReady\", videoReadyListener);\n    return () => {\n      processor.off(\"videoReady\", videoReadyListener);\n    };\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    ref: videoRef,\n    className: \"video-preview\",\n    width: 10,\n    height: 10,\n    playsInline: true,\n    muted: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: previewCanvasRef,\n    className: \"preview-canvas\",\n    width: videoWidth,\n    height: videoHeight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }));\n}\nexport default App;","map":{"version":3,"names":["React","useRef","useState","useEffect","Processor","processor","App","videoRef","previewCanvasRef","videoWidth","setVideoWidth","videoHeight","setVideoHeight","imageCaptureTime","setImageCaptureTime","thresholdTime","setThresholdTime","connectedComponentTime","setConnectedComponentTime","getCornerPointsTime","setGetCornerPOintsTime","extractImageTime","setExtractImageTime","extractBoxesTime","setExtractBoxesTime","ocrTime","setOcrTime","solveTime","setSolveTime","video","current","startVideo","then","console","log","error","alert","message","interval","window","setInterval","canvas","isVideoRunning","captureTime","cornerPointTime","extractPuzzleTime","neuralNetTime","context","getContext","drawImage","corners","topLeft","topRight","bottomLeft","bottomRight","strokeStyle","fillStyle","lineWidth","beginPath","moveTo","x","y","lineTo","closePath","stroke","fill","gridLines","forEach","line","p1","p2","solvedPuzzle","digit","digitHeight","digitRotation","position","isKnown","font","translate","rotate","Math","PI","fillText","toString","setTransform","clearInterval","videoReadyListener","width","height","on","off"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/P/temp/app/src/App.tsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Processor, { VideoReadyPayload } from \"./setiaSudokuSolver/Processor\";\nimport StatsPanel from \"./components/StatsPanel\";\n\n// start processing video\nconst processor = new Processor();\n\nfunction App() {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const previewCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const [videoWidth, setVideoWidth] = useState(100);\n  const [videoHeight, setVideoHeight] = useState(100);\n\n  const [imageCaptureTime, setImageCaptureTime] = useState(0);\n  const [thresholdTime, setThresholdTime] = useState(0);\n  const [connectedComponentTime, setConnectedComponentTime] = useState(0);\n  const [getCornerPointsTime, setGetCornerPOintsTime] = useState(0);\n  const [extractImageTime, setExtractImageTime] = useState(0);\n  const [extractBoxesTime, setExtractBoxesTime] = useState(0);\n  const [ocrTime, setOcrTime] = useState(0);\n  const [solveTime, setSolveTime] = useState(0);\n\n  // start the video playing\n  useEffect(() => {\n    const video = videoRef.current;\n    if (video) {\n      processor.startVideo(video).then(\n        () => console.log(\"Video started\"),\n        (error) => alert(error.message)\n      );\n    }\n  }, [videoRef]);\n\n  // render the overlay\n  useEffect(() => {\n    const interval = window.setInterval(() => {\n      const canvas = previewCanvasRef.current;\n      if (canvas && processor.isVideoRunning) {\n        // update the peformance stats\n        setImageCaptureTime(processor.captureTime);\n        setThresholdTime(processor.thresholdTime);\n        setConnectedComponentTime(processor.connectedComponentTime);\n        setGetCornerPOintsTime(processor.cornerPointTime);\n        setExtractImageTime(processor.extractPuzzleTime);\n        setExtractBoxesTime(processor.extractBoxesTime);\n        setOcrTime(processor.neuralNetTime);\n        setSolveTime(processor.solveTime);\n        // display the output from the processor\n        const context = canvas.getContext(\"2d\");\n        if (context) {\n          context.drawImage(processor.video, 0, 0);\n          if (processor.corners) {\n            const {\n              topLeft,\n              topRight,\n              bottomLeft,\n              bottomRight,\n            } = processor.corners;\n            context.strokeStyle = \"rgba(255,0,0,0.5)\";\n            context.fillStyle = \"rgba(0,0,0,0.3)\";\n            context.lineWidth = 3;\n            context.beginPath();\n            context.moveTo(topLeft.x, topLeft.y);\n            context.lineTo(topRight.x, topRight.y);\n            context.lineTo(bottomRight.x, bottomRight.y);\n            context.lineTo(bottomLeft.x, bottomLeft.y);\n            context.closePath();\n            context.stroke();\n            context.fill();\n          }\n          if (processor.gridLines) {\n            context.strokeStyle = \"rgba(255,0,0,0.5)\";\n            context.lineWidth = 2;\n            processor.gridLines.forEach((line) => {\n              context.moveTo(line.p1.x, line.p1.y);\n              context.lineTo(line.p2.x, line.p2.y);\n            });\n            context.stroke();\n          }\n          if (processor.solvedPuzzle) {\n            context.fillStyle = \"rgba(255,0,0,1)\";\n            for (let y = 0; y < 9; y++) {\n              for (let x = 0; x < 9; x++) {\n                if (processor.solvedPuzzle[y][x]) {\n                  const {\n                    digit,\n                    digitHeight,\n                    digitRotation,\n                    position,\n                    isKnown,\n                  } = processor.solvedPuzzle[y][x];\n                  if (!isKnown) {\n                    context.font = `bold ${digitHeight}px sans-serif`;\n                    context.translate(position.x, position.y);\n                    context.rotate(Math.PI - digitRotation);\n                    context.fillText(\n                      digit.toString(),\n                      -digitHeight / 4,\n                      digitHeight / 3\n                    );\n                    context.setTransform();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }, 100);\n    return () => {\n      window.clearInterval(interval);\n    };\n  }, [previewCanvasRef]);\n\n  // update the video scale as needed\n  useEffect(() => {\n    function videoReadyListener({ width, height }: VideoReadyPayload) {\n      setVideoWidth(width);\n      setVideoHeight(height);\n    }\n    processor.on(\"videoReady\", videoReadyListener);\n    return () => {\n      processor.off(\"videoReady\", videoReadyListener);\n    };\n  });\n\n  return (\n    <div className=\"App\">\n      {/* need to have a visible video for mobile safari to work */}\n      <video\n        ref={videoRef}\n        className=\"video-preview\"\n        width={10}\n        height={10}\n        playsInline\n        muted\n      />\n      <canvas\n        ref={previewCanvasRef}\n        className=\"preview-canvas\"\n        width={videoWidth}\n        height={videoHeight}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}