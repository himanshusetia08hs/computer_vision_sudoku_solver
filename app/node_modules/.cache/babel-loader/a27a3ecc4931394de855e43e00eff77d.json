{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { isNumber } from '../../utils/is';\nimport { createRng } from './util/seededRNG';\nimport { flatten } from '../../utils/array';\nvar name = 'pickRandom';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createPickRandom = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    on = _ref.on;\n  // seeded pseudo random number generator\n  var rng = createRng(config.randomSeed);\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n  /**\n   * Random pick one or more values from a one dimensional array.\n   * Array elements are picked using a random function with uniform or weighted distribution.\n   *\n   * Syntax:\n   *\n   *     math.pickRandom(array)\n   *     math.pickRandom(array, number)\n   *     math.pickRandom(array, weights)\n   *     math.pickRandom(array, number, weights)\n   *     math.pickRandom(array, weights, number)\n   *\n   * Examples:\n   *\n   *     math.pickRandom([3, 6, 12, 2])                  // returns one of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], 2)               // returns an array of two of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1])    // returns one of the values in the array with weighted distribution\n   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]) // returns an array of two of the values in the array with weighted distribution\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2) // returns an array of two of the values in the array with weighted distribution\n   *\n   * See also:\n   *\n   *     random, randomInt\n   *\n   * @param {Array | Matrix} array     A one dimensional array\n   * @param {Int} number               An int or float\n   * @param {Array | Matrix} weights   An array of ints or floats\n   * @return {number | Array}          Returns a single random value from array when number is 1 or undefined.\n   *                                   Returns an array with the configured number of elements when number is > 1.\n   */\n\n  return typed({\n    'Array | Matrix': function ArrayMatrix(possibles) {\n      return _pickRandom(possibles);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(possibles, number) {\n      return _pickRandom(possibles, number, undefined);\n    },\n    'Array | Matrix, Array': function ArrayMatrixArray(possibles, weights) {\n      return _pickRandom(possibles, undefined, weights);\n    },\n    'Array | Matrix, Array | Matrix, number': function ArrayMatrixArrayMatrixNumber(possibles, weights, number) {\n      return _pickRandom(possibles, number, weights);\n    },\n    'Array | Matrix, number, Array | Matrix': function ArrayMatrixNumberArrayMatrix(possibles, number, weights) {\n      return _pickRandom(possibles, number, weights);\n    }\n  });\n  function _pickRandom(possibles, number, weights) {\n    var single = typeof number === 'undefined';\n    if (single) {\n      number = 1;\n    }\n    possibles = flatten(possibles.valueOf()).valueOf(); // get Array\n\n    if (weights) {\n      weights = weights.valueOf(); // get Array\n    }\n\n    var totalWeights = 0;\n    if (typeof weights !== 'undefined') {\n      if (weights.length !== possibles.length) {\n        throw new Error('Weights must have the same length as possibles');\n      }\n      for (var i = 0, len = weights.length; i < len; i++) {\n        if (!isNumber(weights[i]) || weights[i] < 0) {\n          throw new Error('Weights must be an array of positive numbers');\n        }\n        totalWeights += weights[i];\n      }\n    }\n    var length = possibles.length;\n    if (length === 0) {\n      return [];\n    } else if (number >= length) {\n      return number > 1 ? possibles : possibles[0];\n    }\n    var result = [];\n    var pick;\n    while (result.length < number) {\n      if (typeof weights === 'undefined') {\n        pick = possibles[Math.floor(rng() * length)];\n      } else {\n        var randKey = rng() * totalWeights;\n        for (var _i = 0, _len = possibles.length; _i < _len; _i++) {\n          randKey -= weights[_i];\n          if (randKey < 0) {\n            pick = possibles[_i];\n            break;\n          }\n        }\n      }\n      if (result.indexOf(pick) === -1) {\n        result.push(pick);\n      }\n    }\n    return single ? result[0] : result; // TODO: return matrix when input was a matrix\n    // TODO: add support for multi dimensional matrices\n  }\n});","map":{"version":3,"names":["factory","isNumber","createRng","flatten","name","dependencies","createPickRandom","_ref","typed","config","on","rng","randomSeed","curr","prev","ArrayMatrix","possibles","_pickRandom","ArrayMatrixNumber","number","undefined","ArrayMatrixArray","weights","ArrayMatrixArrayMatrixNumber","ArrayMatrixNumberArrayMatrix","single","valueOf","totalWeights","length","Error","i","len","result","pick","Math","floor","randKey","_i","_len","indexOf","push"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/Project/temp/app/node_modules/mathjs/es/function/probability/pickRandom.js"],"sourcesContent":["import { factory } from '../../utils/factory';\nimport { isNumber } from '../../utils/is';\nimport { createRng } from './util/seededRNG';\nimport { flatten } from '../../utils/array';\nvar name = 'pickRandom';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createPickRandom = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      on = _ref.on;\n  // seeded pseudo random number generator\n  var rng = createRng(config.randomSeed);\n\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n  /**\n   * Random pick one or more values from a one dimensional array.\n   * Array elements are picked using a random function with uniform or weighted distribution.\n   *\n   * Syntax:\n   *\n   *     math.pickRandom(array)\n   *     math.pickRandom(array, number)\n   *     math.pickRandom(array, weights)\n   *     math.pickRandom(array, number, weights)\n   *     math.pickRandom(array, weights, number)\n   *\n   * Examples:\n   *\n   *     math.pickRandom([3, 6, 12, 2])                  // returns one of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], 2)               // returns an array of two of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1])    // returns one of the values in the array with weighted distribution\n   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]) // returns an array of two of the values in the array with weighted distribution\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2) // returns an array of two of the values in the array with weighted distribution\n   *\n   * See also:\n   *\n   *     random, randomInt\n   *\n   * @param {Array | Matrix} array     A one dimensional array\n   * @param {Int} number               An int or float\n   * @param {Array | Matrix} weights   An array of ints or floats\n   * @return {number | Array}          Returns a single random value from array when number is 1 or undefined.\n   *                                   Returns an array with the configured number of elements when number is > 1.\n   */\n\n\n  return typed({\n    'Array | Matrix': function ArrayMatrix(possibles) {\n      return _pickRandom(possibles);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(possibles, number) {\n      return _pickRandom(possibles, number, undefined);\n    },\n    'Array | Matrix, Array': function ArrayMatrixArray(possibles, weights) {\n      return _pickRandom(possibles, undefined, weights);\n    },\n    'Array | Matrix, Array | Matrix, number': function ArrayMatrixArrayMatrixNumber(possibles, weights, number) {\n      return _pickRandom(possibles, number, weights);\n    },\n    'Array | Matrix, number, Array | Matrix': function ArrayMatrixNumberArrayMatrix(possibles, number, weights) {\n      return _pickRandom(possibles, number, weights);\n    }\n  });\n\n  function _pickRandom(possibles, number, weights) {\n    var single = typeof number === 'undefined';\n\n    if (single) {\n      number = 1;\n    }\n\n    possibles = flatten(possibles.valueOf()).valueOf(); // get Array\n\n    if (weights) {\n      weights = weights.valueOf(); // get Array\n    }\n\n    var totalWeights = 0;\n\n    if (typeof weights !== 'undefined') {\n      if (weights.length !== possibles.length) {\n        throw new Error('Weights must have the same length as possibles');\n      }\n\n      for (var i = 0, len = weights.length; i < len; i++) {\n        if (!isNumber(weights[i]) || weights[i] < 0) {\n          throw new Error('Weights must be an array of positive numbers');\n        }\n\n        totalWeights += weights[i];\n      }\n    }\n\n    var length = possibles.length;\n\n    if (length === 0) {\n      return [];\n    } else if (number >= length) {\n      return number > 1 ? possibles : possibles[0];\n    }\n\n    var result = [];\n    var pick;\n\n    while (result.length < number) {\n      if (typeof weights === 'undefined') {\n        pick = possibles[Math.floor(rng() * length)];\n      } else {\n        var randKey = rng() * totalWeights;\n\n        for (var _i = 0, _len = possibles.length; _i < _len; _i++) {\n          randKey -= weights[_i];\n\n          if (randKey < 0) {\n            pick = possibles[_i];\n            break;\n          }\n        }\n      }\n\n      if (result.indexOf(pick) === -1) {\n        result.push(pick);\n      }\n    }\n\n    return single ? result[0] : result; // TODO: return matrix when input was a matrix\n    // TODO: add support for multi dimensional matrices\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}