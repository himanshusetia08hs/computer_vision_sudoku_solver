{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\nimport { CppDType } from './types';\nlet wasmTranspose;\nfunction setup(backend) {\n  wasmTranspose = backend.wasm.cwrap(Transpose, null /* void */, ['number', 'array', 'number', 'number', 'number', 'array', 'number']);\n}\nexport function transpose(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  // Reduce any dimensions with size one. Lower-rank transpose kernel performs\n  // better due to simpler memory access pattern.\n  const [reducedShape, perm] = removeOneSizeDims(inputs.x.shape, attrs.perm);\n  let permIsNoOp = true;\n  for (let i = 0; i < perm.length; i++) {\n    if (perm[i] !== i) {\n      permIsNoOp = false;\n    }\n  }\n  const outShape = computeOutShape(inputs.x.shape, attrs.perm);\n  const x = {\n    dataId: inputs.x.dataId,\n    shape: reducedShape,\n    dtype: inputs.x.dtype\n  };\n  if (permIsNoOp) {\n    const cloned = identity({\n      inputs,\n      backend\n    });\n    cloned.shape = outShape;\n    return cloned;\n  }\n  const out = backend.makeOutput(outShape, x.dtype);\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const permBytes = new Uint8Array(new Int32Array(perm).buffer);\n  const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n  wasmTranspose(xId, xShapeBytes, x.shape.length, CppDType[x.dtype], outId, permBytes, perm.length);\n  return out;\n}\nfunction computeOutShape(inShape, perm) {\n  const outShape = new Array(inShape.length);\n  for (let i = 0; i < outShape.length; i++) {\n    outShape[i] = inShape[perm[i]];\n  }\n  return outShape;\n}\nfunction removeOneSizeDims(shape, perm) {\n  const newShape = [];\n  const newPerm = [];\n  for (let i = 0; i < shape.length; ++i) {\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n    }\n    if (shape[perm[i]] !== 1) {\n      newPerm.push(perm[i]);\n    }\n  }\n  for (let i = 0; i < newPerm.length; ++i) {\n    let minValIdx = -1;\n    for (let j = 0; j < newPerm.length; ++j) {\n      if (newPerm[j] >= i && (minValIdx === -1 || newPerm[minValIdx] > newPerm[j])) {\n        minValIdx = j;\n      }\n    }\n    newPerm[minValIdx] = i;\n  }\n  return [newShape, newPerm];\n}\nexport const transposeConfig = {\n  kernelName: Transpose,\n  backendName: 'wasm',\n  kernelFunc: transpose,\n  setupFunc: setup\n};","map":{"version":3,"sources":["../../src/kernels/Transpose.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\nimport { CppDType } from './types';\nlet wasmTranspose;\nfunction setup(backend) {\n    wasmTranspose = backend.wasm.cwrap(Transpose, null /* void */, [\n        'number',\n        'array',\n        'number',\n        'number',\n        'number',\n        'array',\n        'number',\n    ]);\n}\nexport function transpose(args) {\n    const { inputs, backend, attrs } = args;\n    // Reduce any dimensions with size one. Lower-rank transpose kernel performs\n    // better due to simpler memory access pattern.\n    const [reducedShape, perm] = removeOneSizeDims(inputs.x.shape, attrs.perm);\n    let permIsNoOp = true;\n    for (let i = 0; i < perm.length; i++) {\n        if (perm[i] !== i) {\n            permIsNoOp = false;\n        }\n    }\n    const outShape = computeOutShape(inputs.x.shape, attrs.perm);\n    const x = {\n        dataId: inputs.x.dataId,\n        shape: reducedShape,\n        dtype: inputs.x.dtype\n    };\n    if (permIsNoOp) {\n        const cloned = identity({ inputs, backend });\n        cloned.shape = outShape;\n        return cloned;\n    }\n    const out = backend.makeOutput(outShape, x.dtype);\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    const permBytes = new Uint8Array(new Int32Array(perm).buffer);\n    const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n    wasmTranspose(xId, xShapeBytes, x.shape.length, CppDType[x.dtype], outId, permBytes, perm.length);\n    return out;\n}\nfunction computeOutShape(inShape, perm) {\n    const outShape = new Array(inShape.length);\n    for (let i = 0; i < outShape.length; i++) {\n        outShape[i] = inShape[perm[i]];\n    }\n    return outShape;\n}\nfunction removeOneSizeDims(shape, perm) {\n    const newShape = [];\n    const newPerm = [];\n    for (let i = 0; i < shape.length; ++i) {\n        if (shape[i] !== 1) {\n            newShape.push(shape[i]);\n        }\n        if (shape[perm[i]] !== 1) {\n            newPerm.push(perm[i]);\n        }\n    }\n    for (let i = 0; i < newPerm.length; ++i) {\n        let minValIdx = -1;\n        for (let j = 0; j < newPerm.length; ++j) {\n            if (newPerm[j] >= i &&\n                (minValIdx === -1 || newPerm[minValIdx] > newPerm[j])) {\n                minValIdx = j;\n            }\n        }\n        newPerm[minValIdx] = i;\n    }\n    return [newShape, newPerm];\n}\nexport const transposeConfig = {\n    kernelName: Transpose,\n    backendName: 'wasm',\n    kernelFunc: transpose,\n    setupFunc: setup,\n};\n//# sourceMappingURL=Transpose.js.map"]},"metadata":{},"sourceType":"module"}