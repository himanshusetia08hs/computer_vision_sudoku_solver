{"ast":null,"code":"function getNearestPoint(points, x, y) {\n  let closestPoint = points[0];\n  let minDistance = Number.MAX_SAFE_INTEGER;\n  points.forEach(point => {\n    const dx = Math.abs(point.x - x);\n    const dy = Math.abs(point.y - y);\n    const distance = dx + dy;\n    if (distance < minDistance) {\n      minDistance = distance;\n      closestPoint = point;\n    }\n  });\n  return closestPoint;\n}\n/**\n * Locate the corner points of a connected region\n * @param region A connected region\n */\nexport default function getCornerPoints(region) {\n  // get the extents\n  const {\n    x: minX,\n    y: minY\n  } = region.bounds.topLeft;\n  const {\n    x: maxX,\n    y: maxY\n  } = region.bounds.bottomRight;\n  const {\n    points\n  } = region;\n  // find the points closest to the topleft, topright, bottomleft, and bottomright\n  return {\n    topLeft: getNearestPoint(points, minX, minY),\n    topRight: getNearestPoint(points, maxX, minY),\n    bottomLeft: getNearestPoint(points, minX, maxY),\n    bottomRight: getNearestPoint(points, maxX, maxY)\n  };\n}","map":{"version":3,"names":["getNearestPoint","points","x","y","closestPoint","minDistance","Number","MAX_SAFE_INTEGER","forEach","point","dx","Math","abs","dy","distance","getCornerPoints","region","minX","minY","bounds","topLeft","maxX","maxY","bottomRight","topRight","bottomLeft"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/Project/temp/app/src/augmentedReality/imageProcessing/getCornerPoints.ts"],"sourcesContent":["import { Point, ConnectedRegion } from \"./getLargestConnectedComponent\";\n\nfunction getNearestPoint(points: Point[], x: number, y: number) {\n  let closestPoint = points[0];\n  let minDistance = Number.MAX_SAFE_INTEGER;\n  points.forEach((point) => {\n    const dx = Math.abs(point.x - x);\n    const dy = Math.abs(point.y - y);\n    const distance = dx + dy;\n    if (distance < minDistance) {\n      minDistance = distance;\n      closestPoint = point;\n    }\n  });\n  return closestPoint;\n}\n\nexport type CornerPoints = {\n  topLeft: Point;\n  topRight: Point;\n  bottomLeft: Point;\n  bottomRight: Point;\n};\n\n/**\n * Locate the corner points of a connected region\n * @param region A connected region\n */\nexport default function getCornerPoints(region: ConnectedRegion): CornerPoints {\n  // get the extents\n  const { x: minX, y: minY } = region.bounds.topLeft;\n  const { x: maxX, y: maxY } = region.bounds.bottomRight;\n  const { points } = region;\n  // find the points closest to the topleft, topright, bottomleft, and bottomright\n  return {\n    topLeft: getNearestPoint(points, minX, minY),\n    topRight: getNearestPoint(points, maxX, minY),\n    bottomLeft: getNearestPoint(points, minX, maxY),\n    bottomRight: getNearestPoint(points, maxX, maxY),\n  };\n}\n"],"mappings":"AAEA,SAASA,eAAe,CAACC,MAAe,EAAEC,CAAS,EAAEC,CAAS,EAAE;EAC9D,IAAIC,YAAY,GAAGH,MAAM,CAAC,CAAC,CAAC;EAC5B,IAAII,WAAW,GAAGC,MAAM,CAACC,gBAAgB;EACzCN,MAAM,CAACO,OAAO,CAAEC,KAAK,IAAK;IACxB,MAAMC,EAAE,GAAGC,IAAI,CAACC,GAAG,CAACH,KAAK,CAACP,CAAC,GAAGA,CAAC,CAAC;IAChC,MAAMW,EAAE,GAAGF,IAAI,CAACC,GAAG,CAACH,KAAK,CAACN,CAAC,GAAGA,CAAC,CAAC;IAChC,MAAMW,QAAQ,GAAGJ,EAAE,GAAGG,EAAE;IACxB,IAAIC,QAAQ,GAAGT,WAAW,EAAE;MAC1BA,WAAW,GAAGS,QAAQ;MACtBV,YAAY,GAAGK,KAAK;IACtB;EACF,CAAC,CAAC;EACF,OAAOL,YAAY;AACrB;AASA;AACA;AACA;AACA;AACA,eAAe,SAASW,eAAe,CAACC,MAAuB,EAAgB;EAC7E;EACA,MAAM;IAAEd,CAAC,EAAEe,IAAI;IAAEd,CAAC,EAAEe;EAAK,CAAC,GAAGF,MAAM,CAACG,MAAM,CAACC,OAAO;EAClD,MAAM;IAAElB,CAAC,EAAEmB,IAAI;IAAElB,CAAC,EAAEmB;EAAK,CAAC,GAAGN,MAAM,CAACG,MAAM,CAACI,WAAW;EACtD,MAAM;IAAEtB;EAAO,CAAC,GAAGe,MAAM;EACzB;EACA,OAAO;IACLI,OAAO,EAAEpB,eAAe,CAACC,MAAM,EAAEgB,IAAI,EAAEC,IAAI,CAAC;IAC5CM,QAAQ,EAAExB,eAAe,CAACC,MAAM,EAAEoB,IAAI,EAAEH,IAAI,CAAC;IAC7CO,UAAU,EAAEzB,eAAe,CAACC,MAAM,EAAEgB,IAAI,EAAEK,IAAI,CAAC;IAC/CC,WAAW,EAAEvB,eAAe,CAACC,MAAM,EAAEoB,IAAI,EAAEC,IAAI;EACjD,CAAC;AACH"},"metadata":{},"sourceType":"module"}