{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nimport { isConstantNode, isParenthesisNode } from '../../utils/is';\nimport { factory } from '../../utils/factory';\nimport { createUtil } from './simplify/util';\nimport { createSimplifyCore } from './simplify/simplifyCore';\nimport { createSimplifyConstant } from './simplify/simplifyConstant';\nimport { createResolve } from './simplify/resolve';\nimport { hasOwnProperty } from '../../utils/object';\nvar name = 'simplify';\nvar dependencies = ['config', 'typed', 'parse', 'add', 'subtract', 'multiply', 'divide', 'pow', 'isZero', 'equal', '?fraction', '?bignumber', 'mathWithTransform', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createSimplify = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var config = _ref.config,\n    typed = _ref.typed,\n    parse = _ref.parse,\n    add = _ref.add,\n    subtract = _ref.subtract,\n    multiply = _ref.multiply,\n    divide = _ref.divide,\n    pow = _ref.pow,\n    isZero = _ref.isZero,\n    equal = _ref.equal,\n    fraction = _ref.fraction,\n    bignumber = _ref.bignumber,\n    mathWithTransform = _ref.mathWithTransform,\n    ConstantNode = _ref.ConstantNode,\n    FunctionNode = _ref.FunctionNode,\n    OperatorNode = _ref.OperatorNode,\n    ParenthesisNode = _ref.ParenthesisNode,\n    SymbolNode = _ref.SymbolNode;\n  var simplifyConstant = createSimplifyConstant({\n    typed: typed,\n    config: config,\n    mathWithTransform: mathWithTransform,\n    fraction: fraction,\n    bignumber: bignumber,\n    ConstantNode: ConstantNode,\n    OperatorNode: OperatorNode,\n    FunctionNode: FunctionNode,\n    SymbolNode: SymbolNode\n  });\n  var simplifyCore = createSimplifyCore({\n    equal: equal,\n    isZero: isZero,\n    add: add,\n    subtract: subtract,\n    multiply: multiply,\n    divide: divide,\n    pow: pow,\n    ConstantNode: ConstantNode,\n    OperatorNode: OperatorNode,\n    FunctionNode: FunctionNode,\n    ParenthesisNode: ParenthesisNode\n  });\n  var resolve = createResolve({\n    parse: parse,\n    FunctionNode: FunctionNode,\n    OperatorNode: OperatorNode,\n    ParenthesisNode: ParenthesisNode\n  });\n  var _createUtil = createUtil({\n      FunctionNode: FunctionNode,\n      OperatorNode: OperatorNode,\n      SymbolNode: SymbolNode\n    }),\n    isCommutative = _createUtil.isCommutative,\n    isAssociative = _createUtil.isAssociative,\n    flatten = _createUtil.flatten,\n    unflattenr = _createUtil.unflattenr,\n    unflattenl = _createUtil.unflattenl,\n    createMakeNodeFunction = _createUtil.createMakeNodeFunction;\n  /**\n   * Simplify an expression tree.\n   *\n   * A list of rules are applied to an expression, repeating over the list until\n   * no further changes are made.\n   * It's possible to pass a custom set of rules to the function as second\n   * argument. A rule can be specified as an object, string, or function:\n   *\n   *     const rules = [\n   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },\n   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',\n   *       function (node) {\n   *         // ... return a new node or return the node unchanged\n   *         return node\n   *       }\n   *     ]\n   *\n   * String and object rules consist of a left and right pattern. The left is\n   * used to match against the expression and the right determines what matches\n   * are replaced with. The main difference between a pattern and a normal\n   * expression is that variables starting with the following characters are\n   * interpreted as wildcards:\n   *\n   * - 'n' - matches any Node\n   * - 'c' - matches any ConstantNode\n   * - 'v' - matches any Node that is not a ConstantNode\n   *\n   * The default list of rules is exposed on the function as `simplify.rules`\n   * and can be used as a basis to built a set of custom rules.\n   *\n   * For more details on the theory, see:\n   *\n   * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)\n   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)\n   *\n   *  An optional `options` argument can be passed as last argument of `simplify`.\n   *  There is currently one option available: `exactFractions`, a boolean which\n   *  is `true` by default.\n   *\n   * Syntax:\n   *\n   *     simplify(expr)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules, scope)\n   *     simplify(expr, rules, scope, options)\n   *     simplify(expr, scope)\n   *     simplify(expr, scope, options)\n   *\n   * Examples:\n   *\n   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node \"2 * x\"\n   *     math.simplify('2 * 3 * x', {x: 4})        // Node \"24\"\n   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')\n   *     math.simplify(f)                          // Node \"2 * x\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node \"x * 2 / 5\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node \"0.4 * x\"\n   *\n   * See also:\n   *\n   *     derivative, parse, evaluate, rationalize\n   *\n   * @param {Node | string} expr\n   *            The expression to be simplified\n   * @param {Array<{l:string, r: string} | string | function>} [rules]\n   *            Optional list with custom rules\n   * @return {Node} Returns the simplified form of `expr`\n   */\n\n  var simplify = typed('simplify', {\n    string: function string(expr) {\n      return this(parse(expr), this.rules, {}, {});\n    },\n    'string, Object': function stringObject(expr, scope) {\n      return this(parse(expr), this.rules, scope, {});\n    },\n    'string, Object, Object': function stringObjectObject(expr, scope, options) {\n      return this(parse(expr), this.rules, scope, options);\n    },\n    'string, Array': function stringArray(expr, rules) {\n      return this(parse(expr), rules, {}, {});\n    },\n    'string, Array, Object': function stringArrayObject(expr, rules, scope) {\n      return this(parse(expr), rules, scope, {});\n    },\n    'string, Array, Object, Object': function stringArrayObjectObject(expr, rules, scope, options) {\n      return this(parse(expr), rules, scope, options);\n    },\n    'Node, Object': function NodeObject(expr, scope) {\n      return this(expr, this.rules, scope, {});\n    },\n    'Node, Object, Object': function NodeObjectObject(expr, scope, options) {\n      return this(expr, this.rules, scope, options);\n    },\n    Node: function Node(expr) {\n      return this(expr, this.rules, {}, {});\n    },\n    'Node, Array': function NodeArray(expr, rules) {\n      return this(expr, rules, {}, {});\n    },\n    'Node, Array, Object': function NodeArrayObject(expr, rules, scope) {\n      return this(expr, rules, scope, {});\n    },\n    'Node, Array, Object, Object': function NodeArrayObjectObject(expr, rules, scope, options) {\n      rules = _buildRules(rules);\n      var res = resolve(expr, scope);\n      res = removeParens(res);\n      var visited = {};\n      var str = res.toString({\n        parenthesis: 'all'\n      });\n      while (!visited[str]) {\n        visited[str] = true;\n        _lastsym = 0; // counter for placeholder symbols\n\n        for (var i = 0; i < rules.length; i++) {\n          if (typeof rules[i] === 'function') {\n            res = rules[i](res, options);\n          } else {\n            flatten(res);\n            res = applyRule(res, rules[i]);\n          }\n          unflattenl(res); // using left-heavy binary tree here since custom rule functions may expect it\n        }\n\n        str = res.toString({\n          parenthesis: 'all'\n        });\n      }\n      return res;\n    }\n  });\n  simplify.simplifyCore = simplifyCore;\n  simplify.resolve = resolve;\n  function removeParens(node) {\n    return node.transform(function (node, path, parent) {\n      return isParenthesisNode(node) ? removeParens(node.content) : node;\n    });\n  } // All constants that are allowed in rules\n\n  var SUPPORTED_CONSTANTS = {\n    \"true\": true,\n    \"false\": true,\n    e: true,\n    i: true,\n    Infinity: true,\n    LN2: true,\n    LN10: true,\n    LOG2E: true,\n    LOG10E: true,\n    NaN: true,\n    phi: true,\n    pi: true,\n    SQRT1_2: true,\n    SQRT2: true,\n    tau: true // null: false,\n    // undefined: false,\n    // version: false,\n  }; // Array of strings, used to build the ruleSet.\n  // Each l (left side) and r (right side) are parsed by\n  // the expression parser into a node tree.\n  // Left hand sides are matched to subtrees within the\n  // expression to be parsed and replaced with the right\n  // hand side.\n  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])\n  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.\n  // It is possible to get into an infinite loop with conflicting rules\n\n  simplify.rules = [simplifyCore,\n  // { l: 'n+0', r: 'n' },     // simplifyCore\n  // { l: 'n^0', r: '1' },     // simplifyCore\n  // { l: '0*n', r: '0' },     // simplifyCore\n  // { l: 'n/n', r: '1'},      // simplifyCore\n  // { l: 'n^1', r: 'n' },     // simplifyCore\n  // { l: '+n1', r:'n1' },     // simplifyCore\n  // { l: 'n--n1', r:'n+n1' }, // simplifyCore\n  {\n    l: 'log(e)',\n    r: '1'\n  },\n  // temporary rules\n  {\n    l: 'n-n1',\n    r: 'n+-n1'\n  },\n  // temporarily replace 'subtract' so we can further flatten the 'add' operator\n  {\n    l: '-(c*v)',\n    r: '(-c) * v'\n  },\n  // make non-constant terms positive\n  {\n    l: '-v',\n    r: '(-1) * v'\n  }, {\n    l: 'n/n1^n2',\n    r: 'n*n1^-n2'\n  },\n  // temporarily replace 'divide' so we can further flatten the 'multiply' operator\n  {\n    l: 'n/n1',\n    r: 'n*n1^-1'\n  },\n  // expand nested exponentiation\n  {\n    l: '(n ^ n1) ^ n2',\n    r: 'n ^ (n1 * n2)'\n  },\n  // collect like factors\n  {\n    l: 'n*n',\n    r: 'n^2'\n  }, {\n    l: 'n * n^n1',\n    r: 'n^(n1+1)'\n  }, {\n    l: 'n^n1 * n^n2',\n    r: 'n^(n1+n2)'\n  },\n  // collect like terms\n  {\n    l: 'n+n',\n    r: '2*n'\n  }, {\n    l: 'n+-n',\n    r: '0'\n  }, {\n    l: 'n1*n2 + n2',\n    r: '(n1+1)*n2'\n  }, {\n    l: 'n1*n3 + n2*n3',\n    r: '(n1+n2)*n3'\n  },\n  // remove parenthesis in the case of negating a quantitiy\n  {\n    l: 'n1 + -1 * (n2 + n3)',\n    r: 'n1 + -1 * n2 + -1 * n3'\n  }, simplifyConstant, {\n    l: '(-n)*n1',\n    r: '-(n*n1)'\n  },\n  // make factors positive (and undo 'make non-constant terms positive')\n  // ordering of constants\n  {\n    l: 'c+v',\n    r: 'v+c',\n    context: {\n      add: {\n        commutative: false\n      }\n    }\n  }, {\n    l: 'v*c',\n    r: 'c*v',\n    context: {\n      multiply: {\n        commutative: false\n      }\n    }\n  },\n  // undo temporary rules\n  // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant\n  {\n    l: 'n+-n1',\n    r: 'n-n1'\n  },\n  // undo replace 'subtract'\n  {\n    l: 'n*(n1^-1)',\n    r: 'n/n1'\n  },\n  // undo replace 'divide'\n  {\n    l: 'n*n1^-n2',\n    r: 'n/n1^n2'\n  }, {\n    l: 'n1^-1',\n    r: '1/n1'\n  }, {\n    l: 'n*(n1/n2)',\n    r: '(n*n1)/n2'\n  },\n  // '*' before '/'\n  {\n    l: 'n-(n1+n2)',\n    r: 'n-n1-n2'\n  },\n  // '-' before '+'\n  // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },\n  // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },\n  {\n    l: '1*n',\n    r: 'n'\n  },\n  // this pattern can be produced by simplifyConstant\n  {\n    l: 'n1/(n2/n3)',\n    r: '(n1*n3)/n2'\n  }];\n  /**\n   * Parse the string array of rules into nodes\n   *\n   * Example syntax for rules:\n   *\n   * Position constants to the left in a product:\n   * { l: 'n1 * c1', r: 'c1 * n1' }\n   * n1 is any Node, and c1 is a ConstantNode.\n   *\n   * Apply difference of squares formula:\n   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }\n   * n1, n2 mean any Node.\n   *\n   * Short hand notation:\n   * 'n1 * c1 -> c1 * n1'\n   */\n\n  function _buildRules(rules) {\n    // Array of rules to be used to simplify expressions\n    var ruleSet = [];\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n      var newRule = void 0;\n      var ruleType = _typeof(rule);\n      switch (ruleType) {\n        case 'string':\n          {\n            var lr = rule.split('->');\n            if (lr.length === 2) {\n              rule = {\n                l: lr[0],\n                r: lr[1]\n              };\n            } else {\n              throw SyntaxError('Could not parse rule: ' + rule);\n            }\n          }\n\n        /* falls through */\n\n        case 'object':\n          newRule = {\n            l: removeParens(parse(rule.l)),\n            r: removeParens(parse(rule.r))\n          };\n          if (rule.context) {\n            newRule.evaluate = rule.context;\n          }\n          if (rule.evaluate) {\n            newRule.evaluate = parse(rule.evaluate);\n          }\n          if (isAssociative(newRule.l)) {\n            var makeNode = createMakeNodeFunction(newRule.l);\n            var expandsym = _getExpandPlaceholderSymbol();\n            newRule.expanded = {};\n            newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]); // Push the expandsym into the deepest possible branch.\n            // This helps to match the newRule against nodes returned from getSplits() later on.\n\n            flatten(newRule.expanded.l);\n            unflattenr(newRule.expanded.l);\n            newRule.expanded.r = makeNode([newRule.r, expandsym]);\n          }\n          break;\n        case 'function':\n          newRule = rule;\n          break;\n        default:\n          throw TypeError('Unsupported type of rule: ' + ruleType);\n      } // console.log('Adding rule: ' + rules[i])\n      // console.log(newRule)\n\n      ruleSet.push(newRule);\n    }\n    return ruleSet;\n  }\n  var _lastsym = 0;\n  function _getExpandPlaceholderSymbol() {\n    return new SymbolNode('_p' + _lastsym++);\n  }\n  /**\n   * Returns a simplfied form of node, or the original node if no simplification was possible.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.\n   */\n\n  var applyRule = typed('applyRule', {\n    'Node, Object': function NodeObject(node, rule) {\n      // console.log('Entering applyRule(' + node.toString() + ')')\n      // Do not clone node unless we find a match\n      var res = node; // First replace our child nodes with their simplified versions\n      // If a child could not be simplified, the assignments will have\n      // no effect since the node is returned unchanged\n\n      if (res instanceof OperatorNode || res instanceof FunctionNode) {\n        if (res.args) {\n          for (var i = 0; i < res.args.length; i++) {\n            res.args[i] = applyRule(res.args[i], rule);\n          }\n        }\n      } else if (res instanceof ParenthesisNode) {\n        if (res.content) {\n          res.content = applyRule(res.content, rule);\n        }\n      } // Try to match a rule against this node\n\n      var repl = rule.r;\n      var matches = _ruleMatch(rule.l, res)[0]; // If the rule is associative operator, we can try matching it while allowing additional terms.\n      // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.\n\n      if (!matches && rule.expanded) {\n        repl = rule.expanded.r;\n        matches = _ruleMatch(rule.expanded.l, res)[0];\n      }\n      if (matches) {\n        // const before = res.toString({parenthesis: 'all'})\n        // Create a new node by cloning the rhs of the matched rule\n        // we keep any implicit multiplication state if relevant\n        var implicit = res.implicit;\n        res = repl.clone();\n        if (implicit && 'implicit' in repl) {\n          res.implicit = true;\n        } // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes\n\n        res = res.transform(function (node) {\n          if (node.isSymbolNode && hasOwnProperty(matches.placeholders, node.name)) {\n            return matches.placeholders[node.name].clone();\n          } else {\n            return node;\n          }\n        }); // const after = res.toString({parenthesis: 'all'})\n        // console.log('Simplified ' + before + ' to ' + after)\n      }\n\n      return res;\n    }\n  });\n  /**\n   * Get (binary) combinations of a flattened binary node\n   * e.g. +(node1, node2, node3) -> [\n   *        +(node1,  +(node2, node3)),\n   *        +(node2,  +(node1, node3)),\n   *        +(node3,  +(node1, node2))]\n   *\n   */\n\n  function getSplits(node, context) {\n    var res = [];\n    var right, rightArgs;\n    var makeNode = createMakeNodeFunction(node);\n    if (isCommutative(node, context)) {\n      for (var i = 0; i < node.args.length; i++) {\n        rightArgs = node.args.slice(0);\n        rightArgs.splice(i, 1);\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([node.args[i], right]));\n      }\n    } else {\n      rightArgs = node.args.slice(1);\n      right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n      res.push(makeNode([node.args[0], right]));\n    }\n    return res;\n  }\n  /**\n   * Returns the set union of two match-placeholders or null if there is a conflict.\n   */\n\n  function mergeMatch(match1, match2) {\n    var res = {\n      placeholders: {}\n    }; // Some matches may not have placeholders; this is OK\n\n    if (!match1.placeholders && !match2.placeholders) {\n      return res;\n    } else if (!match1.placeholders) {\n      return match2;\n    } else if (!match2.placeholders) {\n      return match1;\n    } // Placeholders with the same key must match exactly\n\n    for (var key in match1.placeholders) {\n      if (hasOwnProperty(match1.placeholders, key)) {\n        res.placeholders[key] = match1.placeholders[key];\n        if (hasOwnProperty(match2.placeholders, key)) {\n          if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {\n            return null;\n          }\n        }\n      }\n    }\n    for (var _key in match2.placeholders) {\n      if (hasOwnProperty(match2.placeholders, _key)) {\n        res.placeholders[_key] = match2.placeholders[_key];\n      }\n    }\n    return res;\n  }\n  /**\n   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   */\n\n  function combineChildMatches(list1, list2) {\n    var res = [];\n    if (list1.length === 0 || list2.length === 0) {\n      return res;\n    }\n    var merged;\n    for (var i1 = 0; i1 < list1.length; i1++) {\n      for (var i2 = 0; i2 < list2.length; i2++) {\n        merged = mergeMatch(list1[i1], list2[i2]);\n        if (merged) {\n          res.push(merged);\n        }\n      }\n    }\n    return res;\n  }\n  /**\n   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   * Returns a list of unique matches.\n   */\n\n  function mergeChildMatches(childMatches) {\n    if (childMatches.length === 0) {\n      return childMatches;\n    }\n    var sets = childMatches.reduce(combineChildMatches);\n    var uniqueSets = [];\n    var unique = {};\n    for (var i = 0; i < sets.length; i++) {\n      var s = JSON.stringify(sets[i]);\n      if (!unique[s]) {\n        unique[s] = true;\n        uniqueSets.push(sets[i]);\n      }\n    }\n    return uniqueSets;\n  }\n  /**\n   * Determines whether node matches rule.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @return {Object} Information about the match, if it exists.\n   */\n\n  function _ruleMatch(rule, node, isSplit) {\n    //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')\n    //    console.log('rule = ' + rule)\n    //    console.log('node = ' + node)\n    //    console.log('Entering _ruleMatch(' + rule.toString() + ', ' + node.toString() + ')')\n    var res = [{\n      placeholders: {}\n    }];\n    if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {\n      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly\n      if (rule instanceof OperatorNode) {\n        if (rule.op !== node.op || rule.fn !== node.fn) {\n          return [];\n        }\n      } else if (rule instanceof FunctionNode) {\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } // rule and node match. Search the children of rule and node.\n\n      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node) || isSplit) {\n        // Expect non-associative operators to match exactly\n        var childMatches = [];\n        for (var i = 0; i < rule.args.length; i++) {\n          var childMatch = _ruleMatch(rule.args[i], node.args[i]);\n          if (childMatch.length === 0) {\n            // Child did not match, so stop searching immediately\n            return [];\n          } // The child matched, so add the information returned from the child to our result\n\n          childMatches.push(childMatch);\n        }\n        res = mergeChildMatches(childMatches);\n      } else if (node.args.length >= 2 && rule.args.length === 2) {\n        // node is flattened, rule is not\n        // Associative operators/functions can be split in different ways so we check if the rule matches each\n        // them and return their union.\n        var splits = getSplits(node, rule.context);\n        var splitMatches = [];\n        for (var _i = 0; _i < splits.length; _i++) {\n          var matchSet = _ruleMatch(rule, splits[_i], true); // recursing at the same tree depth here\n\n          splitMatches = splitMatches.concat(matchSet);\n        }\n        return splitMatches;\n      } else if (rule.args.length > 2) {\n        throw Error('Unexpected non-binary associative function: ' + rule.toString());\n      } else {\n        // Incorrect number of arguments in rule and node, so no match\n        return [];\n      }\n    } else if (rule instanceof SymbolNode) {\n      // If the rule is a SymbolNode, then it carries a special meaning\n      // according to the first character of the symbol node name.\n      // c.* matches a ConstantNode\n      // n.* matches any node\n      if (rule.name.length === 0) {\n        throw new Error('Symbol in rule has 0 length...!?');\n      }\n      if (SUPPORTED_CONSTANTS[rule.name]) {\n        // built-in constant must match exactly\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') {\n        // rule matches _anything_, so assign this node to the rule.name placeholder\n        // Assign node to the rule.name placeholder.\n        // Our parent will check for matches among placeholders.\n        res[0].placeholders[rule.name] = node;\n      } else if (rule.name[0] === 'v') {\n        // rule matches any variable thing (not a ConstantNode)\n        if (!isConstantNode(node)) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting something other than a ConstantNode\n          return [];\n        }\n      } else if (rule.name[0] === 'c') {\n        // rule matches any ConstantNode\n        if (node instanceof ConstantNode) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting a ConstantNode\n          return [];\n        }\n      } else {\n        throw new Error('Invalid symbol in rule: ' + rule.name);\n      }\n    } else if (rule instanceof ConstantNode) {\n      // Literal constant must match exactly\n      if (!equal(rule.value, node.value)) {\n        return [];\n      }\n    } else {\n      // Some other node was encountered which we aren't prepared for, so no match\n      return [];\n    } // It's a match!\n    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')\n\n    return res;\n  }\n  /**\n   * Determines whether p and q (and all their children nodes) are identical.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q\n   * @return {Object} Information about the match, if it exists.\n   */\n\n  function _exactMatch(p, q) {\n    if (p instanceof ConstantNode && q instanceof ConstantNode) {\n      if (!equal(p.value, q.value)) {\n        return false;\n      }\n    } else if (p instanceof SymbolNode && q instanceof SymbolNode) {\n      if (p.name !== q.name) {\n        return false;\n      }\n    } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {\n      if (p instanceof OperatorNode) {\n        if (p.op !== q.op || p.fn !== q.fn) {\n          return false;\n        }\n      } else if (p instanceof FunctionNode) {\n        if (p.name !== q.name) {\n          return false;\n        }\n      }\n      if (p.args.length !== q.args.length) {\n        return false;\n      }\n      for (var i = 0; i < p.args.length; i++) {\n        if (!_exactMatch(p.args[i], q.args[i])) {\n          return false;\n        }\n      }\n    } else {\n      return false;\n    }\n    return true;\n  }\n  return simplify;\n});","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","isConstantNode","isParenthesisNode","factory","createUtil","createSimplifyCore","createSimplifyConstant","createResolve","hasOwnProperty","name","dependencies","createSimplify","_ref","config","typed","parse","add","subtract","multiply","divide","pow","isZero","equal","fraction","bignumber","mathWithTransform","ConstantNode","FunctionNode","OperatorNode","ParenthesisNode","SymbolNode","simplifyConstant","simplifyCore","resolve","_createUtil","isCommutative","isAssociative","flatten","unflattenr","unflattenl","createMakeNodeFunction","simplify","string","expr","rules","stringObject","scope","stringObjectObject","options","stringArray","stringArrayObject","stringArrayObjectObject","NodeObject","NodeObjectObject","Node","NodeArray","NodeArrayObject","NodeArrayObjectObject","_buildRules","res","removeParens","visited","str","toString","parenthesis","_lastsym","i","length","applyRule","node","transform","path","parent","content","SUPPORTED_CONSTANTS","e","Infinity","LN2","LN10","LOG2E","LOG10E","NaN","phi","pi","SQRT1_2","SQRT2","tau","l","r","context","commutative","ruleSet","rule","newRule","ruleType","lr","split","SyntaxError","evaluate","makeNode","expandsym","_getExpandPlaceholderSymbol","expanded","clone","TypeError","push","args","repl","matches","_ruleMatch","implicit","isSymbolNode","placeholders","getSplits","right","rightArgs","slice","splice","mergeMatch","match1","match2","key","_exactMatch","_key","combineChildMatches","list1","list2","merged","i1","i2","mergeChildMatches","childMatches","sets","reduce","uniqueSets","unique","s","JSON","stringify","isSplit","op","fn","childMatch","splits","splitMatches","_i","matchSet","concat","Error","substring","value","p","q"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/P/temp/app/node_modules/mathjs/es/function/algebra/simplify.js"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { isConstantNode, isParenthesisNode } from '../../utils/is';\nimport { factory } from '../../utils/factory';\nimport { createUtil } from './simplify/util';\nimport { createSimplifyCore } from './simplify/simplifyCore';\nimport { createSimplifyConstant } from './simplify/simplifyConstant';\nimport { createResolve } from './simplify/resolve';\nimport { hasOwnProperty } from '../../utils/object';\nvar name = 'simplify';\nvar dependencies = ['config', 'typed', 'parse', 'add', 'subtract', 'multiply', 'divide', 'pow', 'isZero', 'equal', '?fraction', '?bignumber', 'mathWithTransform', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createSimplify = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var config = _ref.config,\n      typed = _ref.typed,\n      parse = _ref.parse,\n      add = _ref.add,\n      subtract = _ref.subtract,\n      multiply = _ref.multiply,\n      divide = _ref.divide,\n      pow = _ref.pow,\n      isZero = _ref.isZero,\n      equal = _ref.equal,\n      fraction = _ref.fraction,\n      bignumber = _ref.bignumber,\n      mathWithTransform = _ref.mathWithTransform,\n      ConstantNode = _ref.ConstantNode,\n      FunctionNode = _ref.FunctionNode,\n      OperatorNode = _ref.OperatorNode,\n      ParenthesisNode = _ref.ParenthesisNode,\n      SymbolNode = _ref.SymbolNode;\n  var simplifyConstant = createSimplifyConstant({\n    typed: typed,\n    config: config,\n    mathWithTransform: mathWithTransform,\n    fraction: fraction,\n    bignumber: bignumber,\n    ConstantNode: ConstantNode,\n    OperatorNode: OperatorNode,\n    FunctionNode: FunctionNode,\n    SymbolNode: SymbolNode\n  });\n  var simplifyCore = createSimplifyCore({\n    equal: equal,\n    isZero: isZero,\n    add: add,\n    subtract: subtract,\n    multiply: multiply,\n    divide: divide,\n    pow: pow,\n    ConstantNode: ConstantNode,\n    OperatorNode: OperatorNode,\n    FunctionNode: FunctionNode,\n    ParenthesisNode: ParenthesisNode\n  });\n  var resolve = createResolve({\n    parse: parse,\n    FunctionNode: FunctionNode,\n    OperatorNode: OperatorNode,\n    ParenthesisNode: ParenthesisNode\n  });\n\n  var _createUtil = createUtil({\n    FunctionNode: FunctionNode,\n    OperatorNode: OperatorNode,\n    SymbolNode: SymbolNode\n  }),\n      isCommutative = _createUtil.isCommutative,\n      isAssociative = _createUtil.isAssociative,\n      flatten = _createUtil.flatten,\n      unflattenr = _createUtil.unflattenr,\n      unflattenl = _createUtil.unflattenl,\n      createMakeNodeFunction = _createUtil.createMakeNodeFunction;\n  /**\n   * Simplify an expression tree.\n   *\n   * A list of rules are applied to an expression, repeating over the list until\n   * no further changes are made.\n   * It's possible to pass a custom set of rules to the function as second\n   * argument. A rule can be specified as an object, string, or function:\n   *\n   *     const rules = [\n   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },\n   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',\n   *       function (node) {\n   *         // ... return a new node or return the node unchanged\n   *         return node\n   *       }\n   *     ]\n   *\n   * String and object rules consist of a left and right pattern. The left is\n   * used to match against the expression and the right determines what matches\n   * are replaced with. The main difference between a pattern and a normal\n   * expression is that variables starting with the following characters are\n   * interpreted as wildcards:\n   *\n   * - 'n' - matches any Node\n   * - 'c' - matches any ConstantNode\n   * - 'v' - matches any Node that is not a ConstantNode\n   *\n   * The default list of rules is exposed on the function as `simplify.rules`\n   * and can be used as a basis to built a set of custom rules.\n   *\n   * For more details on the theory, see:\n   *\n   * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)\n   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)\n   *\n   *  An optional `options` argument can be passed as last argument of `simplify`.\n   *  There is currently one option available: `exactFractions`, a boolean which\n   *  is `true` by default.\n   *\n   * Syntax:\n   *\n   *     simplify(expr)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules, scope)\n   *     simplify(expr, rules, scope, options)\n   *     simplify(expr, scope)\n   *     simplify(expr, scope, options)\n   *\n   * Examples:\n   *\n   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node \"2 * x\"\n   *     math.simplify('2 * 3 * x', {x: 4})        // Node \"24\"\n   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')\n   *     math.simplify(f)                          // Node \"2 * x\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node \"x * 2 / 5\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node \"0.4 * x\"\n   *\n   * See also:\n   *\n   *     derivative, parse, evaluate, rationalize\n   *\n   * @param {Node | string} expr\n   *            The expression to be simplified\n   * @param {Array<{l:string, r: string} | string | function>} [rules]\n   *            Optional list with custom rules\n   * @return {Node} Returns the simplified form of `expr`\n   */\n\n\n  var simplify = typed('simplify', {\n    string: function string(expr) {\n      return this(parse(expr), this.rules, {}, {});\n    },\n    'string, Object': function stringObject(expr, scope) {\n      return this(parse(expr), this.rules, scope, {});\n    },\n    'string, Object, Object': function stringObjectObject(expr, scope, options) {\n      return this(parse(expr), this.rules, scope, options);\n    },\n    'string, Array': function stringArray(expr, rules) {\n      return this(parse(expr), rules, {}, {});\n    },\n    'string, Array, Object': function stringArrayObject(expr, rules, scope) {\n      return this(parse(expr), rules, scope, {});\n    },\n    'string, Array, Object, Object': function stringArrayObjectObject(expr, rules, scope, options) {\n      return this(parse(expr), rules, scope, options);\n    },\n    'Node, Object': function NodeObject(expr, scope) {\n      return this(expr, this.rules, scope, {});\n    },\n    'Node, Object, Object': function NodeObjectObject(expr, scope, options) {\n      return this(expr, this.rules, scope, options);\n    },\n    Node: function Node(expr) {\n      return this(expr, this.rules, {}, {});\n    },\n    'Node, Array': function NodeArray(expr, rules) {\n      return this(expr, rules, {}, {});\n    },\n    'Node, Array, Object': function NodeArrayObject(expr, rules, scope) {\n      return this(expr, rules, scope, {});\n    },\n    'Node, Array, Object, Object': function NodeArrayObjectObject(expr, rules, scope, options) {\n      rules = _buildRules(rules);\n      var res = resolve(expr, scope);\n      res = removeParens(res);\n      var visited = {};\n      var str = res.toString({\n        parenthesis: 'all'\n      });\n\n      while (!visited[str]) {\n        visited[str] = true;\n        _lastsym = 0; // counter for placeholder symbols\n\n        for (var i = 0; i < rules.length; i++) {\n          if (typeof rules[i] === 'function') {\n            res = rules[i](res, options);\n          } else {\n            flatten(res);\n            res = applyRule(res, rules[i]);\n          }\n\n          unflattenl(res); // using left-heavy binary tree here since custom rule functions may expect it\n        }\n\n        str = res.toString({\n          parenthesis: 'all'\n        });\n      }\n\n      return res;\n    }\n  });\n  simplify.simplifyCore = simplifyCore;\n  simplify.resolve = resolve;\n\n  function removeParens(node) {\n    return node.transform(function (node, path, parent) {\n      return isParenthesisNode(node) ? removeParens(node.content) : node;\n    });\n  } // All constants that are allowed in rules\n\n\n  var SUPPORTED_CONSTANTS = {\n    \"true\": true,\n    \"false\": true,\n    e: true,\n    i: true,\n    Infinity: true,\n    LN2: true,\n    LN10: true,\n    LOG2E: true,\n    LOG10E: true,\n    NaN: true,\n    phi: true,\n    pi: true,\n    SQRT1_2: true,\n    SQRT2: true,\n    tau: true // null: false,\n    // undefined: false,\n    // version: false,\n\n  }; // Array of strings, used to build the ruleSet.\n  // Each l (left side) and r (right side) are parsed by\n  // the expression parser into a node tree.\n  // Left hand sides are matched to subtrees within the\n  // expression to be parsed and replaced with the right\n  // hand side.\n  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])\n  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.\n  // It is possible to get into an infinite loop with conflicting rules\n\n  simplify.rules = [simplifyCore, // { l: 'n+0', r: 'n' },     // simplifyCore\n  // { l: 'n^0', r: '1' },     // simplifyCore\n  // { l: '0*n', r: '0' },     // simplifyCore\n  // { l: 'n/n', r: '1'},      // simplifyCore\n  // { l: 'n^1', r: 'n' },     // simplifyCore\n  // { l: '+n1', r:'n1' },     // simplifyCore\n  // { l: 'n--n1', r:'n+n1' }, // simplifyCore\n  {\n    l: 'log(e)',\n    r: '1'\n  }, // temporary rules\n  {\n    l: 'n-n1',\n    r: 'n+-n1'\n  }, // temporarily replace 'subtract' so we can further flatten the 'add' operator\n  {\n    l: '-(c*v)',\n    r: '(-c) * v'\n  }, // make non-constant terms positive\n  {\n    l: '-v',\n    r: '(-1) * v'\n  }, {\n    l: 'n/n1^n2',\n    r: 'n*n1^-n2'\n  }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator\n  {\n    l: 'n/n1',\n    r: 'n*n1^-1'\n  }, // expand nested exponentiation\n  {\n    l: '(n ^ n1) ^ n2',\n    r: 'n ^ (n1 * n2)'\n  }, // collect like factors\n  {\n    l: 'n*n',\n    r: 'n^2'\n  }, {\n    l: 'n * n^n1',\n    r: 'n^(n1+1)'\n  }, {\n    l: 'n^n1 * n^n2',\n    r: 'n^(n1+n2)'\n  }, // collect like terms\n  {\n    l: 'n+n',\n    r: '2*n'\n  }, {\n    l: 'n+-n',\n    r: '0'\n  }, {\n    l: 'n1*n2 + n2',\n    r: '(n1+1)*n2'\n  }, {\n    l: 'n1*n3 + n2*n3',\n    r: '(n1+n2)*n3'\n  }, // remove parenthesis in the case of negating a quantitiy\n  {\n    l: 'n1 + -1 * (n2 + n3)',\n    r: 'n1 + -1 * n2 + -1 * n3'\n  }, simplifyConstant, {\n    l: '(-n)*n1',\n    r: '-(n*n1)'\n  }, // make factors positive (and undo 'make non-constant terms positive')\n  // ordering of constants\n  {\n    l: 'c+v',\n    r: 'v+c',\n    context: {\n      add: {\n        commutative: false\n      }\n    }\n  }, {\n    l: 'v*c',\n    r: 'c*v',\n    context: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, // undo temporary rules\n  // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant\n  {\n    l: 'n+-n1',\n    r: 'n-n1'\n  }, // undo replace 'subtract'\n  {\n    l: 'n*(n1^-1)',\n    r: 'n/n1'\n  }, // undo replace 'divide'\n  {\n    l: 'n*n1^-n2',\n    r: 'n/n1^n2'\n  }, {\n    l: 'n1^-1',\n    r: '1/n1'\n  }, {\n    l: 'n*(n1/n2)',\n    r: '(n*n1)/n2'\n  }, // '*' before '/'\n  {\n    l: 'n-(n1+n2)',\n    r: 'n-n1-n2'\n  }, // '-' before '+'\n  // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },\n  // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },\n  {\n    l: '1*n',\n    r: 'n'\n  }, // this pattern can be produced by simplifyConstant\n  {\n    l: 'n1/(n2/n3)',\n    r: '(n1*n3)/n2'\n  }];\n  /**\n   * Parse the string array of rules into nodes\n   *\n   * Example syntax for rules:\n   *\n   * Position constants to the left in a product:\n   * { l: 'n1 * c1', r: 'c1 * n1' }\n   * n1 is any Node, and c1 is a ConstantNode.\n   *\n   * Apply difference of squares formula:\n   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }\n   * n1, n2 mean any Node.\n   *\n   * Short hand notation:\n   * 'n1 * c1 -> c1 * n1'\n   */\n\n  function _buildRules(rules) {\n    // Array of rules to be used to simplify expressions\n    var ruleSet = [];\n\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n      var newRule = void 0;\n\n      var ruleType = _typeof(rule);\n\n      switch (ruleType) {\n        case 'string':\n          {\n            var lr = rule.split('->');\n\n            if (lr.length === 2) {\n              rule = {\n                l: lr[0],\n                r: lr[1]\n              };\n            } else {\n              throw SyntaxError('Could not parse rule: ' + rule);\n            }\n          }\n\n        /* falls through */\n\n        case 'object':\n          newRule = {\n            l: removeParens(parse(rule.l)),\n            r: removeParens(parse(rule.r))\n          };\n\n          if (rule.context) {\n            newRule.evaluate = rule.context;\n          }\n\n          if (rule.evaluate) {\n            newRule.evaluate = parse(rule.evaluate);\n          }\n\n          if (isAssociative(newRule.l)) {\n            var makeNode = createMakeNodeFunction(newRule.l);\n\n            var expandsym = _getExpandPlaceholderSymbol();\n\n            newRule.expanded = {};\n            newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]); // Push the expandsym into the deepest possible branch.\n            // This helps to match the newRule against nodes returned from getSplits() later on.\n\n            flatten(newRule.expanded.l);\n            unflattenr(newRule.expanded.l);\n            newRule.expanded.r = makeNode([newRule.r, expandsym]);\n          }\n\n          break;\n\n        case 'function':\n          newRule = rule;\n          break;\n\n        default:\n          throw TypeError('Unsupported type of rule: ' + ruleType);\n      } // console.log('Adding rule: ' + rules[i])\n      // console.log(newRule)\n\n\n      ruleSet.push(newRule);\n    }\n\n    return ruleSet;\n  }\n\n  var _lastsym = 0;\n\n  function _getExpandPlaceholderSymbol() {\n    return new SymbolNode('_p' + _lastsym++);\n  }\n  /**\n   * Returns a simplfied form of node, or the original node if no simplification was possible.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.\n   */\n\n\n  var applyRule = typed('applyRule', {\n    'Node, Object': function NodeObject(node, rule) {\n      // console.log('Entering applyRule(' + node.toString() + ')')\n      // Do not clone node unless we find a match\n      var res = node; // First replace our child nodes with their simplified versions\n      // If a child could not be simplified, the assignments will have\n      // no effect since the node is returned unchanged\n\n      if (res instanceof OperatorNode || res instanceof FunctionNode) {\n        if (res.args) {\n          for (var i = 0; i < res.args.length; i++) {\n            res.args[i] = applyRule(res.args[i], rule);\n          }\n        }\n      } else if (res instanceof ParenthesisNode) {\n        if (res.content) {\n          res.content = applyRule(res.content, rule);\n        }\n      } // Try to match a rule against this node\n\n\n      var repl = rule.r;\n\n      var matches = _ruleMatch(rule.l, res)[0]; // If the rule is associative operator, we can try matching it while allowing additional terms.\n      // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.\n\n\n      if (!matches && rule.expanded) {\n        repl = rule.expanded.r;\n        matches = _ruleMatch(rule.expanded.l, res)[0];\n      }\n\n      if (matches) {\n        // const before = res.toString({parenthesis: 'all'})\n        // Create a new node by cloning the rhs of the matched rule\n        // we keep any implicit multiplication state if relevant\n        var implicit = res.implicit;\n        res = repl.clone();\n\n        if (implicit && 'implicit' in repl) {\n          res.implicit = true;\n        } // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes\n\n\n        res = res.transform(function (node) {\n          if (node.isSymbolNode && hasOwnProperty(matches.placeholders, node.name)) {\n            return matches.placeholders[node.name].clone();\n          } else {\n            return node;\n          }\n        }); // const after = res.toString({parenthesis: 'all'})\n        // console.log('Simplified ' + before + ' to ' + after)\n      }\n\n      return res;\n    }\n  });\n  /**\n   * Get (binary) combinations of a flattened binary node\n   * e.g. +(node1, node2, node3) -> [\n   *        +(node1,  +(node2, node3)),\n   *        +(node2,  +(node1, node3)),\n   *        +(node3,  +(node1, node2))]\n   *\n   */\n\n  function getSplits(node, context) {\n    var res = [];\n    var right, rightArgs;\n    var makeNode = createMakeNodeFunction(node);\n\n    if (isCommutative(node, context)) {\n      for (var i = 0; i < node.args.length; i++) {\n        rightArgs = node.args.slice(0);\n        rightArgs.splice(i, 1);\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([node.args[i], right]));\n      }\n    } else {\n      rightArgs = node.args.slice(1);\n      right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n      res.push(makeNode([node.args[0], right]));\n    }\n\n    return res;\n  }\n  /**\n   * Returns the set union of two match-placeholders or null if there is a conflict.\n   */\n\n\n  function mergeMatch(match1, match2) {\n    var res = {\n      placeholders: {}\n    }; // Some matches may not have placeholders; this is OK\n\n    if (!match1.placeholders && !match2.placeholders) {\n      return res;\n    } else if (!match1.placeholders) {\n      return match2;\n    } else if (!match2.placeholders) {\n      return match1;\n    } // Placeholders with the same key must match exactly\n\n\n    for (var key in match1.placeholders) {\n      if (hasOwnProperty(match1.placeholders, key)) {\n        res.placeholders[key] = match1.placeholders[key];\n\n        if (hasOwnProperty(match2.placeholders, key)) {\n          if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {\n            return null;\n          }\n        }\n      }\n    }\n\n    for (var _key in match2.placeholders) {\n      if (hasOwnProperty(match2.placeholders, _key)) {\n        res.placeholders[_key] = match2.placeholders[_key];\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   */\n\n\n  function combineChildMatches(list1, list2) {\n    var res = [];\n\n    if (list1.length === 0 || list2.length === 0) {\n      return res;\n    }\n\n    var merged;\n\n    for (var i1 = 0; i1 < list1.length; i1++) {\n      for (var i2 = 0; i2 < list2.length; i2++) {\n        merged = mergeMatch(list1[i1], list2[i2]);\n\n        if (merged) {\n          res.push(merged);\n        }\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   * Returns a list of unique matches.\n   */\n\n\n  function mergeChildMatches(childMatches) {\n    if (childMatches.length === 0) {\n      return childMatches;\n    }\n\n    var sets = childMatches.reduce(combineChildMatches);\n    var uniqueSets = [];\n    var unique = {};\n\n    for (var i = 0; i < sets.length; i++) {\n      var s = JSON.stringify(sets[i]);\n\n      if (!unique[s]) {\n        unique[s] = true;\n        uniqueSets.push(sets[i]);\n      }\n    }\n\n    return uniqueSets;\n  }\n  /**\n   * Determines whether node matches rule.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @return {Object} Information about the match, if it exists.\n   */\n\n\n  function _ruleMatch(rule, node, isSplit) {\n    //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')\n    //    console.log('rule = ' + rule)\n    //    console.log('node = ' + node)\n    //    console.log('Entering _ruleMatch(' + rule.toString() + ', ' + node.toString() + ')')\n    var res = [{\n      placeholders: {}\n    }];\n\n    if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {\n      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly\n      if (rule instanceof OperatorNode) {\n        if (rule.op !== node.op || rule.fn !== node.fn) {\n          return [];\n        }\n      } else if (rule instanceof FunctionNode) {\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } // rule and node match. Search the children of rule and node.\n\n\n      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node) || isSplit) {\n        // Expect non-associative operators to match exactly\n        var childMatches = [];\n\n        for (var i = 0; i < rule.args.length; i++) {\n          var childMatch = _ruleMatch(rule.args[i], node.args[i]);\n\n          if (childMatch.length === 0) {\n            // Child did not match, so stop searching immediately\n            return [];\n          } // The child matched, so add the information returned from the child to our result\n\n\n          childMatches.push(childMatch);\n        }\n\n        res = mergeChildMatches(childMatches);\n      } else if (node.args.length >= 2 && rule.args.length === 2) {\n        // node is flattened, rule is not\n        // Associative operators/functions can be split in different ways so we check if the rule matches each\n        // them and return their union.\n        var splits = getSplits(node, rule.context);\n        var splitMatches = [];\n\n        for (var _i = 0; _i < splits.length; _i++) {\n          var matchSet = _ruleMatch(rule, splits[_i], true); // recursing at the same tree depth here\n\n\n          splitMatches = splitMatches.concat(matchSet);\n        }\n\n        return splitMatches;\n      } else if (rule.args.length > 2) {\n        throw Error('Unexpected non-binary associative function: ' + rule.toString());\n      } else {\n        // Incorrect number of arguments in rule and node, so no match\n        return [];\n      }\n    } else if (rule instanceof SymbolNode) {\n      // If the rule is a SymbolNode, then it carries a special meaning\n      // according to the first character of the symbol node name.\n      // c.* matches a ConstantNode\n      // n.* matches any node\n      if (rule.name.length === 0) {\n        throw new Error('Symbol in rule has 0 length...!?');\n      }\n\n      if (SUPPORTED_CONSTANTS[rule.name]) {\n        // built-in constant must match exactly\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') {\n        // rule matches _anything_, so assign this node to the rule.name placeholder\n        // Assign node to the rule.name placeholder.\n        // Our parent will check for matches among placeholders.\n        res[0].placeholders[rule.name] = node;\n      } else if (rule.name[0] === 'v') {\n        // rule matches any variable thing (not a ConstantNode)\n        if (!isConstantNode(node)) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting something other than a ConstantNode\n          return [];\n        }\n      } else if (rule.name[0] === 'c') {\n        // rule matches any ConstantNode\n        if (node instanceof ConstantNode) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting a ConstantNode\n          return [];\n        }\n      } else {\n        throw new Error('Invalid symbol in rule: ' + rule.name);\n      }\n    } else if (rule instanceof ConstantNode) {\n      // Literal constant must match exactly\n      if (!equal(rule.value, node.value)) {\n        return [];\n      }\n    } else {\n      // Some other node was encountered which we aren't prepared for, so no match\n      return [];\n    } // It's a match!\n    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')\n\n\n    return res;\n  }\n  /**\n   * Determines whether p and q (and all their children nodes) are identical.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q\n   * @return {Object} Information about the match, if it exists.\n   */\n\n\n  function _exactMatch(p, q) {\n    if (p instanceof ConstantNode && q instanceof ConstantNode) {\n      if (!equal(p.value, q.value)) {\n        return false;\n      }\n    } else if (p instanceof SymbolNode && q instanceof SymbolNode) {\n      if (p.name !== q.name) {\n        return false;\n      }\n    } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {\n      if (p instanceof OperatorNode) {\n        if (p.op !== q.op || p.fn !== q.fn) {\n          return false;\n        }\n      } else if (p instanceof FunctionNode) {\n        if (p.name !== q.name) {\n          return false;\n        }\n      }\n\n      if (p.args.length !== q.args.length) {\n        return false;\n      }\n\n      for (var i = 0; i < p.args.length; i++) {\n        if (!_exactMatch(p.args[i], q.args[i])) {\n          return false;\n        }\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  return simplify;\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}