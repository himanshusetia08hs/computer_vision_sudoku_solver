{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BatchToSpaceND } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { transpose } from './Transpose';\nfunction batchToSpaceND(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockShape,\n    crops\n  } = attrs;\n  const prod = blockShape.reduce((a, b) => a * b);\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n  const xReshaped = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: reshaped\n    }\n  });\n  const xTransposed = transpose({\n    inputs: {\n      x: xReshaped\n    },\n    backend,\n    attrs: {\n      perm: permuted\n    }\n  });\n  const xTransposedReshaped = reshape({\n    inputs: {\n      x: xTransposed\n    },\n    backend,\n    attrs: {\n      shape: reshapedPermuted\n    }\n  });\n  const result = slice({\n    inputs: {\n      x: xTransposedReshaped\n    },\n    backend,\n    attrs: {\n      begin: sliceBeginCoords,\n      size: sliceSize\n    }\n  });\n  backend.disposeData(xReshaped.dataId);\n  backend.disposeData(xTransposed.dataId);\n  backend.disposeData(xReshaped.dataId);\n  return result;\n}\nexport const batchToSpaceNDConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'wasm',\n  kernelFunc: batchToSpaceND\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-wasm/src/kernels/BatchToSpaceND.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAY,EAAE,cAAc,QAA4E,uBAAuB;AAIvI,SAAQ,OAAO,QAAO,WAAW;AACjC,SAAQ,KAAK,QAAO,SAAS;AAC7B,SAAQ,SAAS,QAAO,aAAa;AAErC,SAAS,cAAc,CAAC,IAIvB,EAAA;EACC,MAAM;IAAC,MAAM;IAAE,OAAO;IAAE;EAAK,CAAC,GAAG,IAAI;EACrC,MAAM;IAAC;EAAC,CAAC,GAAG,MAAM;EAClB,MAAM;IAAC,UAAU;IAAE;EAAK,CAAC,GAAG,KAAK;EAEjC,MAAM,IAAI,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;EAE/C,MAAM,QAAQ,GAAG,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC;EACpE,MAAM,QAAQ,GAAG,YAAY,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC;EAC7E,MAAM,gBAAgB,GAClB,YAAY,CAAC,mBAAmB,CAAC,CAAC,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC;EAC/D,MAAM,gBAAgB,GAClB,YAAY,CAAC,mBAAmB,CAAC,KAAK,EAAE,UAAU,CAAC,MAAM,CAAC;EAC9D,MAAM,SAAS,GACX,YAAY,CAAC,YAAY,CAAC,gBAAgB,EAAE,KAAK,EAAE,UAAU,CAAC,MAAM,CAAC;EAEzE,MAAM,SAAS,GAAG,OAAO,CAAC;IAAC,MAAM,EAAE;MAAC;IAAC,CAAC;IAAE,OAAO;IAAE,KAAK,EAAE;MAAC,KAAK,EAAE;IAAQ;EAAC,CAAC,CAAC;EAC3E,MAAM,WAAW,GACb,SAAS,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAS,CAAC;IAAE,OAAO;IAAE,KAAK,EAAE;MAAC,IAAI,EAAE;IAAQ;EAAC,CAAC,CAAC;EACzE,MAAM,mBAAmB,GAAG,OAAO,CAC/B;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAW,CAAC;IAAE,OAAO;IAAE,KAAK,EAAE;MAAC,KAAK,EAAE;IAAgB;EAAC,CAAC,CAAC;EAC1E,MAAM,MAAM,GAAG,KAAK,CAAC;IACnB,MAAM,EAAE;MAAC,CAAC,EAAE;IAAmB,CAAC;IAChC,OAAO;IACP,KAAK,EAAE;MAAC,KAAK,EAAE,gBAAgB;MAAE,IAAI,EAAE;IAAS;GACjD,CAAC;EAEF,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC;EACrC,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC;EACvC,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC;EAErC,OAAO,MAAM;AACf;AAEA,OAAO,MAAM,oBAAoB,GAAiB;EAChD,UAAU,EAAE,cAAc;EAC1B,WAAW,EAAE,MAAM;EACnB,UAAU,EAAE;CACb","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nfunction batchToSpaceND(args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: BackendWasm,\n  attrs: BatchToSpaceNDAttrs\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const xTransposed =\n      transpose({inputs: {x: xReshaped}, backend, attrs: {perm: permuted}});\n  const xTransposedReshaped = reshape(\n      {inputs: {x: xTransposed}, backend, attrs: {shape: reshapedPermuted}});\n  const result = slice({\n    inputs: {x: xTransposedReshaped},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  backend.disposeData(xReshaped.dataId);\n  backend.disposeData(xTransposed.dataId);\n  backend.disposeData(xReshaped.dataId);\n\n  return result;\n}\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'wasm',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}