{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { LazyIterator, OneToManyIterator } from './lazy_iterator';\nexport class StringIterator extends LazyIterator {\n  /**\n   * Splits a string stream on a given separator.\n   *\n   * It is assumed that the incoming chunk boundaries have no semantic meaning,\n   * so conceptually the incoming stream is treated simply as the concatenation\n   * of its elements.\n   *\n   * The outgoing stream provides chunks corresponding to the results of the\n   * standard string split() operation (even if such a chunk spanned incoming\n   * chunks).  The separators are not included.\n   *\n   * A typical usage is to split a text file (represented as a stream with\n   * arbitrary chunk boundaries) into lines.\n   *\n   * @param upstream A readable stream of strings that can be treated as\n   *   concatenated.\n   * @param separator A character to split on.\n   */\n  split(separator) {\n    return new SplitIterator(this, separator);\n  }\n}\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on StringIterator.  Unfortunately they can't be placed in separate files, due\n// to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class SplitIterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\nclass SplitIterator extends StringIterator {\n  constructor(upstream, separator) {\n    super();\n    this.upstream = upstream;\n    this.impl = new SplitIteratorImpl(upstream, separator);\n  }\n  summary() {\n    return this.impl.summary();\n  }\n  async next() {\n    return this.impl.next();\n  }\n}\nclass SplitIteratorImpl extends OneToManyIterator {\n  constructor(upstream, separator) {\n    super();\n    this.upstream = upstream;\n    this.separator = separator;\n    // A partial string at the end of an upstream chunk\n    this.carryover = '';\n  }\n  summary() {\n    return `${this.upstream.summary()} -> Split('${this.separator}')`;\n  }\n  async pump() {\n    const chunkResult = await this.upstream.next();\n    if (chunkResult.done) {\n      if (this.carryover === '') {\n        return false;\n      }\n      // Pretend that the pump succeeded in order to emit the small last batch.\n      // The next pump() call will actually fail.\n      this.outputQueue.push(this.carryover);\n      this.carryover = '';\n      return true;\n    }\n    const lines = chunkResult.value.split(this.separator);\n    // Note the behavior: \" ab \".split(' ') === ['', 'ab', '']\n    // Thus the carryover may be '' if the separator falls on a chunk\n    // boundary; this produces the correct result.\n    lines[0] = this.carryover + lines[0];\n    for (const line of lines.slice(0, -1)) {\n      this.outputQueue.push(line);\n    }\n    this.carryover = lines[lines.length - 1];\n    return true;\n  }\n}","map":{"version":3,"sources":["../../src/iterators/string_iterator.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBG;AAEH,SAAQ,YAAY,EAAE,iBAAiB,QAAO,iBAAiB;AAE/D,OAAM,MAAgB,cAAe,SAAQ,YAAoB,CAAA;EAC/D;;;;;;;;;;;;;;;;;AAiBG;EACH,KAAK,CAAC,SAAiB,EAAA;IACrB,OAAO,IAAI,aAAa,CAAC,IAAI,EAAE,SAAS,CAAC;EAC3C;AACD;AAED;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,MAAM,aAAc,SAAQ,cAAc,CAAA;EAGxC,WAAA,CAAsB,QAA8B,EAAE,SAAiB,EAAA;IACrE,KAAK,EAAE;IADa,IAAA,CAAA,QAAQ,GAAR,QAAQ;IAE5B,IAAI,CAAC,IAAI,GAAG,IAAI,iBAAiB,CAAC,QAAQ,EAAE,SAAS,CAAC;EACxD;EAEA,OAAO,GAAA;IACL,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;EAC5B;EAEA,MAAM,IAAI,GAAA;IACR,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;EACzB;AACD;AAED,MAAM,iBAAkB,SAAQ,iBAAyB,CAAA;EAIvD,WAAA,CACc,QAA8B,EAAY,SAAiB,EAAA;IACvE,KAAK,EAAE;IADK,IAAA,CAAA,QAAQ,GAAR,QAAQ;IAAkC,IAAA,CAAA,SAAS,GAAT,SAAS;IAJjE;IACA,IAAA,CAAA,SAAS,GAAG,EAAE;EAKd;EAEA,OAAO,GAAA;IACL,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,cAAc,IAAI,CAAC,SAAS,IAAI;EACnE;EAEA,MAAM,IAAI,GAAA;IACR,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;IAC9C,IAAI,WAAW,CAAC,IAAI,EAAE;MACpB,IAAI,IAAI,CAAC,SAAS,KAAK,EAAE,EAAE;QACzB,OAAO,KAAK;MACb;MAED;MACA;MACA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;MACrC,IAAI,CAAC,SAAS,GAAG,EAAE;MACnB,OAAO,IAAI;IACZ;IACD,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;IACrD;IACA;IACA;IAEA,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC;IACpC,KAAK,MAAM,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;MACrC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;IAC5B;IACD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IAExC,OAAO,IAAI;EACb;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { LazyIterator, OneToManyIterator } from './lazy_iterator';\nexport class StringIterator extends LazyIterator {\n    /**\n     * Splits a string stream on a given separator.\n     *\n     * It is assumed that the incoming chunk boundaries have no semantic meaning,\n     * so conceptually the incoming stream is treated simply as the concatenation\n     * of its elements.\n     *\n     * The outgoing stream provides chunks corresponding to the results of the\n     * standard string split() operation (even if such a chunk spanned incoming\n     * chunks).  The separators are not included.\n     *\n     * A typical usage is to split a text file (represented as a stream with\n     * arbitrary chunk boundaries) into lines.\n     *\n     * @param upstream A readable stream of strings that can be treated as\n     *   concatenated.\n     * @param separator A character to split on.\n     */\n    split(separator) {\n        return new SplitIterator(this, separator);\n    }\n}\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on StringIterator.  Unfortunately they can't be placed in separate files, due\n// to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class SplitIterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\nclass SplitIterator extends StringIterator {\n    constructor(upstream, separator) {\n        super();\n        this.upstream = upstream;\n        this.impl = new SplitIteratorImpl(upstream, separator);\n    }\n    summary() {\n        return this.impl.summary();\n    }\n    async next() {\n        return this.impl.next();\n    }\n}\nclass SplitIteratorImpl extends OneToManyIterator {\n    constructor(upstream, separator) {\n        super();\n        this.upstream = upstream;\n        this.separator = separator;\n        // A partial string at the end of an upstream chunk\n        this.carryover = '';\n    }\n    summary() {\n        return `${this.upstream.summary()} -> Split('${this.separator}')`;\n    }\n    async pump() {\n        const chunkResult = await this.upstream.next();\n        if (chunkResult.done) {\n            if (this.carryover === '') {\n                return false;\n            }\n            // Pretend that the pump succeeded in order to emit the small last batch.\n            // The next pump() call will actually fail.\n            this.outputQueue.push(this.carryover);\n            this.carryover = '';\n            return true;\n        }\n        const lines = chunkResult.value.split(this.separator);\n        // Note the behavior: \" ab \".split(' ') === ['', 'ab', '']\n        // Thus the carryover may be '' if the separator falls on a chunk\n        // boundary; this produces the correct result.\n        lines[0] = this.carryover + lines[0];\n        for (const line of lines.slice(0, -1)) {\n            this.outputQueue.push(line);\n        }\n        this.carryover = lines[lines.length - 1];\n        return true;\n    }\n}\n//# sourceMappingURL=string_iterator.js.map"]},"metadata":{},"sourceType":"module"}