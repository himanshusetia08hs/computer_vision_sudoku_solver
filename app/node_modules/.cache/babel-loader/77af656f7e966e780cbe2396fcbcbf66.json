{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmFunc;\nfunction setupFunc(backend) {\n  wasmFunc = backend.wasm.cwrap(AddN, null /* void */, ['array', 'number', 'number', 'number']);\n}\nfunction addn(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const out = backend.makeOutput(inputs[0].shape, inputs[0].dtype);\n  // Short-circuit zero-sized tensors.\n  if (util.sizeFromShape(out.shape) === 0) {\n    return out;\n  }\n  const inputIds = inputs.map(x => backend.dataIdMap.get(x.dataId).id);\n  const inputIdsBytes = new Uint8Array(new Int32Array(inputIds).buffer);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmFunc(inputIdsBytes, inputIds.length, CppDType[out.dtype], outId);\n  return out;\n}\nexport const addNConfig = {\n  kernelName: AddN,\n  backendName: 'wasm',\n  setupFunc,\n  kernelFunc: addn\n};","map":{"version":3,"sources":["../../src/kernels/AddN.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,IAAI,EAAwC,IAAI,QAAO,uBAAuB;AAItF,SAAQ,QAAQ,QAAO,SAAS;AAEhC,IAAI,QAEQ;AAEZ,SAAS,SAAS,CAAC,OAAoB,EAAA;EACrC,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CACnD,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,QAAQ,CACT,CAAC;AACJ;AAEA,SAAS,IAAI,CAAC,IAAkD,EAAA;EAC9D,MAAM;IAAC,MAAM;IAAE;EAAO,CAAC,GAAG,IAAI;EAC9B,MAAM,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;EAEhE;EACA,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;IACvC,OAAO,GAAG;EACX;EAED,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;EACpE,MAAM,aAAa,GAAG,IAAI,UAAU,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;EACrE,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE;EAClD,QAAQ,CAAC,aAAa,EAAE,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC;EAEpE,OAAO,GAAG;AACZ;AAEA,OAAO,MAAM,UAAU,GAAiB;EACtC,UAAU,EAAE,IAAI;EAChB,WAAW,EAAE,MAAM;EACnB,SAAS;EACT,UAAU,EAAE;CACb","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmFunc;\nfunction setupFunc(backend) {\n    wasmFunc = backend.wasm.cwrap(AddN, null /* void */, [\n        'array',\n        'number',\n        'number',\n        'number',\n    ]);\n}\nfunction addn(args) {\n    const { inputs, backend } = args;\n    const out = backend.makeOutput(inputs[0].shape, inputs[0].dtype);\n    // Short-circuit zero-sized tensors.\n    if (util.sizeFromShape(out.shape) === 0) {\n        return out;\n    }\n    const inputIds = inputs.map(x => backend.dataIdMap.get(x.dataId).id);\n    const inputIdsBytes = new Uint8Array(new Int32Array(inputIds).buffer);\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmFunc(inputIdsBytes, inputIds.length, CppDType[out.dtype], outId);\n    return out;\n}\nexport const addNConfig = {\n    kernelName: AddN,\n    backendName: 'wasm',\n    setupFunc,\n    kernelFunc: addn,\n};\n//# sourceMappingURL=AddN.js.map"]},"metadata":{},"sourceType":"module"}