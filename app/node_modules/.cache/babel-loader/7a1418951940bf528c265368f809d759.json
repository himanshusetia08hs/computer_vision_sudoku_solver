{"ast":null,"code":"import { isNumber } from './is';\n/**\n * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue\n */\n\n/**\n * Check if a number is integer\n * @param {number | boolean} value\n * @return {boolean} isInteger\n */\n\nexport function isInteger(value) {\n  if (typeof value === 'boolean') {\n    return true;\n  }\n  return isFinite(value) ? value === Math.round(value) : false; // Note: we use ==, not ===, as we can have Booleans as well\n}\n/**\n * Calculate the sign of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var sign = /* #__PURE__ */Math.sign || function (x) {\n  if (x > 0) {\n    return 1;\n  } else if (x < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n/**\n * Calculate the base-2 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var log2 = /* #__PURE__ */Math.log2 || function log2(x) {\n  return Math.log(x) / Math.LN2;\n};\n/**\n * Calculate the base-10 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var log10 = /* #__PURE__ */Math.log10 || function log10(x) {\n  return Math.log(x) / Math.LN10;\n};\n/**\n * Calculate the natural logarithm of a number + 1\n * @param {number} x\n * @returns {number}\n */\n\nexport var log1p = /* #__PURE__ */Math.log1p || function (x) {\n  return Math.log(x + 1);\n};\n/**\n * Calculate cubic root for a number\n *\n * Code from es6-shim.js:\n *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577\n *\n * @param {number} x\n * @returns {number} Returns the cubic root of x\n */\n\nexport var cbrt = /* #__PURE__ */Math.cbrt || function cbrt(x) {\n  if (x === 0) {\n    return x;\n  }\n  var negate = x < 0;\n  var result;\n  if (negate) {\n    x = -x;\n  }\n  if (isFinite(x)) {\n    result = Math.exp(Math.log(x) / 3); // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods\n\n    result = (x / (result * result) + 2 * result) / 3;\n  } else {\n    result = x;\n  }\n  return negate ? -result : result;\n};\n/**\n * Calculates exponentiation minus 1\n * @param {number} x\n * @return {number} res\n */\n\nexport var expm1 = /* #__PURE__ */Math.expm1 || function expm1(x) {\n  return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;\n};\n/**\n * Convert a number to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'engineering'    Always use engineering notation.\n *                                          For example '123.4e+0' and '14.0e+6'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lowerExp` and `upperExp` bounds, and\n *                                          uses exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default,\n *                                          not rounding any digits.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12.071, {notation: 'fixed'})                // '12'\n *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'\n *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'\n *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'\n *\n * @param {number} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\n\nexport function format(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  } // handle special cases\n\n  if (value === Infinity) {\n    return 'Infinity';\n  } else if (value === -Infinity) {\n    return '-Infinity';\n  } else if (isNaN(value)) {\n    return 'NaN';\n  } // default values for options\n\n  var notation = 'auto';\n  var precision;\n  if (options) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    } // determine precision from options\n\n    if (isNumber(options)) {\n      precision = options;\n    } else if (isNumber(options.precision)) {\n      precision = options.precision;\n    }\n  } // handle the various notations\n\n  switch (notation) {\n    case 'fixed':\n      return toFixed(value, precision);\n    case 'exponential':\n      return toExponential(value, precision);\n    case 'engineering':\n      return toEngineering(value, precision);\n    case 'auto':\n      // remove trailing zeros after the decimal point\n      return toPrecision(value, precision, options && options).replace(/((\\.\\d*?)(0+))($|e)/, function () {\n        var digits = arguments[2];\n        var e = arguments[4];\n        return digits !== '.' ? digits + e : e;\n      });\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", or \"fixed\".');\n  }\n}\n/**\n * Split a number into sign, coefficients, and exponent\n * @param {number | string} value\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n */\n\nexport function splitNumber(value) {\n  // parse the input value\n  var match = String(value).toLowerCase().match(/^0*?(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);\n  if (!match) {\n    throw new SyntaxError('Invalid number ' + value);\n  }\n  var sign = match[1];\n  var digits = match[2];\n  var exponent = parseFloat(match[4] || '0');\n  var dot = digits.indexOf('.');\n  exponent += dot !== -1 ? dot - 1 : digits.length - 1;\n  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)\n  .replace(/^0*/, function (zeros) {\n    // remove leading zeros, add their count to the exponent\n    exponent -= zeros.length;\n    return '';\n  }).replace(/0*$/, '') // remove trailing zeros\n  .split('').map(function (d) {\n    return parseInt(d);\n  });\n  if (coefficients.length === 0) {\n    coefficients.push(0);\n    exponent++;\n  }\n  return {\n    sign: sign,\n    coefficients: coefficients,\n    exponent: exponent\n  };\n}\n/**\n * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]        Optional number of significant figures to return.\n */\n\nexport function toEngineering(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n  var split = splitNumber(value);\n  var rounded = roundDigits(split, precision);\n  var e = rounded.exponent;\n  var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent\n\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;\n  if (isNumber(precision)) {\n    // add zeroes to give correct sig figs\n    while (precision > c.length || e - newExp + 1 > c.length) {\n      c.push(0);\n    }\n  } else {\n    // concatenate coefficients with necessary zeros\n    // add zeros if necessary (for example: 1e+8 -> 100e+6)\n    var missingZeros = Math.abs(e - newExp) - (c.length - 1);\n    for (var i = 0; i < missingZeros; i++) {\n      c.push(0);\n    }\n  } // find difference in exponents\n\n  var expDiff = Math.abs(e - newExp);\n  var decimalIdx = 1; // push decimal index over by expDiff times\n\n  while (expDiff > 0) {\n    decimalIdx++;\n    expDiff--;\n  } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.\n  // otherwise concat with the rest of the coefficients\n\n  var decimals = c.slice(decimalIdx).join('');\n  var decimalVal = isNumber(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';\n  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n  return rounded.sign + str;\n}\n/**\n * Format a number with fixed notation.\n * @param {number | string} value\n * @param {number} [precision=undefined]  Optional number of decimals after the\n *                                        decimal point. null by default.\n */\n\nexport function toFixed(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n  var splitValue = splitNumber(value);\n  var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;\n  var c = rounded.coefficients;\n  var p = rounded.exponent + 1; // exponent may have changed\n  // append zeros if needed\n\n  var pp = p + (precision || 0);\n  if (c.length < pp) {\n    c = c.concat(zeros(pp - c.length));\n  } // prepend zeros if needed\n\n  if (p < 0) {\n    c = zeros(-p + 1).concat(c);\n    p = 1;\n  } // insert a dot if needed\n\n  if (p < c.length) {\n    c.splice(p, 0, p === 0 ? '0.' : '.');\n  }\n  return rounded.sign + c.join('');\n}\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n */\n\nexport function toExponential(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // round if needed, else create a clone\n\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n  var c = rounded.coefficients;\n  var e = rounded.exponent; // append zeros if needed\n\n  if (c.length < precision) {\n    c = c.concat(zeros(precision - c.length));\n  } // format as `C.CCCe+EEE` or `C.CCCe-EEE`\n\n  var first = c.shift();\n  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;\n}\n/**\n * Format a number with a certain precision\n * @param {number | string} value\n * @param {number} [precision=undefined] Optional number of digits.\n * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]\n *                                       By default:\n *                                         lowerExp = -3 (incl)\n *                                         upper = +5 (excl)\n * @return {string}\n */\n\nexport function toPrecision(value, precision, options) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // determine lower and upper bound for exponential notation.\n\n  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {\n    // exponential notation\n    return toExponential(value, precision);\n  } else {\n    var c = rounded.coefficients;\n    var e = rounded.exponent; // append trailing zeros\n\n    if (c.length < precision) {\n      c = c.concat(zeros(precision - c.length));\n    } // append trailing zeros\n    // TODO: simplify the next statement\n\n    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros\n\n    c = zeros(-e).concat(c);\n    var dot = e > 0 ? e : 0;\n    if (dot < c.length - 1) {\n      c.splice(dot + 1, 0, '.');\n    }\n    return rounded.sign + c.join('');\n  }\n}\n/**\n * Round the number of digits of a number *\n * @param {SplitValue} split       A value split with .splitNumber(value)\n * @param {number} precision  A positive integer\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n *              with rounded digits\n */\n\nexport function roundDigits(split, precision) {\n  // create a clone\n  var rounded = {\n    sign: split.sign,\n    coefficients: split.coefficients,\n    exponent: split.exponent\n  };\n  var c = rounded.coefficients; // prepend zeros if needed\n\n  while (precision <= 0) {\n    c.unshift(0);\n    rounded.exponent++;\n    precision++;\n  }\n  if (c.length > precision) {\n    var removed = c.splice(precision, c.length - precision);\n    if (removed[0] >= 5) {\n      var i = precision - 1;\n      c[i]++;\n      while (c[i] === 10) {\n        c.pop();\n        if (i === 0) {\n          c.unshift(0);\n          rounded.exponent++;\n          i++;\n        }\n        i--;\n        c[i]++;\n      }\n    }\n  }\n  return rounded;\n}\n/**\n * Create an array filled with zeros.\n * @param {number} length\n * @return {Array}\n */\n\nfunction zeros(length) {\n  var arr = [];\n  for (var i = 0; i < length; i++) {\n    arr.push(0);\n  }\n  return arr;\n}\n/**\n * Count the number of significant digits of a number.\n *\n * For example:\n *   2.34 returns 3\n *   0.0034 returns 2\n *   120.5e+30 returns 4\n *\n * @param {number} value\n * @return {number} digits   Number of significant digits\n */\n\nexport function digits(value) {\n  return value.toExponential().replace(/e.*$/, '') // remove exponential notation\n  .replace(/^0\\.?0*|\\./, '') // remove decimal point and leading zeros\n  .length;\n}\n/**\n * Minimum number added to one that makes the result different than one\n */\n\nexport var DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;\n/**\n * Compares two floating point numbers.\n * @param {number} x          First value to compare\n * @param {number} y          Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n*/\n\nexport function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x === y;\n  }\n  if (x === y) {\n    return true;\n  } // NaN\n\n  if (isNaN(x) || isNaN(y)) {\n    return false;\n  } // at this point x and y should be finite\n\n  if (isFinite(x) && isFinite(y)) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = Math.abs(x - y);\n    if (diff < DBL_EPSILON) {\n      return true;\n    } else {\n      // use relative error\n      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;\n    }\n  } // Infinite and Number or negative Infinite and positive Infinite cases\n\n  return false;\n}\n/**\n * Calculate the hyperbolic arccos of a number\n * @param {number} x\n * @return {number}\n */\n\nexport var acosh = Math.acosh || function (x) {\n  return Math.log(Math.sqrt(x * x - 1) + x);\n};\nexport var asinh = Math.asinh || function (x) {\n  return Math.log(Math.sqrt(x * x + 1) + x);\n};\n/**\n * Calculate the hyperbolic arctangent of a number\n * @param {number} x\n * @return {number}\n */\n\nexport var atanh = Math.atanh || function (x) {\n  return Math.log((1 + x) / (1 - x)) / 2;\n};\n/**\n * Calculate the hyperbolic cosine of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var cosh = Math.cosh || function (x) {\n  return (Math.exp(x) + Math.exp(-x)) / 2;\n};\n/**\n * Calculate the hyperbolic sine of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var sinh = Math.sinh || function (x) {\n  return (Math.exp(x) - Math.exp(-x)) / 2;\n};\n/**\n * Calculate the hyperbolic tangent of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var tanh = Math.tanh || function (x) {\n  var e = Math.exp(2 * x);\n  return (e - 1) / (e + 1);\n};","map":{"version":3,"names":["isNumber","isInteger","value","isFinite","Math","round","sign","x","log2","log","LN2","log10","LN10","log1p","cbrt","negate","result","exp","expm1","format","options","Infinity","isNaN","notation","precision","toFixed","toExponential","toEngineering","toPrecision","replace","digits","arguments","e","Error","splitNumber","match","String","toLowerCase","SyntaxError","exponent","parseFloat","dot","indexOf","length","coefficients","zeros","split","map","d","parseInt","push","rounded","roundDigits","c","newExp","missingZeros","abs","i","expDiff","decimalIdx","decimals","slice","join","decimalVal","str","toString","splitValue","p","pp","concat","splice","first","shift","lowerExp","undefined","upperExp","unshift","removed","pop","arr","DBL_EPSILON","Number","EPSILON","nearlyEqual","y","epsilon","diff","max","acosh","sqrt","asinh","atanh","cosh","sinh","tanh"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/Project/temp/app/node_modules/mathjs/es/utils/number.js"],"sourcesContent":["import { isNumber } from './is';\n/**\n * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue\n */\n\n/**\n * Check if a number is integer\n * @param {number | boolean} value\n * @return {boolean} isInteger\n */\n\nexport function isInteger(value) {\n  if (typeof value === 'boolean') {\n    return true;\n  }\n\n  return isFinite(value) ? value === Math.round(value) : false; // Note: we use ==, not ===, as we can have Booleans as well\n}\n/**\n * Calculate the sign of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var sign = /* #__PURE__ */Math.sign || function (x) {\n  if (x > 0) {\n    return 1;\n  } else if (x < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n/**\n * Calculate the base-2 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var log2 = /* #__PURE__ */Math.log2 || function log2(x) {\n  return Math.log(x) / Math.LN2;\n};\n/**\n * Calculate the base-10 logarithm of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var log10 = /* #__PURE__ */Math.log10 || function log10(x) {\n  return Math.log(x) / Math.LN10;\n};\n/**\n * Calculate the natural logarithm of a number + 1\n * @param {number} x\n * @returns {number}\n */\n\nexport var log1p = /* #__PURE__ */Math.log1p || function (x) {\n  return Math.log(x + 1);\n};\n/**\n * Calculate cubic root for a number\n *\n * Code from es6-shim.js:\n *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577\n *\n * @param {number} x\n * @returns {number} Returns the cubic root of x\n */\n\nexport var cbrt = /* #__PURE__ */Math.cbrt || function cbrt(x) {\n  if (x === 0) {\n    return x;\n  }\n\n  var negate = x < 0;\n  var result;\n\n  if (negate) {\n    x = -x;\n  }\n\n  if (isFinite(x)) {\n    result = Math.exp(Math.log(x) / 3); // from https://en.wikipedia.org/wiki/Cube_root#Numerical_methods\n\n    result = (x / (result * result) + 2 * result) / 3;\n  } else {\n    result = x;\n  }\n\n  return negate ? -result : result;\n};\n/**\n * Calculates exponentiation minus 1\n * @param {number} x\n * @return {number} res\n */\n\nexport var expm1 = /* #__PURE__ */Math.expm1 || function expm1(x) {\n  return x >= 2e-4 || x <= -2e-4 ? Math.exp(x) - 1 : x + x * x / 2 + x * x * x / 6;\n};\n/**\n * Convert a number to a formatted string representation.\n *\n * Syntax:\n *\n *    format(value)\n *    format(value, options)\n *    format(value, precision)\n *    format(value, fn)\n *\n * Where:\n *\n *    {number} value   The value to be formatted\n *    {Object} options An object with formatting options. Available options:\n *                     {string} notation\n *                         Number notation. Choose from:\n *                         'fixed'          Always use regular number notation.\n *                                          For example '123.40' and '14000000'\n *                         'exponential'    Always use exponential notation.\n *                                          For example '1.234e+2' and '1.4e+7'\n *                         'engineering'    Always use engineering notation.\n *                                          For example '123.4e+0' and '14.0e+6'\n *                         'auto' (default) Regular number notation for numbers\n *                                          having an absolute value between\n *                                          `lowerExp` and `upperExp` bounds, and\n *                                          uses exponential notation elsewhere.\n *                                          Lower bound is included, upper bound\n *                                          is excluded.\n *                                          For example '123.4' and '1.4e7'.\n *                     {number} precision   A number between 0 and 16 to round\n *                                          the digits of the number.\n *                                          In case of notations 'exponential',\n *                                          'engineering', and 'auto',\n *                                          `precision` defines the total\n *                                          number of significant digits returned.\n *                                          In case of notation 'fixed',\n *                                          `precision` defines the number of\n *                                          significant digits after the decimal\n *                                          point.\n *                                          `precision` is undefined by default,\n *                                          not rounding any digits.\n *                     {number} lowerExp    Exponent determining the lower boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `-3`.\n *                     {number} upperExp    Exponent determining the upper boundary\n *                                          for formatting a value with an exponent\n *                                          when `notation='auto`.\n *                                          Default value is `5`.\n *    {Function} fn    A custom formatting function. Can be used to override the\n *                     built-in notations. Function `fn` is called with `value` as\n *                     parameter and must return a string. Is useful for example to\n *                     format all values inside a matrix in a particular way.\n *\n * Examples:\n *\n *    format(6.4)                                        // '6.4'\n *    format(1240000)                                    // '1.24e6'\n *    format(1/3)                                        // '0.3333333333333333'\n *    format(1/3, 3)                                     // '0.333'\n *    format(21385, 2)                                   // '21000'\n *    format(12.071, {notation: 'fixed'})                // '12'\n *    format(2.3,    {notation: 'fixed', precision: 2})  // '2.30'\n *    format(52.8,   {notation: 'exponential'})          // '5.28e+1'\n *    format(12345678, {notation: 'engineering'})        // '12.345678e+6'\n *\n * @param {number} value\n * @param {Object | Function | number} [options]\n * @return {string} str The formatted value\n */\n\nexport function format(value, options) {\n  if (typeof options === 'function') {\n    // handle format(value, fn)\n    return options(value);\n  } // handle special cases\n\n\n  if (value === Infinity) {\n    return 'Infinity';\n  } else if (value === -Infinity) {\n    return '-Infinity';\n  } else if (isNaN(value)) {\n    return 'NaN';\n  } // default values for options\n\n\n  var notation = 'auto';\n  var precision;\n\n  if (options) {\n    // determine notation from options\n    if (options.notation) {\n      notation = options.notation;\n    } // determine precision from options\n\n\n    if (isNumber(options)) {\n      precision = options;\n    } else if (isNumber(options.precision)) {\n      precision = options.precision;\n    }\n  } // handle the various notations\n\n\n  switch (notation) {\n    case 'fixed':\n      return toFixed(value, precision);\n\n    case 'exponential':\n      return toExponential(value, precision);\n\n    case 'engineering':\n      return toEngineering(value, precision);\n\n    case 'auto':\n      // remove trailing zeros after the decimal point\n      return toPrecision(value, precision, options && options).replace(/((\\.\\d*?)(0+))($|e)/, function () {\n        var digits = arguments[2];\n        var e = arguments[4];\n        return digits !== '.' ? digits + e : e;\n      });\n\n    default:\n      throw new Error('Unknown notation \"' + notation + '\". ' + 'Choose \"auto\", \"exponential\", or \"fixed\".');\n  }\n}\n/**\n * Split a number into sign, coefficients, and exponent\n * @param {number | string} value\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n */\n\nexport function splitNumber(value) {\n  // parse the input value\n  var match = String(value).toLowerCase().match(/^0*?(-?)(\\d+\\.?\\d*)(e([+-]?\\d+))?$/);\n\n  if (!match) {\n    throw new SyntaxError('Invalid number ' + value);\n  }\n\n  var sign = match[1];\n  var digits = match[2];\n  var exponent = parseFloat(match[4] || '0');\n  var dot = digits.indexOf('.');\n  exponent += dot !== -1 ? dot - 1 : digits.length - 1;\n  var coefficients = digits.replace('.', '') // remove the dot (must be removed before removing leading zeros)\n  .replace(/^0*/, function (zeros) {\n    // remove leading zeros, add their count to the exponent\n    exponent -= zeros.length;\n    return '';\n  }).replace(/0*$/, '') // remove trailing zeros\n  .split('').map(function (d) {\n    return parseInt(d);\n  });\n\n  if (coefficients.length === 0) {\n    coefficients.push(0);\n    exponent++;\n  }\n\n  return {\n    sign: sign,\n    coefficients: coefficients,\n    exponent: exponent\n  };\n}\n/**\n * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]        Optional number of significant figures to return.\n */\n\nexport function toEngineering(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var split = splitNumber(value);\n  var rounded = roundDigits(split, precision);\n  var e = rounded.exponent;\n  var c = rounded.coefficients; // find nearest lower multiple of 3 for exponent\n\n  var newExp = e % 3 === 0 ? e : e < 0 ? e - 3 - e % 3 : e - e % 3;\n\n  if (isNumber(precision)) {\n    // add zeroes to give correct sig figs\n    while (precision > c.length || e - newExp + 1 > c.length) {\n      c.push(0);\n    }\n  } else {\n    // concatenate coefficients with necessary zeros\n    // add zeros if necessary (for example: 1e+8 -> 100e+6)\n    var missingZeros = Math.abs(e - newExp) - (c.length - 1);\n\n    for (var i = 0; i < missingZeros; i++) {\n      c.push(0);\n    }\n  } // find difference in exponents\n\n\n  var expDiff = Math.abs(e - newExp);\n  var decimalIdx = 1; // push decimal index over by expDiff times\n\n  while (expDiff > 0) {\n    decimalIdx++;\n    expDiff--;\n  } // if all coefficient values are zero after the decimal point and precision is unset, don't add a decimal value.\n  // otherwise concat with the rest of the coefficients\n\n\n  var decimals = c.slice(decimalIdx).join('');\n  var decimalVal = isNumber(precision) && decimals.length || decimals.match(/[1-9]/) ? '.' + decimals : '';\n  var str = c.slice(0, decimalIdx).join('') + decimalVal + 'e' + (e >= 0 ? '+' : '') + newExp.toString();\n  return rounded.sign + str;\n}\n/**\n * Format a number with fixed notation.\n * @param {number | string} value\n * @param {number} [precision=undefined]  Optional number of decimals after the\n *                                        decimal point. null by default.\n */\n\nexport function toFixed(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  }\n\n  var splitValue = splitNumber(value);\n  var rounded = typeof precision === 'number' ? roundDigits(splitValue, splitValue.exponent + 1 + precision) : splitValue;\n  var c = rounded.coefficients;\n  var p = rounded.exponent + 1; // exponent may have changed\n  // append zeros if needed\n\n  var pp = p + (precision || 0);\n\n  if (c.length < pp) {\n    c = c.concat(zeros(pp - c.length));\n  } // prepend zeros if needed\n\n\n  if (p < 0) {\n    c = zeros(-p + 1).concat(c);\n    p = 1;\n  } // insert a dot if needed\n\n\n  if (p < c.length) {\n    c.splice(p, 0, p === 0 ? '0.' : '.');\n  }\n\n  return rounded.sign + c.join('');\n}\n/**\n * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'\n * @param {number | string} value\n * @param {number} [precision]  Number of digits in formatted output.\n *                              If not provided, the maximum available digits\n *                              is used.\n */\n\nexport function toExponential(value, precision) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // round if needed, else create a clone\n\n\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n  var c = rounded.coefficients;\n  var e = rounded.exponent; // append zeros if needed\n\n  if (c.length < precision) {\n    c = c.concat(zeros(precision - c.length));\n  } // format as `C.CCCe+EEE` or `C.CCCe-EEE`\n\n\n  var first = c.shift();\n  return rounded.sign + first + (c.length > 0 ? '.' + c.join('') : '') + 'e' + (e >= 0 ? '+' : '') + e;\n}\n/**\n * Format a number with a certain precision\n * @param {number | string} value\n * @param {number} [precision=undefined] Optional number of digits.\n * @param {{lowerExp: number | undefined, upperExp: number | undefined}} [options]\n *                                       By default:\n *                                         lowerExp = -3 (incl)\n *                                         upper = +5 (excl)\n * @return {string}\n */\n\nexport function toPrecision(value, precision, options) {\n  if (isNaN(value) || !isFinite(value)) {\n    return String(value);\n  } // determine lower and upper bound for exponential notation.\n\n\n  var lowerExp = options && options.lowerExp !== undefined ? options.lowerExp : -3;\n  var upperExp = options && options.upperExp !== undefined ? options.upperExp : 5;\n  var split = splitNumber(value);\n  var rounded = precision ? roundDigits(split, precision) : split;\n\n  if (rounded.exponent < lowerExp || rounded.exponent >= upperExp) {\n    // exponential notation\n    return toExponential(value, precision);\n  } else {\n    var c = rounded.coefficients;\n    var e = rounded.exponent; // append trailing zeros\n\n    if (c.length < precision) {\n      c = c.concat(zeros(precision - c.length));\n    } // append trailing zeros\n    // TODO: simplify the next statement\n\n\n    c = c.concat(zeros(e - c.length + 1 + (c.length < precision ? precision - c.length : 0))); // prepend zeros\n\n    c = zeros(-e).concat(c);\n    var dot = e > 0 ? e : 0;\n\n    if (dot < c.length - 1) {\n      c.splice(dot + 1, 0, '.');\n    }\n\n    return rounded.sign + c.join('');\n  }\n}\n/**\n * Round the number of digits of a number *\n * @param {SplitValue} split       A value split with .splitNumber(value)\n * @param {number} precision  A positive integer\n * @return {SplitValue}\n *              Returns an object containing sign, coefficients, and exponent\n *              with rounded digits\n */\n\nexport function roundDigits(split, precision) {\n  // create a clone\n  var rounded = {\n    sign: split.sign,\n    coefficients: split.coefficients,\n    exponent: split.exponent\n  };\n  var c = rounded.coefficients; // prepend zeros if needed\n\n  while (precision <= 0) {\n    c.unshift(0);\n    rounded.exponent++;\n    precision++;\n  }\n\n  if (c.length > precision) {\n    var removed = c.splice(precision, c.length - precision);\n\n    if (removed[0] >= 5) {\n      var i = precision - 1;\n      c[i]++;\n\n      while (c[i] === 10) {\n        c.pop();\n\n        if (i === 0) {\n          c.unshift(0);\n          rounded.exponent++;\n          i++;\n        }\n\n        i--;\n        c[i]++;\n      }\n    }\n  }\n\n  return rounded;\n}\n/**\n * Create an array filled with zeros.\n * @param {number} length\n * @return {Array}\n */\n\nfunction zeros(length) {\n  var arr = [];\n\n  for (var i = 0; i < length; i++) {\n    arr.push(0);\n  }\n\n  return arr;\n}\n/**\n * Count the number of significant digits of a number.\n *\n * For example:\n *   2.34 returns 3\n *   0.0034 returns 2\n *   120.5e+30 returns 4\n *\n * @param {number} value\n * @return {number} digits   Number of significant digits\n */\n\n\nexport function digits(value) {\n  return value.toExponential().replace(/e.*$/, '') // remove exponential notation\n  .replace(/^0\\.?0*|\\./, '') // remove decimal point and leading zeros\n  .length;\n}\n/**\n * Minimum number added to one that makes the result different than one\n */\n\nexport var DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;\n/**\n * Compares two floating point numbers.\n * @param {number} x          First value to compare\n * @param {number} y          Second value to compare\n * @param {number} [epsilon]  The maximum relative difference between x and y\n *                            If epsilon is undefined or null, the function will\n *                            test whether x and y are exactly equal.\n * @return {boolean} whether the two numbers are nearly equal\n*/\n\nexport function nearlyEqual(x, y, epsilon) {\n  // if epsilon is null or undefined, test whether x and y are exactly equal\n  if (epsilon === null || epsilon === undefined) {\n    return x === y;\n  }\n\n  if (x === y) {\n    return true;\n  } // NaN\n\n\n  if (isNaN(x) || isNaN(y)) {\n    return false;\n  } // at this point x and y should be finite\n\n\n  if (isFinite(x) && isFinite(y)) {\n    // check numbers are very close, needed when comparing numbers near zero\n    var diff = Math.abs(x - y);\n\n    if (diff < DBL_EPSILON) {\n      return true;\n    } else {\n      // use relative error\n      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;\n    }\n  } // Infinite and Number or negative Infinite and positive Infinite cases\n\n\n  return false;\n}\n/**\n * Calculate the hyperbolic arccos of a number\n * @param {number} x\n * @return {number}\n */\n\nexport var acosh = Math.acosh || function (x) {\n  return Math.log(Math.sqrt(x * x - 1) + x);\n};\nexport var asinh = Math.asinh || function (x) {\n  return Math.log(Math.sqrt(x * x + 1) + x);\n};\n/**\n * Calculate the hyperbolic arctangent of a number\n * @param {number} x\n * @return {number}\n */\n\nexport var atanh = Math.atanh || function (x) {\n  return Math.log((1 + x) / (1 - x)) / 2;\n};\n/**\n * Calculate the hyperbolic cosine of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var cosh = Math.cosh || function (x) {\n  return (Math.exp(x) + Math.exp(-x)) / 2;\n};\n/**\n * Calculate the hyperbolic sine of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var sinh = Math.sinh || function (x) {\n  return (Math.exp(x) - Math.exp(-x)) / 2;\n};\n/**\n * Calculate the hyperbolic tangent of a number\n * @param {number} x\n * @returns {number}\n */\n\nexport var tanh = Math.tanh || function (x) {\n  var e = Math.exp(2 * x);\n  return (e - 1) / (e + 1);\n};"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,MAAM;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,SAAS,CAACC,KAAK,EAAE;EAC/B,IAAI,OAAOA,KAAK,KAAK,SAAS,EAAE;IAC9B,OAAO,IAAI;EACb;EAEA,OAAOC,QAAQ,CAACD,KAAK,CAAC,GAAGA,KAAK,KAAKE,IAAI,CAACC,KAAK,CAACH,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;AAChE;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAII,IAAI,GAAG,eAAeF,IAAI,CAACE,IAAI,IAAI,UAAUC,CAAC,EAAE;EACzD,IAAIA,CAAC,GAAG,CAAC,EAAE;IACT,OAAO,CAAC;EACV,CAAC,MAAM,IAAIA,CAAC,GAAG,CAAC,EAAE;IAChB,OAAO,CAAC,CAAC;EACX,CAAC,MAAM;IACL,OAAO,CAAC;EACV;AACF,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,IAAI,GAAG,eAAeJ,IAAI,CAACI,IAAI,IAAI,SAASA,IAAI,CAACD,CAAC,EAAE;EAC7D,OAAOH,IAAI,CAACK,GAAG,CAACF,CAAC,CAAC,GAAGH,IAAI,CAACM,GAAG;AAC/B,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,KAAK,GAAG,eAAeP,IAAI,CAACO,KAAK,IAAI,SAASA,KAAK,CAACJ,CAAC,EAAE;EAChE,OAAOH,IAAI,CAACK,GAAG,CAACF,CAAC,CAAC,GAAGH,IAAI,CAACQ,IAAI;AAChC,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,KAAK,GAAG,eAAeT,IAAI,CAACS,KAAK,IAAI,UAAUN,CAAC,EAAE;EAC3D,OAAOH,IAAI,CAACK,GAAG,CAACF,CAAC,GAAG,CAAC,CAAC;AACxB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIO,IAAI,GAAG,eAAeV,IAAI,CAACU,IAAI,IAAI,SAASA,IAAI,CAACP,CAAC,EAAE;EAC7D,IAAIA,CAAC,KAAK,CAAC,EAAE;IACX,OAAOA,CAAC;EACV;EAEA,IAAIQ,MAAM,GAAGR,CAAC,GAAG,CAAC;EAClB,IAAIS,MAAM;EAEV,IAAID,MAAM,EAAE;IACVR,CAAC,GAAG,CAACA,CAAC;EACR;EAEA,IAAIJ,QAAQ,CAACI,CAAC,CAAC,EAAE;IACfS,MAAM,GAAGZ,IAAI,CAACa,GAAG,CAACb,IAAI,CAACK,GAAG,CAACF,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;IAEpCS,MAAM,GAAG,CAACT,CAAC,IAAIS,MAAM,GAAGA,MAAM,CAAC,GAAG,CAAC,GAAGA,MAAM,IAAI,CAAC;EACnD,CAAC,MAAM;IACLA,MAAM,GAAGT,CAAC;EACZ;EAEA,OAAOQ,MAAM,GAAG,CAACC,MAAM,GAAGA,MAAM;AAClC,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIE,KAAK,GAAG,eAAed,IAAI,CAACc,KAAK,IAAI,SAASA,KAAK,CAACX,CAAC,EAAE;EAChE,OAAOA,CAAC,IAAI,IAAI,IAAIA,CAAC,IAAI,CAAC,IAAI,GAAGH,IAAI,CAACa,GAAG,CAACV,CAAC,CAAC,GAAG,CAAC,GAAGA,CAAC,GAAGA,CAAC,GAAGA,CAAC,GAAG,CAAC,GAAGA,CAAC,GAAGA,CAAC,GAAGA,CAAC,GAAG,CAAC;AAClF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASY,MAAM,CAACjB,KAAK,EAAEkB,OAAO,EAAE;EACrC,IAAI,OAAOA,OAAO,KAAK,UAAU,EAAE;IACjC;IACA,OAAOA,OAAO,CAAClB,KAAK,CAAC;EACvB,CAAC,CAAC;;EAGF,IAAIA,KAAK,KAAKmB,QAAQ,EAAE;IACtB,OAAO,UAAU;EACnB,CAAC,MAAM,IAAInB,KAAK,KAAK,CAACmB,QAAQ,EAAE;IAC9B,OAAO,WAAW;EACpB,CAAC,MAAM,IAAIC,KAAK,CAACpB,KAAK,CAAC,EAAE;IACvB,OAAO,KAAK;EACd,CAAC,CAAC;;EAGF,IAAIqB,QAAQ,GAAG,MAAM;EACrB,IAAIC,SAAS;EAEb,IAAIJ,OAAO,EAAE;IACX;IACA,IAAIA,OAAO,CAACG,QAAQ,EAAE;MACpBA,QAAQ,GAAGH,OAAO,CAACG,QAAQ;IAC7B,CAAC,CAAC;;IAGF,IAAIvB,QAAQ,CAACoB,OAAO,CAAC,EAAE;MACrBI,SAAS,GAAGJ,OAAO;IACrB,CAAC,MAAM,IAAIpB,QAAQ,CAACoB,OAAO,CAACI,SAAS,CAAC,EAAE;MACtCA,SAAS,GAAGJ,OAAO,CAACI,SAAS;IAC/B;EACF,CAAC,CAAC;;EAGF,QAAQD,QAAQ;IACd,KAAK,OAAO;MACV,OAAOE,OAAO,CAACvB,KAAK,EAAEsB,SAAS,CAAC;IAElC,KAAK,aAAa;MAChB,OAAOE,aAAa,CAACxB,KAAK,EAAEsB,SAAS,CAAC;IAExC,KAAK,aAAa;MAChB,OAAOG,aAAa,CAACzB,KAAK,EAAEsB,SAAS,CAAC;IAExC,KAAK,MAAM;MACT;MACA,OAAOI,WAAW,CAAC1B,KAAK,EAAEsB,SAAS,EAAEJ,OAAO,IAAIA,OAAO,CAAC,CAACS,OAAO,CAAC,qBAAqB,EAAE,YAAY;QAClG,IAAIC,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;QACzB,IAAIC,CAAC,GAAGD,SAAS,CAAC,CAAC,CAAC;QACpB,OAAOD,MAAM,KAAK,GAAG,GAAGA,MAAM,GAAGE,CAAC,GAAGA,CAAC;MACxC,CAAC,CAAC;IAEJ;MACE,MAAM,IAAIC,KAAK,CAAC,oBAAoB,GAAGV,QAAQ,GAAG,KAAK,GAAG,2CAA2C,CAAC;EAAC;AAE7G;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASW,WAAW,CAAChC,KAAK,EAAE;EACjC;EACA,IAAIiC,KAAK,GAAGC,MAAM,CAAClC,KAAK,CAAC,CAACmC,WAAW,EAAE,CAACF,KAAK,CAAC,oCAAoC,CAAC;EAEnF,IAAI,CAACA,KAAK,EAAE;IACV,MAAM,IAAIG,WAAW,CAAC,iBAAiB,GAAGpC,KAAK,CAAC;EAClD;EAEA,IAAII,IAAI,GAAG6B,KAAK,CAAC,CAAC,CAAC;EACnB,IAAIL,MAAM,GAAGK,KAAK,CAAC,CAAC,CAAC;EACrB,IAAII,QAAQ,GAAGC,UAAU,CAACL,KAAK,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC;EAC1C,IAAIM,GAAG,GAAGX,MAAM,CAACY,OAAO,CAAC,GAAG,CAAC;EAC7BH,QAAQ,IAAIE,GAAG,KAAK,CAAC,CAAC,GAAGA,GAAG,GAAG,CAAC,GAAGX,MAAM,CAACa,MAAM,GAAG,CAAC;EACpD,IAAIC,YAAY,GAAGd,MAAM,CAACD,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;EAAA,CAC1CA,OAAO,CAAC,KAAK,EAAE,UAAUgB,KAAK,EAAE;IAC/B;IACAN,QAAQ,IAAIM,KAAK,CAACF,MAAM;IACxB,OAAO,EAAE;EACX,CAAC,CAAC,CAACd,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;EAAA,CACrBiB,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAAC,UAAUC,CAAC,EAAE;IAC1B,OAAOC,QAAQ,CAACD,CAAC,CAAC;EACpB,CAAC,CAAC;EAEF,IAAIJ,YAAY,CAACD,MAAM,KAAK,CAAC,EAAE;IAC7BC,YAAY,CAACM,IAAI,CAAC,CAAC,CAAC;IACpBX,QAAQ,EAAE;EACZ;EAEA,OAAO;IACLjC,IAAI,EAAEA,IAAI;IACVsC,YAAY,EAAEA,YAAY;IAC1BL,QAAQ,EAAEA;EACZ,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASZ,aAAa,CAACzB,KAAK,EAAEsB,SAAS,EAAE;EAC9C,IAAIF,KAAK,CAACpB,KAAK,CAAC,IAAI,CAACC,QAAQ,CAACD,KAAK,CAAC,EAAE;IACpC,OAAOkC,MAAM,CAAClC,KAAK,CAAC;EACtB;EAEA,IAAI4C,KAAK,GAAGZ,WAAW,CAAChC,KAAK,CAAC;EAC9B,IAAIiD,OAAO,GAAGC,WAAW,CAACN,KAAK,EAAEtB,SAAS,CAAC;EAC3C,IAAIQ,CAAC,GAAGmB,OAAO,CAACZ,QAAQ;EACxB,IAAIc,CAAC,GAAGF,OAAO,CAACP,YAAY,CAAC,CAAC;;EAE9B,IAAIU,MAAM,GAAGtB,CAAC,GAAG,CAAC,KAAK,CAAC,GAAGA,CAAC,GAAGA,CAAC,GAAG,CAAC,GAAGA,CAAC,GAAG,CAAC,GAAGA,CAAC,GAAG,CAAC,GAAGA,CAAC,GAAGA,CAAC,GAAG,CAAC;EAEhE,IAAIhC,QAAQ,CAACwB,SAAS,CAAC,EAAE;IACvB;IACA,OAAOA,SAAS,GAAG6B,CAAC,CAACV,MAAM,IAAIX,CAAC,GAAGsB,MAAM,GAAG,CAAC,GAAGD,CAAC,CAACV,MAAM,EAAE;MACxDU,CAAC,CAACH,IAAI,CAAC,CAAC,CAAC;IACX;EACF,CAAC,MAAM;IACL;IACA;IACA,IAAIK,YAAY,GAAGnD,IAAI,CAACoD,GAAG,CAACxB,CAAC,GAAGsB,MAAM,CAAC,IAAID,CAAC,CAACV,MAAM,GAAG,CAAC,CAAC;IAExD,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,YAAY,EAAEE,CAAC,EAAE,EAAE;MACrCJ,CAAC,CAACH,IAAI,CAAC,CAAC,CAAC;IACX;EACF,CAAC,CAAC;;EAGF,IAAIQ,OAAO,GAAGtD,IAAI,CAACoD,GAAG,CAACxB,CAAC,GAAGsB,MAAM,CAAC;EAClC,IAAIK,UAAU,GAAG,CAAC,CAAC,CAAC;;EAEpB,OAAOD,OAAO,GAAG,CAAC,EAAE;IAClBC,UAAU,EAAE;IACZD,OAAO,EAAE;EACX,CAAC,CAAC;EACF;;EAGA,IAAIE,QAAQ,GAAGP,CAAC,CAACQ,KAAK,CAACF,UAAU,CAAC,CAACG,IAAI,CAAC,EAAE,CAAC;EAC3C,IAAIC,UAAU,GAAG/D,QAAQ,CAACwB,SAAS,CAAC,IAAIoC,QAAQ,CAACjB,MAAM,IAAIiB,QAAQ,CAACzB,KAAK,CAAC,OAAO,CAAC,GAAG,GAAG,GAAGyB,QAAQ,GAAG,EAAE;EACxG,IAAII,GAAG,GAAGX,CAAC,CAACQ,KAAK,CAAC,CAAC,EAAEF,UAAU,CAAC,CAACG,IAAI,CAAC,EAAE,CAAC,GAAGC,UAAU,GAAG,GAAG,IAAI/B,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,GAAGsB,MAAM,CAACW,QAAQ,EAAE;EACtG,OAAOd,OAAO,CAAC7C,IAAI,GAAG0D,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASvC,OAAO,CAACvB,KAAK,EAAEsB,SAAS,EAAE;EACxC,IAAIF,KAAK,CAACpB,KAAK,CAAC,IAAI,CAACC,QAAQ,CAACD,KAAK,CAAC,EAAE;IACpC,OAAOkC,MAAM,CAAClC,KAAK,CAAC;EACtB;EAEA,IAAIgE,UAAU,GAAGhC,WAAW,CAAChC,KAAK,CAAC;EACnC,IAAIiD,OAAO,GAAG,OAAO3B,SAAS,KAAK,QAAQ,GAAG4B,WAAW,CAACc,UAAU,EAAEA,UAAU,CAAC3B,QAAQ,GAAG,CAAC,GAAGf,SAAS,CAAC,GAAG0C,UAAU;EACvH,IAAIb,CAAC,GAAGF,OAAO,CAACP,YAAY;EAC5B,IAAIuB,CAAC,GAAGhB,OAAO,CAACZ,QAAQ,GAAG,CAAC,CAAC,CAAC;EAC9B;;EAEA,IAAI6B,EAAE,GAAGD,CAAC,IAAI3C,SAAS,IAAI,CAAC,CAAC;EAE7B,IAAI6B,CAAC,CAACV,MAAM,GAAGyB,EAAE,EAAE;IACjBf,CAAC,GAAGA,CAAC,CAACgB,MAAM,CAACxB,KAAK,CAACuB,EAAE,GAAGf,CAAC,CAACV,MAAM,CAAC,CAAC;EACpC,CAAC,CAAC;;EAGF,IAAIwB,CAAC,GAAG,CAAC,EAAE;IACTd,CAAC,GAAGR,KAAK,CAAC,CAACsB,CAAC,GAAG,CAAC,CAAC,CAACE,MAAM,CAAChB,CAAC,CAAC;IAC3Bc,CAAC,GAAG,CAAC;EACP,CAAC,CAAC;;EAGF,IAAIA,CAAC,GAAGd,CAAC,CAACV,MAAM,EAAE;IAChBU,CAAC,CAACiB,MAAM,CAACH,CAAC,EAAE,CAAC,EAAEA,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC;EACtC;EAEA,OAAOhB,OAAO,CAAC7C,IAAI,GAAG+C,CAAC,CAACS,IAAI,CAAC,EAAE,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASpC,aAAa,CAACxB,KAAK,EAAEsB,SAAS,EAAE;EAC9C,IAAIF,KAAK,CAACpB,KAAK,CAAC,IAAI,CAACC,QAAQ,CAACD,KAAK,CAAC,EAAE;IACpC,OAAOkC,MAAM,CAAClC,KAAK,CAAC;EACtB,CAAC,CAAC;;EAGF,IAAI4C,KAAK,GAAGZ,WAAW,CAAChC,KAAK,CAAC;EAC9B,IAAIiD,OAAO,GAAG3B,SAAS,GAAG4B,WAAW,CAACN,KAAK,EAAEtB,SAAS,CAAC,GAAGsB,KAAK;EAC/D,IAAIO,CAAC,GAAGF,OAAO,CAACP,YAAY;EAC5B,IAAIZ,CAAC,GAAGmB,OAAO,CAACZ,QAAQ,CAAC,CAAC;;EAE1B,IAAIc,CAAC,CAACV,MAAM,GAAGnB,SAAS,EAAE;IACxB6B,CAAC,GAAGA,CAAC,CAACgB,MAAM,CAACxB,KAAK,CAACrB,SAAS,GAAG6B,CAAC,CAACV,MAAM,CAAC,CAAC;EAC3C,CAAC,CAAC;;EAGF,IAAI4B,KAAK,GAAGlB,CAAC,CAACmB,KAAK,EAAE;EACrB,OAAOrB,OAAO,CAAC7C,IAAI,GAAGiE,KAAK,IAAIlB,CAAC,CAACV,MAAM,GAAG,CAAC,GAAG,GAAG,GAAGU,CAAC,CAACS,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,IAAI9B,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,GAAGA,CAAC;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASJ,WAAW,CAAC1B,KAAK,EAAEsB,SAAS,EAAEJ,OAAO,EAAE;EACrD,IAAIE,KAAK,CAACpB,KAAK,CAAC,IAAI,CAACC,QAAQ,CAACD,KAAK,CAAC,EAAE;IACpC,OAAOkC,MAAM,CAAClC,KAAK,CAAC;EACtB,CAAC,CAAC;;EAGF,IAAIuE,QAAQ,GAAGrD,OAAO,IAAIA,OAAO,CAACqD,QAAQ,KAAKC,SAAS,GAAGtD,OAAO,CAACqD,QAAQ,GAAG,CAAC,CAAC;EAChF,IAAIE,QAAQ,GAAGvD,OAAO,IAAIA,OAAO,CAACuD,QAAQ,KAAKD,SAAS,GAAGtD,OAAO,CAACuD,QAAQ,GAAG,CAAC;EAC/E,IAAI7B,KAAK,GAAGZ,WAAW,CAAChC,KAAK,CAAC;EAC9B,IAAIiD,OAAO,GAAG3B,SAAS,GAAG4B,WAAW,CAACN,KAAK,EAAEtB,SAAS,CAAC,GAAGsB,KAAK;EAE/D,IAAIK,OAAO,CAACZ,QAAQ,GAAGkC,QAAQ,IAAItB,OAAO,CAACZ,QAAQ,IAAIoC,QAAQ,EAAE;IAC/D;IACA,OAAOjD,aAAa,CAACxB,KAAK,EAAEsB,SAAS,CAAC;EACxC,CAAC,MAAM;IACL,IAAI6B,CAAC,GAAGF,OAAO,CAACP,YAAY;IAC5B,IAAIZ,CAAC,GAAGmB,OAAO,CAACZ,QAAQ,CAAC,CAAC;;IAE1B,IAAIc,CAAC,CAACV,MAAM,GAAGnB,SAAS,EAAE;MACxB6B,CAAC,GAAGA,CAAC,CAACgB,MAAM,CAACxB,KAAK,CAACrB,SAAS,GAAG6B,CAAC,CAACV,MAAM,CAAC,CAAC;IAC3C,CAAC,CAAC;IACF;;IAGAU,CAAC,GAAGA,CAAC,CAACgB,MAAM,CAACxB,KAAK,CAACb,CAAC,GAAGqB,CAAC,CAACV,MAAM,GAAG,CAAC,IAAIU,CAAC,CAACV,MAAM,GAAGnB,SAAS,GAAGA,SAAS,GAAG6B,CAAC,CAACV,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;IAE3FU,CAAC,GAAGR,KAAK,CAAC,CAACb,CAAC,CAAC,CAACqC,MAAM,CAAChB,CAAC,CAAC;IACvB,IAAIZ,GAAG,GAAGT,CAAC,GAAG,CAAC,GAAGA,CAAC,GAAG,CAAC;IAEvB,IAAIS,GAAG,GAAGY,CAAC,CAACV,MAAM,GAAG,CAAC,EAAE;MACtBU,CAAC,CAACiB,MAAM,CAAC7B,GAAG,GAAG,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC;IAC3B;IAEA,OAAOU,OAAO,CAAC7C,IAAI,GAAG+C,CAAC,CAACS,IAAI,CAAC,EAAE,CAAC;EAClC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASV,WAAW,CAACN,KAAK,EAAEtB,SAAS,EAAE;EAC5C;EACA,IAAI2B,OAAO,GAAG;IACZ7C,IAAI,EAAEwC,KAAK,CAACxC,IAAI;IAChBsC,YAAY,EAAEE,KAAK,CAACF,YAAY;IAChCL,QAAQ,EAAEO,KAAK,CAACP;EAClB,CAAC;EACD,IAAIc,CAAC,GAAGF,OAAO,CAACP,YAAY,CAAC,CAAC;;EAE9B,OAAOpB,SAAS,IAAI,CAAC,EAAE;IACrB6B,CAAC,CAACuB,OAAO,CAAC,CAAC,CAAC;IACZzB,OAAO,CAACZ,QAAQ,EAAE;IAClBf,SAAS,EAAE;EACb;EAEA,IAAI6B,CAAC,CAACV,MAAM,GAAGnB,SAAS,EAAE;IACxB,IAAIqD,OAAO,GAAGxB,CAAC,CAACiB,MAAM,CAAC9C,SAAS,EAAE6B,CAAC,CAACV,MAAM,GAAGnB,SAAS,CAAC;IAEvD,IAAIqD,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;MACnB,IAAIpB,CAAC,GAAGjC,SAAS,GAAG,CAAC;MACrB6B,CAAC,CAACI,CAAC,CAAC,EAAE;MAEN,OAAOJ,CAAC,CAACI,CAAC,CAAC,KAAK,EAAE,EAAE;QAClBJ,CAAC,CAACyB,GAAG,EAAE;QAEP,IAAIrB,CAAC,KAAK,CAAC,EAAE;UACXJ,CAAC,CAACuB,OAAO,CAAC,CAAC,CAAC;UACZzB,OAAO,CAACZ,QAAQ,EAAE;UAClBkB,CAAC,EAAE;QACL;QAEAA,CAAC,EAAE;QACHJ,CAAC,CAACI,CAAC,CAAC,EAAE;MACR;IACF;EACF;EAEA,OAAON,OAAO;AAChB;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASN,KAAK,CAACF,MAAM,EAAE;EACrB,IAAIoC,GAAG,GAAG,EAAE;EAEZ,KAAK,IAAItB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,MAAM,EAAEc,CAAC,EAAE,EAAE;IAC/BsB,GAAG,CAAC7B,IAAI,CAAC,CAAC,CAAC;EACb;EAEA,OAAO6B,GAAG;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,SAASjD,MAAM,CAAC5B,KAAK,EAAE;EAC5B,OAAOA,KAAK,CAACwB,aAAa,EAAE,CAACG,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;EAAA,CAChDA,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;EAAA,CAC1Bc,MAAM;AACT;AACA;AACA;AACA;;AAEA,OAAO,IAAIqC,WAAW,GAAGC,MAAM,CAACC,OAAO,IAAI,qCAAqC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,WAAW,CAAC5E,CAAC,EAAE6E,CAAC,EAAEC,OAAO,EAAE;EACzC;EACA,IAAIA,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAKX,SAAS,EAAE;IAC7C,OAAOnE,CAAC,KAAK6E,CAAC;EAChB;EAEA,IAAI7E,CAAC,KAAK6E,CAAC,EAAE;IACX,OAAO,IAAI;EACb,CAAC,CAAC;;EAGF,IAAI9D,KAAK,CAACf,CAAC,CAAC,IAAIe,KAAK,CAAC8D,CAAC,CAAC,EAAE;IACxB,OAAO,KAAK;EACd,CAAC,CAAC;;EAGF,IAAIjF,QAAQ,CAACI,CAAC,CAAC,IAAIJ,QAAQ,CAACiF,CAAC,CAAC,EAAE;IAC9B;IACA,IAAIE,IAAI,GAAGlF,IAAI,CAACoD,GAAG,CAACjD,CAAC,GAAG6E,CAAC,CAAC;IAE1B,IAAIE,IAAI,GAAGN,WAAW,EAAE;MACtB,OAAO,IAAI;IACb,CAAC,MAAM;MACL;MACA,OAAOM,IAAI,IAAIlF,IAAI,CAACmF,GAAG,CAACnF,IAAI,CAACoD,GAAG,CAACjD,CAAC,CAAC,EAAEH,IAAI,CAACoD,GAAG,CAAC4B,CAAC,CAAC,CAAC,GAAGC,OAAO;IAC7D;EACF,CAAC,CAAC;;EAGF,OAAO,KAAK;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIG,KAAK,GAAGpF,IAAI,CAACoF,KAAK,IAAI,UAAUjF,CAAC,EAAE;EAC5C,OAAOH,IAAI,CAACK,GAAG,CAACL,IAAI,CAACqF,IAAI,CAAClF,CAAC,GAAGA,CAAC,GAAG,CAAC,CAAC,GAAGA,CAAC,CAAC;AAC3C,CAAC;AACD,OAAO,IAAImF,KAAK,GAAGtF,IAAI,CAACsF,KAAK,IAAI,UAAUnF,CAAC,EAAE;EAC5C,OAAOH,IAAI,CAACK,GAAG,CAACL,IAAI,CAACqF,IAAI,CAAClF,CAAC,GAAGA,CAAC,GAAG,CAAC,CAAC,GAAGA,CAAC,CAAC;AAC3C,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIoF,KAAK,GAAGvF,IAAI,CAACuF,KAAK,IAAI,UAAUpF,CAAC,EAAE;EAC5C,OAAOH,IAAI,CAACK,GAAG,CAAC,CAAC,CAAC,GAAGF,CAAC,KAAK,CAAC,GAAGA,CAAC,CAAC,CAAC,GAAG,CAAC;AACxC,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIqF,IAAI,GAAGxF,IAAI,CAACwF,IAAI,IAAI,UAAUrF,CAAC,EAAE;EAC1C,OAAO,CAACH,IAAI,CAACa,GAAG,CAACV,CAAC,CAAC,GAAGH,IAAI,CAACa,GAAG,CAAC,CAACV,CAAC,CAAC,IAAI,CAAC;AACzC,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIsF,IAAI,GAAGzF,IAAI,CAACyF,IAAI,IAAI,UAAUtF,CAAC,EAAE;EAC1C,OAAO,CAACH,IAAI,CAACa,GAAG,CAACV,CAAC,CAAC,GAAGH,IAAI,CAACa,GAAG,CAAC,CAACV,CAAC,CAAC,IAAI,CAAC;AACzC,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIuF,IAAI,GAAG1F,IAAI,CAAC0F,IAAI,IAAI,UAAUvF,CAAC,EAAE;EAC1C,IAAIyB,CAAC,GAAG5B,IAAI,CAACa,GAAG,CAAC,CAAC,GAAGV,CAAC,CAAC;EACvB,OAAO,CAACyB,CAAC,GAAG,CAAC,KAAKA,CAAC,GAAG,CAAC,CAAC;AAC1B,CAAC"},"metadata":{},"sourceType":"module"}