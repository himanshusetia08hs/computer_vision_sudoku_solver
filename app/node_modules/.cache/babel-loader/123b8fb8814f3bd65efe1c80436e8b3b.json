{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class RotateProgram {\n  constructor(imageShape, radians, fillValue, center) {\n    this.variableNames = ['Image'];\n    this.outputShape = [];\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    const sinFactor = Math.sin(radians).toFixed(3);\n    const cosFactor = Math.cos(radians).toFixed(3);\n    this.outputShape = imageShape;\n    const [centerX, centerY] = backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const centerXString = centerX.toFixed(3);\n    const centerYString = centerY.toFixed(3);\n    let fillSnippet = '';\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${centerXString}) * ${cosFactor} - (float(y) - ${centerYString}) * ${sinFactor};\n          float coordYFloat = (float(x) - ${centerXString}) * ${sinFactor} + (float(y) - ${centerYString}) * ${cosFactor};\n          int coordX = int(round(coordXFloat + ${centerXString}));\n          int coordY = int(round(coordYFloat + ${centerYString}));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}","map":{"version":3,"sources":["../src/rotate_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAY,QAAO,uBAAuB;AAIlD,OAAM,MAAO,aAAa,CAAA;EAKxB,WAAA,CACI,UAA4C,EAAE,OAAe,EAC7D,SAA0C,EAC1C,MAA+B,EAAA;IAPnC,IAAA,CAAA,aAAa,GAAG,CAAC,OAAO,CAAC;IACzB,IAAA,CAAA,WAAW,GAAa,EAAE;IAOxB,MAAM,WAAW,GAAG,UAAU,CAAC,CAAC,CAAC;IACjC,MAAM,UAAU,GAAG,UAAU,CAAC,CAAC,CAAC;IAChC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IAC9C,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IAC9C,IAAI,CAAC,WAAW,GAAG,UAAU;IAE7B,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,GACpB,YAAY,CAAC,cAAc,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,CAAC;IAChE,MAAM,aAAa,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;IACxC,MAAM,aAAa,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;IAExC,IAAI,WAAW,GAAG,EAAE;IACpB,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;MACjC,WAAW,GAAG,uBAAuB,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG;KAC7D,MAAM;MACL,WAAW,GAAG;2BACO,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC;6CACD;IACxC;IAED,IAAI,CAAC,QAAQ,GAAG;;;;;4CAKwB,aAAa,OACjD,SAAS,kBAAkB,aAAa,OAAO,SAAS;4CACpB,aAAa,OACjD,SAAS,kBAAkB,aAAa,OAAO,SAAS;iDACf,aAAa;iDACb,aAAa;YAClD,WAAW;uCACgB,UAAU,+BACzC,WAAW;;;;;KAKd;EACH;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class RotateProgram {\n    constructor(imageShape, radians, fillValue, center) {\n        this.variableNames = ['Image'];\n        this.outputShape = [];\n        const imageHeight = imageShape[1];\n        const imageWidth = imageShape[2];\n        const sinFactor = Math.sin(radians).toFixed(3);\n        const cosFactor = Math.cos(radians).toFixed(3);\n        this.outputShape = imageShape;\n        const [centerX, centerY] = backend_util.getImageCenter(center, imageHeight, imageWidth);\n        const centerXString = centerX.toFixed(3);\n        const centerYString = centerY.toFixed(3);\n        let fillSnippet = '';\n        if (typeof fillValue === 'number') {\n            fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n        }\n        else {\n            fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n        }\n        this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${centerXString}) * ${cosFactor} - (float(y) - ${centerYString}) * ${sinFactor};\n          float coordYFloat = (float(x) - ${centerXString}) * ${sinFactor} + (float(y) - ${centerYString}) * ${cosFactor};\n          int coordX = int(round(coordXFloat + ${centerXString}));\n          int coordY = int(round(coordYFloat + ${centerYString}));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n    }\n}\n//# sourceMappingURL=rotate_gpu.js.map"]},"metadata":{},"sourceType":"module"}