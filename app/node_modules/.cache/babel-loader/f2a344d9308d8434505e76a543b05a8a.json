{"ast":null,"code":"// create a random seed here to prevent an infinite loop from seed-random\n// inside the factory. Reason is that math.random is defined as a getter/setter\n// and seed-random generates a seed from the local entropy by reading every\n// defined object including `math` itself. That means that whilst getting\n// math.random, it tries to get math.random, etc... an infinite loop.\n// See https://github.com/ForbesLindesay/seed-random/issues/6\nimport seedrandom from 'seed-random';\nvar singletonRandom = /* #__PURE__ */seedrandom();\nexport function createRng(randomSeed) {\n  var random; // create a new random generator with given seed\n\n  function setSeed(seed) {\n    random = seed === null ? singletonRandom : seedrandom(String(seed));\n  } // initialize a seeded pseudo random number generator with config's random seed\n\n  setSeed(randomSeed); // wrapper function so the rng can be updated via generator\n\n  function rng() {\n    return random();\n  }\n  return rng;\n}","map":{"version":3,"names":["seedrandom","singletonRandom","createRng","randomSeed","random","setSeed","seed","String","rng"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/P/temp/app/node_modules/mathjs/es/function/probability/util/seededRNG.js"],"sourcesContent":["// create a random seed here to prevent an infinite loop from seed-random\n// inside the factory. Reason is that math.random is defined as a getter/setter\n// and seed-random generates a seed from the local entropy by reading every\n// defined object including `math` itself. That means that whilst getting\n// math.random, it tries to get math.random, etc... an infinite loop.\n// See https://github.com/ForbesLindesay/seed-random/issues/6\nimport seedrandom from 'seed-random';\nvar singletonRandom = /* #__PURE__ */seedrandom();\nexport function createRng(randomSeed) {\n  var random; // create a new random generator with given seed\n\n  function setSeed(seed) {\n    random = seed === null ? singletonRandom : seedrandom(String(seed));\n  } // initialize a seeded pseudo random number generator with config's random seed\n\n\n  setSeed(randomSeed); // wrapper function so the rng can be updated via generator\n\n  function rng() {\n    return random();\n  }\n\n  return rng;\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,UAAU,MAAM,aAAa;AACpC,IAAIC,eAAe,GAAG,eAAeD,UAAU,EAAE;AACjD,OAAO,SAASE,SAAS,CAACC,UAAU,EAAE;EACpC,IAAIC,MAAM,CAAC,CAAC;;EAEZ,SAASC,OAAO,CAACC,IAAI,EAAE;IACrBF,MAAM,GAAGE,IAAI,KAAK,IAAI,GAAGL,eAAe,GAAGD,UAAU,CAACO,MAAM,CAACD,IAAI,CAAC,CAAC;EACrE,CAAC,CAAC;;EAGFD,OAAO,CAACF,UAAU,CAAC,CAAC,CAAC;;EAErB,SAASK,GAAG,GAAG;IACb,OAAOJ,MAAM,EAAE;EACjB;EAEA,OAAOI,GAAG;AACZ"},"metadata":{},"sourceType":"module"}