{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue, getTensor } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'Abs':\n    case 'ComplexAbs':\n      return [tfOps.abs(getParamValue('x', node, tensorMap, context))];\n    case 'Acos':\n      return [tfOps.acos(getParamValue('x', node, tensorMap, context))];\n    case 'Acosh':\n      return [tfOps.acosh(getParamValue('x', node, tensorMap, context))];\n    case 'Asin':\n      return [tfOps.asin(getParamValue('x', node, tensorMap, context))];\n    case 'Asinh':\n      return [tfOps.asinh(getParamValue('x', node, tensorMap, context))];\n    case 'Atan':\n      return [tfOps.atan(getParamValue('x', node, tensorMap, context))];\n    case 'Atan2':\n      return [tfOps.atan2(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context))];\n    case 'Atanh':\n      return [tfOps.atanh(getParamValue('x', node, tensorMap, context))];\n    case 'Ceil':\n      return [tfOps.ceil(getParamValue('x', node, tensorMap, context))];\n    case 'Complex':\n      return [tfOps.complex(getParamValue('real', node, tensorMap, context), getParamValue('imag', node, tensorMap, context))];\n    case 'Cos':\n      return [tfOps.cos(getParamValue('x', node, tensorMap, context))];\n    case 'Cosh':\n      return [tfOps.cosh(getParamValue('x', node, tensorMap, context))];\n    case 'Elu':\n      return [tfOps.elu(getParamValue('x', node, tensorMap, context))];\n    case 'Erf':\n      return [tfOps.erf(getParamValue('x', node, tensorMap, context))];\n    case 'Exp':\n      return [tfOps.exp(getParamValue('x', node, tensorMap, context))];\n    case 'Expm1':\n      {\n        return [tfOps.expm1(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Floor':\n      return [tfOps.floor(getParamValue('x', node, tensorMap, context))];\n    case 'Log':\n      return [tfOps.log(getParamValue('x', node, tensorMap, context))];\n    case 'Log1p':\n      {\n        return [tfOps.log1p(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Imag':\n      return [tfOps.imag(getParamValue('x', node, tensorMap, context))];\n    case 'Neg':\n      return [tfOps.neg(getParamValue('x', node, tensorMap, context))];\n    case 'Reciprocal':\n      {\n        return [tfOps.reciprocal(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Real':\n      return [tfOps.real(getParamValue('x', node, tensorMap, context))];\n    case 'Relu':\n      return [tfOps.relu(getParamValue('x', node, tensorMap, context))];\n    case 'Round':\n      {\n        return [tfOps.round(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Selu':\n      return [tfOps.selu(getParamValue('x', node, tensorMap, context))];\n    case 'Sigmoid':\n      return [tfOps.sigmoid(getParamValue('x', node, tensorMap, context))];\n    case 'Sin':\n      return [tfOps.sin(getParamValue('x', node, tensorMap, context))];\n    case 'Sign':\n      {\n        return [tfOps.sign(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Sinh':\n      {\n        return [tfOps.sinh(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Softplus':\n      {\n        return [tfOps.softplus(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Sqrt':\n      {\n        return [tfOps.sqrt(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Square':\n      {\n        return [tfOps.square(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Tanh':\n      {\n        return [tfOps.tanh(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Tan':\n      return [tfOps.tan(getParamValue('x', node, tensorMap, context))];\n    case 'ClipByValue':\n      return [tfOps.clipByValue(getParamValue('x', node, tensorMap, context), getParamValue('clipValueMin', node, tensorMap, context), getParamValue('clipValueMax', node, tensorMap, context))];\n    case 'Relu6':\n      return [tfOps.relu6(getParamValue('x', node, tensorMap, context))];\n    case 'Rsqrt':\n      return [tfOps.rsqrt(getTensor(node.inputNames[0], tensorMap, context))];\n    case 'Prod':\n      return [tfOps.prod(getParamValue('x', node, tensorMap, context), getParamValue('axes', node, tensorMap, context))];\n    case 'LeakyRelu':\n      return [tfOps.leakyRelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];\n    case 'Prelu':\n      return [tfOps.prelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'basic_math';","map":{"version":3,"sources":["../../../src/operations/executors/basic_math_executor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue, getTensor } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'Abs':\n        case 'ComplexAbs':\n            return [tfOps.abs(getParamValue('x', node, tensorMap, context))];\n        case 'Acos':\n            return [tfOps.acos(getParamValue('x', node, tensorMap, context))];\n        case 'Acosh':\n            return [tfOps.acosh(getParamValue('x', node, tensorMap, context))];\n        case 'Asin':\n            return [tfOps.asin(getParamValue('x', node, tensorMap, context))];\n        case 'Asinh':\n            return [tfOps.asinh(getParamValue('x', node, tensorMap, context))];\n        case 'Atan':\n            return [tfOps.atan(getParamValue('x', node, tensorMap, context))];\n        case 'Atan2':\n            return [tfOps.atan2(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context))];\n        case 'Atanh':\n            return [tfOps.atanh(getParamValue('x', node, tensorMap, context))];\n        case 'Ceil':\n            return [tfOps.ceil(getParamValue('x', node, tensorMap, context))];\n        case 'Complex':\n            return [tfOps.complex(getParamValue('real', node, tensorMap, context), getParamValue('imag', node, tensorMap, context))];\n        case 'Cos':\n            return [tfOps.cos(getParamValue('x', node, tensorMap, context))];\n        case 'Cosh':\n            return [tfOps.cosh(getParamValue('x', node, tensorMap, context))];\n        case 'Elu':\n            return [tfOps.elu(getParamValue('x', node, tensorMap, context))];\n        case 'Erf':\n            return [tfOps.erf(getParamValue('x', node, tensorMap, context))];\n        case 'Exp':\n            return [tfOps.exp(getParamValue('x', node, tensorMap, context))];\n        case 'Expm1': {\n            return [tfOps.expm1(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Floor':\n            return [tfOps.floor(getParamValue('x', node, tensorMap, context))];\n        case 'Log':\n            return [tfOps.log(getParamValue('x', node, tensorMap, context))];\n        case 'Log1p': {\n            return [tfOps.log1p(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Imag':\n            return [tfOps.imag(getParamValue('x', node, tensorMap, context))];\n        case 'Neg':\n            return [tfOps.neg(getParamValue('x', node, tensorMap, context))];\n        case 'Reciprocal': {\n            return [tfOps.reciprocal(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Real':\n            return [tfOps.real(getParamValue('x', node, tensorMap, context))];\n        case 'Relu':\n            return [tfOps.relu(getParamValue('x', node, tensorMap, context))];\n        case 'Round': {\n            return [tfOps.round(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Selu':\n            return [tfOps.selu(getParamValue('x', node, tensorMap, context))];\n        case 'Sigmoid':\n            return [tfOps.sigmoid(getParamValue('x', node, tensorMap, context))];\n        case 'Sin':\n            return [tfOps.sin(getParamValue('x', node, tensorMap, context))];\n        case 'Sign': {\n            return [tfOps.sign(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Sinh': {\n            return [tfOps.sinh(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Softplus': {\n            return [tfOps.softplus(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Sqrt': {\n            return [tfOps.sqrt(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Square': {\n            return [tfOps.square(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Tanh': {\n            return [tfOps.tanh(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Tan':\n            return [tfOps.tan(getParamValue('x', node, tensorMap, context))];\n        case 'ClipByValue':\n            return [tfOps.clipByValue(getParamValue('x', node, tensorMap, context), getParamValue('clipValueMin', node, tensorMap, context), getParamValue('clipValueMax', node, tensorMap, context))];\n        case 'Relu6':\n            return [tfOps.relu6(getParamValue('x', node, tensorMap, context))];\n        case 'Rsqrt':\n            return [tfOps.rsqrt(getTensor(node.inputNames[0], tensorMap, context))];\n        case 'Prod':\n            return [tfOps.prod(getParamValue('x', node, tensorMap, context), getParamValue('axes', node, tensorMap, context))];\n        case 'LeakyRelu':\n            return [tfOps.leakyRelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];\n        case 'Prelu':\n            return [tfOps.prelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'basic_math';\n//# sourceMappingURL=basic_math_executor.js.map"]},"metadata":{},"sourceType":"module"}