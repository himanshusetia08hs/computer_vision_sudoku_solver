{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { eye, linalg, mul, ones, randomUniform, scalar, serialization, tidy, truncatedNormal, zeros } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { checkDataFormat } from './common';\nimport { NotImplementedError, ValueError } from './errors';\nimport { VALID_DISTRIBUTION_VALUES, VALID_FAN_MODE_VALUES } from './keras_format/initializer_config';\nimport { checkStringTypeUnionValue, deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\nimport { arrayProd } from './utils/math_utils';\nexport function checkFanMode(value) {\n  checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, 'FanMode', value);\n}\nexport function checkDistribution(value) {\n  checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, 'Distribution', value);\n}\n/**\n * Initializer base class.\n *\n * @doc {\n *   heading: 'Initializers', subheading: 'Classes', namespace: 'initializers'}\n */\nexport class Initializer extends serialization.Serializable {\n  fromConfigUsesCustomObjects() {\n    return false;\n  }\n  getConfig() {\n    return {};\n  }\n}\nexport class Zeros extends Initializer {\n  apply(shape, dtype) {\n    return zeros(shape, dtype);\n  }\n}\n/** @nocollapse */\nZeros.className = 'Zeros';\nserialization.registerClass(Zeros);\nexport class Ones extends Initializer {\n  apply(shape, dtype) {\n    return ones(shape, dtype);\n  }\n}\n/** @nocollapse */\nOnes.className = 'Ones';\nserialization.registerClass(Ones);\nexport class Constant extends Initializer {\n  constructor(args) {\n    super();\n    if (typeof args !== 'object') {\n      throw new ValueError(`Expected argument of type ConstantConfig but got ${args}`);\n    }\n    if (args.value === undefined) {\n      throw new ValueError(`config must have value set but got ${args}`);\n    }\n    this.value = args.value;\n  }\n  apply(shape, dtype) {\n    return tidy(() => mul(scalar(this.value), ones(shape, dtype)));\n  }\n  getConfig() {\n    return {\n      value: this.value\n    };\n  }\n}\n/** @nocollapse */\nConstant.className = 'Constant';\nserialization.registerClass(Constant);\nexport class RandomUniform extends Initializer {\n  constructor(args) {\n    super();\n    this.DEFAULT_MINVAL = -0.05;\n    this.DEFAULT_MAXVAL = 0.05;\n    this.minval = args.minval || this.DEFAULT_MINVAL;\n    this.maxval = args.maxval || this.DEFAULT_MAXVAL;\n    this.seed = args.seed;\n  }\n  apply(shape, dtype) {\n    return randomUniform(shape, this.minval, this.maxval, dtype);\n  }\n  getConfig() {\n    return {\n      minval: this.minval,\n      maxval: this.maxval,\n      seed: this.seed\n    };\n  }\n}\n/** @nocollapse */\nRandomUniform.className = 'RandomUniform';\nserialization.registerClass(RandomUniform);\nexport class RandomNormal extends Initializer {\n  constructor(args) {\n    super();\n    this.DEFAULT_MEAN = 0.;\n    this.DEFAULT_STDDEV = 0.05;\n    this.mean = args.mean || this.DEFAULT_MEAN;\n    this.stddev = args.stddev || this.DEFAULT_STDDEV;\n    this.seed = args.seed;\n  }\n  apply(shape, dtype) {\n    dtype = dtype || 'float32';\n    if (dtype !== 'float32' && dtype !== 'int32') {\n      throw new NotImplementedError(`randomNormal does not support dType ${dtype}.`);\n    }\n    return K.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);\n  }\n  getConfig() {\n    return {\n      mean: this.mean,\n      stddev: this.stddev,\n      seed: this.seed\n    };\n  }\n}\n/** @nocollapse */\nRandomNormal.className = 'RandomNormal';\nserialization.registerClass(RandomNormal);\nexport class TruncatedNormal extends Initializer {\n  constructor(args) {\n    super();\n    this.DEFAULT_MEAN = 0.;\n    this.DEFAULT_STDDEV = 0.05;\n    this.mean = args.mean || this.DEFAULT_MEAN;\n    this.stddev = args.stddev || this.DEFAULT_STDDEV;\n    this.seed = args.seed;\n  }\n  apply(shape, dtype) {\n    dtype = dtype || 'float32';\n    if (dtype !== 'float32' && dtype !== 'int32') {\n      throw new NotImplementedError(`truncatedNormal does not support dType ${dtype}.`);\n    }\n    return truncatedNormal(shape, this.mean, this.stddev, dtype, this.seed);\n  }\n  getConfig() {\n    return {\n      mean: this.mean,\n      stddev: this.stddev,\n      seed: this.seed\n    };\n  }\n}\n/** @nocollapse */\nTruncatedNormal.className = 'TruncatedNormal';\nserialization.registerClass(TruncatedNormal);\nexport class Identity extends Initializer {\n  constructor(args) {\n    super();\n    this.gain = args.gain != null ? args.gain : 1.0;\n  }\n  apply(shape, dtype) {\n    return tidy(() => {\n      if (shape.length !== 2 || shape[0] !== shape[1]) {\n        throw new ValueError('Identity matrix initializer can only be used for' + ' 2D square matrices.');\n      } else {\n        return mul(this.gain, eye(shape[0]));\n      }\n    });\n  }\n  getConfig() {\n    return {\n      gain: this.gain\n    };\n  }\n}\n/** @nocollapse */\nIdentity.className = 'Identity';\nserialization.registerClass(Identity);\n/**\n * Computes the number of input and output units for a weight shape.\n * @param shape Shape of weight.\n * @param dataFormat data format to use for convolution kernels.\n *   Note that all kernels in Keras are standardized on the\n *   CHANNEL_LAST ordering (even when inputs are set to CHANNEL_FIRST).\n * @return An length-2 array: fanIn, fanOut.\n */\nfunction computeFans(shape) {\n  let dataFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'channelsLast';\n  let fanIn;\n  let fanOut;\n  checkDataFormat(dataFormat);\n  if (shape.length === 2) {\n    fanIn = shape[0];\n    fanOut = shape[1];\n  } else if ([3, 4, 5].indexOf(shape.length) !== -1) {\n    if (dataFormat === 'channelsFirst') {\n      const receptiveFieldSize = arrayProd(shape, 2);\n      fanIn = shape[1] * receptiveFieldSize;\n      fanOut = shape[0] * receptiveFieldSize;\n    } else if (dataFormat === 'channelsLast') {\n      const receptiveFieldSize = arrayProd(shape, 0, shape.length - 2);\n      fanIn = shape[shape.length - 2] * receptiveFieldSize;\n      fanOut = shape[shape.length - 1] * receptiveFieldSize;\n    }\n  } else {\n    const shapeProd = arrayProd(shape);\n    fanIn = Math.sqrt(shapeProd);\n    fanOut = Math.sqrt(shapeProd);\n  }\n  return [fanIn, fanOut];\n}\nexport class VarianceScaling extends Initializer {\n  /**\n   * Constructor of VarianceScaling.\n   * @throws ValueError for invalid value in scale.\n   */\n  constructor(args) {\n    super();\n    if (args.scale < 0.0) {\n      throw new ValueError(`scale must be a positive float. Got: ${args.scale}`);\n    }\n    this.scale = args.scale == null ? 1.0 : args.scale;\n    this.mode = args.mode == null ? 'fanIn' : args.mode;\n    checkFanMode(this.mode);\n    this.distribution = args.distribution == null ? 'normal' : args.distribution;\n    checkDistribution(this.distribution);\n    this.seed = args.seed;\n  }\n  apply(shape, dtype) {\n    const fans = computeFans(shape);\n    const fanIn = fans[0];\n    const fanOut = fans[1];\n    let scale = this.scale;\n    if (this.mode === 'fanIn') {\n      scale /= Math.max(1, fanIn);\n    } else if (this.mode === 'fanOut') {\n      scale /= Math.max(1, fanOut);\n    } else {\n      scale /= Math.max(1, (fanIn + fanOut) / 2);\n    }\n    if (this.distribution === 'normal') {\n      const stddev = Math.sqrt(scale);\n      dtype = dtype || 'float32';\n      if (dtype !== 'float32' && dtype !== 'int32') {\n        throw new NotImplementedError(`${this.getClassName()} does not support dType ${dtype}.`);\n      }\n      return truncatedNormal(shape, 0, stddev, dtype, this.seed);\n    } else {\n      const limit = Math.sqrt(3 * scale);\n      return randomUniform(shape, -limit, limit, dtype);\n    }\n  }\n  getConfig() {\n    return {\n      scale: this.scale,\n      mode: this.mode,\n      distribution: this.distribution,\n      seed: this.seed\n    };\n  }\n}\n/** @nocollapse */\nVarianceScaling.className = 'VarianceScaling';\nserialization.registerClass(VarianceScaling);\nexport class GlorotUniform extends VarianceScaling {\n  /**\n   * Constructor of GlorotUniform\n   * @param scale\n   * @param mode\n   * @param distribution\n   * @param seed\n   */\n  constructor(args) {\n    super({\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n  getClassName() {\n    // In Python Keras, GlorotUniform is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\n/** @nocollapse */\nGlorotUniform.className = 'GlorotUniform';\nserialization.registerClass(GlorotUniform);\nexport class GlorotNormal extends VarianceScaling {\n  /**\n   * Constructor of GlorotNormal.\n   * @param scale\n   * @param mode\n   * @param distribution\n   * @param seed\n   */\n  constructor(args) {\n    super({\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n  getClassName() {\n    // In Python Keras, GlorotNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\n/** @nocollapse */\nGlorotNormal.className = 'GlorotNormal';\nserialization.registerClass(GlorotNormal);\nexport class HeNormal extends VarianceScaling {\n  constructor(args) {\n    super({\n      scale: 2.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n  getClassName() {\n    // In Python Keras, HeNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\n/** @nocollapse */\nHeNormal.className = 'HeNormal';\nserialization.registerClass(HeNormal);\nexport class HeUniform extends VarianceScaling {\n  constructor(args) {\n    super({\n      scale: 2.0,\n      mode: 'fanIn',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n  getClassName() {\n    // In Python Keras, HeUniform is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\n/** @nocollapse */\nHeUniform.className = 'HeUniform';\nserialization.registerClass(HeUniform);\nexport class LeCunNormal extends VarianceScaling {\n  constructor(args) {\n    super({\n      scale: 1.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: args == null ? null : args.seed\n    });\n  }\n  getClassName() {\n    // In Python Keras, LeCunNormal is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\n/** @nocollapse */\nLeCunNormal.className = 'LeCunNormal';\nserialization.registerClass(LeCunNormal);\nexport class LeCunUniform extends VarianceScaling {\n  constructor(args) {\n    super({\n      scale: 1.0,\n      mode: 'fanIn',\n      distribution: 'uniform',\n      seed: args == null ? null : args.seed\n    });\n  }\n  getClassName() {\n    // In Python Keras, LeCunUniform is not a class, but a helper method\n    // that creates a VarianceScaling object. Use 'VarianceScaling' as\n    // class name to be compatible with that.\n    return VarianceScaling.className;\n  }\n}\n/** @nocollapse */\nLeCunUniform.className = 'LeCunNormal';\nserialization.registerClass(LeCunUniform);\nexport class Orthogonal extends Initializer {\n  constructor(args) {\n    super();\n    this.DEFAULT_GAIN = 1;\n    this.gain = args.gain == null ? this.DEFAULT_GAIN : args.gain;\n    this.seed = args.seed;\n    if (this.seed != null) {\n      throw new NotImplementedError('Random seed is not implemented for Orthogonal Initializer yet.');\n    }\n  }\n  apply(shape, dtype) {\n    return tidy(() => {\n      if (shape.length < 2) {\n        throw new NotImplementedError('Shape must be at least 2D.');\n      }\n      if (shape[0] * shape[1] > 2000) {\n        console.warn(`Orthogonal initializer is being called on a matrix with more ` + `than 2000 (${shape[0] * shape[1]}) elements: ` + `Slowness may result.`);\n      }\n      // TODO(cais): Add seed support.\n      const normalizedShape = shape[0] > shape[1] ? [shape[1], shape[0]] : shape;\n      const a = K.randomNormal(normalizedShape, 0, 1, 'float32');\n      let q = linalg.gramSchmidt(a);\n      if (shape[0] > shape[1]) {\n        q = q.transpose();\n      }\n      return mul(this.gain, q);\n    });\n  }\n  getConfig() {\n    return {\n      gain: this.gain,\n      seed: this.seed\n    };\n  }\n}\n/** @nocollapse */\nOrthogonal.className = 'Orthogonal';\nserialization.registerClass(Orthogonal);\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n  'constant': 'Constant',\n  'glorotNormal': 'GlorotNormal',\n  'glorotUniform': 'GlorotUniform',\n  'heNormal': 'HeNormal',\n  'heUniform': 'HeUniform',\n  'identity': 'Identity',\n  'leCunNormal': 'LeCunNormal',\n  'leCunUniform': 'LeCunUniform',\n  'ones': 'Ones',\n  'orthogonal': 'Orthogonal',\n  'randomNormal': 'RandomNormal',\n  'randomUniform': 'RandomUniform',\n  'truncatedNormal': 'TruncatedNormal',\n  'varianceScaling': 'VarianceScaling',\n  'zeros': 'Zeros'\n};\nfunction deserializeInitializer(config) {\n  let customObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'initializer');\n}\nexport function serializeInitializer(initializer) {\n  return serializeKerasObject(initializer);\n}\nexport function getInitializer(identifier) {\n  if (typeof identifier === 'string') {\n    const className = identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n    /* We have four 'helper' classes for common initializers that\n    all get serialized as 'VarianceScaling' and shouldn't go through\n    the deserializeInitializer pathway. */\n    if (className === 'GlorotNormal') {\n      return new GlorotNormal();\n    } else if (className === 'GlorotUniform') {\n      return new GlorotUniform();\n    } else if (className === 'HeNormal') {\n      return new HeNormal();\n    } else if (className === 'HeUniform') {\n      return new HeUniform();\n    } else if (className === 'LeCunNormal') {\n      return new LeCunNormal();\n    } else if (className === 'LeCunUniform') {\n      return new LeCunUniform();\n    } else {\n      const config = {};\n      config['className'] = className;\n      config['config'] = {};\n      return deserializeInitializer(config);\n    }\n  } else if (identifier instanceof Initializer) {\n    return identifier;\n  } else {\n    return deserializeInitializer(identifier);\n  }\n}","map":{"version":3,"sources":["../src/initializers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { eye, linalg, mul, ones, randomUniform, scalar, serialization, tidy, truncatedNormal, zeros } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { checkDataFormat } from './common';\nimport { NotImplementedError, ValueError } from './errors';\nimport { VALID_DISTRIBUTION_VALUES, VALID_FAN_MODE_VALUES } from './keras_format/initializer_config';\nimport { checkStringTypeUnionValue, deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\nimport { arrayProd } from './utils/math_utils';\nexport function checkFanMode(value) {\n    checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, 'FanMode', value);\n}\nexport function checkDistribution(value) {\n    checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, 'Distribution', value);\n}\n/**\n * Initializer base class.\n *\n * @doc {\n *   heading: 'Initializers', subheading: 'Classes', namespace: 'initializers'}\n */\nexport class Initializer extends serialization.Serializable {\n    fromConfigUsesCustomObjects() {\n        return false;\n    }\n    getConfig() {\n        return {};\n    }\n}\nexport class Zeros extends Initializer {\n    apply(shape, dtype) {\n        return zeros(shape, dtype);\n    }\n}\n/** @nocollapse */\nZeros.className = 'Zeros';\nserialization.registerClass(Zeros);\nexport class Ones extends Initializer {\n    apply(shape, dtype) {\n        return ones(shape, dtype);\n    }\n}\n/** @nocollapse */\nOnes.className = 'Ones';\nserialization.registerClass(Ones);\nexport class Constant extends Initializer {\n    constructor(args) {\n        super();\n        if (typeof args !== 'object') {\n            throw new ValueError(`Expected argument of type ConstantConfig but got ${args}`);\n        }\n        if (args.value === undefined) {\n            throw new ValueError(`config must have value set but got ${args}`);\n        }\n        this.value = args.value;\n    }\n    apply(shape, dtype) {\n        return tidy(() => mul(scalar(this.value), ones(shape, dtype)));\n    }\n    getConfig() {\n        return {\n            value: this.value,\n        };\n    }\n}\n/** @nocollapse */\nConstant.className = 'Constant';\nserialization.registerClass(Constant);\nexport class RandomUniform extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_MINVAL = -0.05;\n        this.DEFAULT_MAXVAL = 0.05;\n        this.minval = args.minval || this.DEFAULT_MINVAL;\n        this.maxval = args.maxval || this.DEFAULT_MAXVAL;\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        return randomUniform(shape, this.minval, this.maxval, dtype);\n    }\n    getConfig() {\n        return { minval: this.minval, maxval: this.maxval, seed: this.seed };\n    }\n}\n/** @nocollapse */\nRandomUniform.className = 'RandomUniform';\nserialization.registerClass(RandomUniform);\nexport class RandomNormal extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_MEAN = 0.;\n        this.DEFAULT_STDDEV = 0.05;\n        this.mean = args.mean || this.DEFAULT_MEAN;\n        this.stddev = args.stddev || this.DEFAULT_STDDEV;\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        dtype = dtype || 'float32';\n        if (dtype !== 'float32' && dtype !== 'int32') {\n            throw new NotImplementedError(`randomNormal does not support dType ${dtype}.`);\n        }\n        return K.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);\n    }\n    getConfig() {\n        return { mean: this.mean, stddev: this.stddev, seed: this.seed };\n    }\n}\n/** @nocollapse */\nRandomNormal.className = 'RandomNormal';\nserialization.registerClass(RandomNormal);\nexport class TruncatedNormal extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_MEAN = 0.;\n        this.DEFAULT_STDDEV = 0.05;\n        this.mean = args.mean || this.DEFAULT_MEAN;\n        this.stddev = args.stddev || this.DEFAULT_STDDEV;\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        dtype = dtype || 'float32';\n        if (dtype !== 'float32' && dtype !== 'int32') {\n            throw new NotImplementedError(`truncatedNormal does not support dType ${dtype}.`);\n        }\n        return truncatedNormal(shape, this.mean, this.stddev, dtype, this.seed);\n    }\n    getConfig() {\n        return { mean: this.mean, stddev: this.stddev, seed: this.seed };\n    }\n}\n/** @nocollapse */\nTruncatedNormal.className = 'TruncatedNormal';\nserialization.registerClass(TruncatedNormal);\nexport class Identity extends Initializer {\n    constructor(args) {\n        super();\n        this.gain = args.gain != null ? args.gain : 1.0;\n    }\n    apply(shape, dtype) {\n        return tidy(() => {\n            if (shape.length !== 2 || shape[0] !== shape[1]) {\n                throw new ValueError('Identity matrix initializer can only be used for' +\n                    ' 2D square matrices.');\n            }\n            else {\n                return mul(this.gain, eye(shape[0]));\n            }\n        });\n    }\n    getConfig() {\n        return { gain: this.gain };\n    }\n}\n/** @nocollapse */\nIdentity.className = 'Identity';\nserialization.registerClass(Identity);\n/**\n * Computes the number of input and output units for a weight shape.\n * @param shape Shape of weight.\n * @param dataFormat data format to use for convolution kernels.\n *   Note that all kernels in Keras are standardized on the\n *   CHANNEL_LAST ordering (even when inputs are set to CHANNEL_FIRST).\n * @return An length-2 array: fanIn, fanOut.\n */\nfunction computeFans(shape, dataFormat = 'channelsLast') {\n    let fanIn;\n    let fanOut;\n    checkDataFormat(dataFormat);\n    if (shape.length === 2) {\n        fanIn = shape[0];\n        fanOut = shape[1];\n    }\n    else if ([3, 4, 5].indexOf(shape.length) !== -1) {\n        if (dataFormat === 'channelsFirst') {\n            const receptiveFieldSize = arrayProd(shape, 2);\n            fanIn = shape[1] * receptiveFieldSize;\n            fanOut = shape[0] * receptiveFieldSize;\n        }\n        else if (dataFormat === 'channelsLast') {\n            const receptiveFieldSize = arrayProd(shape, 0, shape.length - 2);\n            fanIn = shape[shape.length - 2] * receptiveFieldSize;\n            fanOut = shape[shape.length - 1] * receptiveFieldSize;\n        }\n    }\n    else {\n        const shapeProd = arrayProd(shape);\n        fanIn = Math.sqrt(shapeProd);\n        fanOut = Math.sqrt(shapeProd);\n    }\n    return [fanIn, fanOut];\n}\nexport class VarianceScaling extends Initializer {\n    /**\n     * Constructor of VarianceScaling.\n     * @throws ValueError for invalid value in scale.\n     */\n    constructor(args) {\n        super();\n        if (args.scale < 0.0) {\n            throw new ValueError(`scale must be a positive float. Got: ${args.scale}`);\n        }\n        this.scale = args.scale == null ? 1.0 : args.scale;\n        this.mode = args.mode == null ? 'fanIn' : args.mode;\n        checkFanMode(this.mode);\n        this.distribution =\n            args.distribution == null ? 'normal' : args.distribution;\n        checkDistribution(this.distribution);\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        const fans = computeFans(shape);\n        const fanIn = fans[0];\n        const fanOut = fans[1];\n        let scale = this.scale;\n        if (this.mode === 'fanIn') {\n            scale /= Math.max(1, fanIn);\n        }\n        else if (this.mode === 'fanOut') {\n            scale /= Math.max(1, fanOut);\n        }\n        else {\n            scale /= Math.max(1, (fanIn + fanOut) / 2);\n        }\n        if (this.distribution === 'normal') {\n            const stddev = Math.sqrt(scale);\n            dtype = dtype || 'float32';\n            if (dtype !== 'float32' && dtype !== 'int32') {\n                throw new NotImplementedError(`${this.getClassName()} does not support dType ${dtype}.`);\n            }\n            return truncatedNormal(shape, 0, stddev, dtype, this.seed);\n        }\n        else {\n            const limit = Math.sqrt(3 * scale);\n            return randomUniform(shape, -limit, limit, dtype);\n        }\n    }\n    getConfig() {\n        return {\n            scale: this.scale,\n            mode: this.mode,\n            distribution: this.distribution,\n            seed: this.seed\n        };\n    }\n}\n/** @nocollapse */\nVarianceScaling.className = 'VarianceScaling';\nserialization.registerClass(VarianceScaling);\nexport class GlorotUniform extends VarianceScaling {\n    /**\n     * Constructor of GlorotUniform\n     * @param scale\n     * @param mode\n     * @param distribution\n     * @param seed\n     */\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanAvg',\n            distribution: 'uniform',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, GlorotUniform is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nGlorotUniform.className = 'GlorotUniform';\nserialization.registerClass(GlorotUniform);\nexport class GlorotNormal extends VarianceScaling {\n    /**\n     * Constructor of GlorotNormal.\n     * @param scale\n     * @param mode\n     * @param distribution\n     * @param seed\n     */\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanAvg',\n            distribution: 'normal',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, GlorotNormal is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nGlorotNormal.className = 'GlorotNormal';\nserialization.registerClass(GlorotNormal);\nexport class HeNormal extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 2.0,\n            mode: 'fanIn',\n            distribution: 'normal',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, HeNormal is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nHeNormal.className = 'HeNormal';\nserialization.registerClass(HeNormal);\nexport class HeUniform extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 2.0,\n            mode: 'fanIn',\n            distribution: 'uniform',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, HeUniform is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nHeUniform.className = 'HeUniform';\nserialization.registerClass(HeUniform);\nexport class LeCunNormal extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanIn',\n            distribution: 'normal',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, LeCunNormal is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nLeCunNormal.className = 'LeCunNormal';\nserialization.registerClass(LeCunNormal);\nexport class LeCunUniform extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanIn',\n            distribution: 'uniform',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, LeCunUniform is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nLeCunUniform.className = 'LeCunNormal';\nserialization.registerClass(LeCunUniform);\nexport class Orthogonal extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_GAIN = 1;\n        this.gain = args.gain == null ? this.DEFAULT_GAIN : args.gain;\n        this.seed = args.seed;\n        if (this.seed != null) {\n            throw new NotImplementedError('Random seed is not implemented for Orthogonal Initializer yet.');\n        }\n    }\n    apply(shape, dtype) {\n        return tidy(() => {\n            if (shape.length < 2) {\n                throw new NotImplementedError('Shape must be at least 2D.');\n            }\n            if (shape[0] * shape[1] > 2000) {\n                console.warn(`Orthogonal initializer is being called on a matrix with more ` +\n                    `than 2000 (${shape[0] * shape[1]}) elements: ` +\n                    `Slowness may result.`);\n            }\n            // TODO(cais): Add seed support.\n            const normalizedShape = shape[0] > shape[1] ? [shape[1], shape[0]] : shape;\n            const a = K.randomNormal(normalizedShape, 0, 1, 'float32');\n            let q = linalg.gramSchmidt(a);\n            if (shape[0] > shape[1]) {\n                q = q.transpose();\n            }\n            return mul(this.gain, q);\n        });\n    }\n    getConfig() {\n        return {\n            gain: this.gain,\n            seed: this.seed,\n        };\n    }\n}\n/** @nocollapse */\nOrthogonal.className = 'Orthogonal';\nserialization.registerClass(Orthogonal);\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n    'constant': 'Constant',\n    'glorotNormal': 'GlorotNormal',\n    'glorotUniform': 'GlorotUniform',\n    'heNormal': 'HeNormal',\n    'heUniform': 'HeUniform',\n    'identity': 'Identity',\n    'leCunNormal': 'LeCunNormal',\n    'leCunUniform': 'LeCunUniform',\n    'ones': 'Ones',\n    'orthogonal': 'Orthogonal',\n    'randomNormal': 'RandomNormal',\n    'randomUniform': 'RandomUniform',\n    'truncatedNormal': 'TruncatedNormal',\n    'varianceScaling': 'VarianceScaling',\n    'zeros': 'Zeros'\n};\nfunction deserializeInitializer(config, customObjects = {}) {\n    return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'initializer');\n}\nexport function serializeInitializer(initializer) {\n    return serializeKerasObject(initializer);\n}\nexport function getInitializer(identifier) {\n    if (typeof identifier === 'string') {\n        const className = identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n            INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n            identifier;\n        /* We have four 'helper' classes for common initializers that\n        all get serialized as 'VarianceScaling' and shouldn't go through\n        the deserializeInitializer pathway. */\n        if (className === 'GlorotNormal') {\n            return new GlorotNormal();\n        }\n        else if (className === 'GlorotUniform') {\n            return new GlorotUniform();\n        }\n        else if (className === 'HeNormal') {\n            return new HeNormal();\n        }\n        else if (className === 'HeUniform') {\n            return new HeUniform();\n        }\n        else if (className === 'LeCunNormal') {\n            return new LeCunNormal();\n        }\n        else if (className === 'LeCunUniform') {\n            return new LeCunUniform();\n        }\n        else {\n            const config = {};\n            config['className'] = className;\n            config['config'] = {};\n            return deserializeInitializer(config);\n        }\n    }\n    else if (identifier instanceof Initializer) {\n        return identifier;\n    }\n    else {\n        return deserializeInitializer(identifier);\n    }\n}\n//# sourceMappingURL=initializers.js.map"]},"metadata":{},"sourceType":"module"}