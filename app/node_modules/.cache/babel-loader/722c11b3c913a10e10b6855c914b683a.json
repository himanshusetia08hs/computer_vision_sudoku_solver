{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n// Layer activation functions\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { deserializeKerasObject } from './utils/generic_utils';\n/**\n * Base class for Activations.\n *\n * Special note: due to cross-language compatibility reasons, the\n * static readonly className field in this family of classes must be set to\n * the initialLowerCamelCase name of the activation.\n */\nexport class Activation extends serialization.Serializable {\n  getConfig() {\n    return {};\n  }\n}\n/**\n * Exponential linear unit (ELU).\n * Reference: https://arxiv.org/abs/1511.07289\n */\nexport class Elu extends Activation {\n  /**\n   * Calculate the activation function.\n   *\n   * @param x: Input.\n   * @param alpha: Scaling factor the negative section.\n   * @return Output of the ELU activation.\n   */\n  apply(x) {\n    let alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return K.elu(x, alpha);\n  }\n}\n/** @nocollapse */\nElu.className = 'elu';\nserialization.registerClass(Elu);\n/**\n * Scaled Exponential Linear Unit. (Klambauer et al., 2017).\n * Reference: Self-Normalizing Neural Networks, https://arxiv.org/abs/1706.02515\n * Notes:\n *   - To be used together with the initialization \"lecunNormal\".\n *   - To be used together with the dropout variant \"AlphaDropout\".\n */\nexport class Selu extends Activation {\n  apply(x) {\n    return tfc.selu(x);\n  }\n}\n/** @nocollapse */\nSelu.className = 'selu';\nserialization.registerClass(Selu);\n/**\n *  Rectified linear unit\n */\nexport class Relu extends Activation {\n  apply(x) {\n    return tfc.relu(x);\n  }\n}\n/** @nocollapse */\nRelu.className = 'relu';\nserialization.registerClass(Relu);\n/**\n * Rectified linear unit activation maxing out at 6.0.\n */\nexport class Relu6 extends Activation {\n  apply(x) {\n    return tidy(() => tfc.minimum(6.0, tfc.relu(x)));\n  }\n}\n/** @nocollapse */\nRelu6.className = 'relu6';\nserialization.registerClass(Relu6);\n//* Linear activation (no-op) */\nexport class Linear extends Activation {\n  apply(x) {\n    return x;\n  }\n}\n/** @nocollapse */\nLinear.className = 'linear';\nserialization.registerClass(Linear);\n/**\n * Sigmoid activation function.\n */\nexport class Sigmoid extends Activation {\n  apply(x) {\n    return tfc.sigmoid(x);\n  }\n}\n/** @nocollapse */\nSigmoid.className = 'sigmoid';\nserialization.registerClass(Sigmoid);\n/**\n * Segment-wise linear approximation of sigmoid.\n */\nexport class HardSigmoid extends Activation {\n  apply(x) {\n    return K.hardSigmoid(x);\n  }\n}\n/** @nocollapse */\nHardSigmoid.className = 'hardSigmoid';\nserialization.registerClass(HardSigmoid);\n/**\n * Softplus activation function.\n */\nexport class Softplus extends Activation {\n  apply(x) {\n    return tfc.softplus(x);\n  }\n}\n/** @nocollapse */\nSoftplus.className = 'softplus';\nserialization.registerClass(Softplus);\n/**\n * Softsign activation function.\n */\nexport class Softsign extends Activation {\n  apply(x) {\n    return K.softsign(x);\n  }\n}\n/** @nocollapse */\nSoftsign.className = 'softsign';\nserialization.registerClass(Softsign);\n/**\n * Hyperbolic tangent function.\n */\nexport class Tanh extends Activation {\n  apply(x) {\n    return tfc.tanh(x);\n  }\n}\n/** @nocollapse */\nTanh.className = 'tanh';\nserialization.registerClass(Tanh);\n/**\n * Softmax activation function\n */\nexport class Softmax extends Activation {\n  /**\n   * Calculate the activation function.\n   *\n   * @param x Tensor.\n   * @param axis Integer, axis along which the softmax normalization is applied.\n   * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\n   * an error.\n   *\n   * @returns a Tensor of the same shape as x\n   *\n   * @throws ValueError: In case `dim(x) < 2`.\n   */\n  apply(x) {\n    let axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    return tfc.softmax(x, axis);\n  }\n}\n/** @nocollapse */\nSoftmax.className = 'softmax';\nserialization.registerClass(Softmax);\n/**\n * Log softmax activation function\n */\nexport class LogSoftmax extends Activation {\n  /**\n   * Calculate the activation function of log softmax:\n   * log( exp(x_i) / sum(exp(x)) )\n   *\n   * @param x Tensor.\n   * @param axis Integer, axis along which the softmax normalization is applied.\n   * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\n   * an error.\n   *\n   * @returns a Tensor of the same shape as x\n   *\n   * @throws ValueError: In case `dim(x) < 2`.\n   */\n  apply(x) {\n    let axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    return tfc.logSoftmax(x, axis);\n  }\n}\n/** @nocollapse */\nLogSoftmax.className = 'logSoftmax';\nserialization.registerClass(LogSoftmax);\n/**\n * Swish activation function\n */\nexport class Swish extends Activation {\n  /**\n   * Calculate the activation function.\n   *\n   * @param x Tensor.\n   * @param alpha Scaling factor for the sigmoid function.\n   * @returns a Tensor of the same shape as x\n   */\n  apply(x) {\n    let alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return tidy(() => tfc.mul(tfc.sigmoid(tfc.mul(x, alpha)), x));\n  }\n}\n/** @nocollapse */\nSwish.className = 'swish';\nserialization.registerClass(Swish);\n/**\n * Mish activation function\n */\nexport class Mish extends Activation {\n  /**\n   * Calculate the activation function.\n   *\n   * @param x Tensor.\n   * @returns a Tensor of the same shape as x\n   */\n  apply(x) {\n    return tidy(() => tfc.mul(x, tfc.tanh(tfc.softplus(x))));\n  }\n}\n/** @nocollapse */\nMish.className = 'mish';\nserialization.registerClass(Mish);\nexport function serializeActivation(activation) {\n  return activation.getClassName();\n}\nexport function deserializeActivation(config) {\n  let customObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'activation');\n}\nexport function getActivation(identifier) {\n  if (identifier == null) {\n    const config = {};\n    config['className'] = 'linear';\n    config['config'] = {};\n    return deserializeActivation(config);\n  }\n  if (typeof identifier === 'string') {\n    const config = {};\n    config['className'] = identifier;\n    config['config'] = {};\n    return deserializeActivation(config);\n  } else if (identifier instanceof Activation) {\n    return identifier;\n  } else {\n    return deserializeActivation(identifier);\n  }\n}","map":{"version":3,"sources":["../../../../../tfjs-layers/src/activations.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n// Layer activation functions\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport {ActivationIdentifier} from './keras_format/activation_config';\nimport {deserializeKerasObject} from './utils/generic_utils';\n\n/**\n * Base class for Activations.\n *\n * Special note: due to cross-language compatibility reasons, the\n * static readonly className field in this family of classes must be set to\n * the initialLowerCamelCase name of the activation.\n */\nexport abstract class Activation extends serialization.Serializable {\n  abstract apply(tensor: Tensor, axis?: number): Tensor;\n  getConfig(): serialization.ConfigDict {\n    return {};\n  }\n}\n\n/**\n * Exponential linear unit (ELU).\n * Reference: https://arxiv.org/abs/1511.07289\n */\nexport class Elu extends Activation {\n  /** @nocollapse */\n  static readonly className = 'elu';\n  /**\n   * Calculate the activation function.\n   *\n   * @param x: Input.\n   * @param alpha: Scaling factor the negative section.\n   * @return Output of the ELU activation.\n   */\n  apply(x: Tensor, alpha = 1): Tensor {\n    return K.elu(x, alpha);\n  }\n}\nserialization.registerClass(Elu);\n\n/**\n * Scaled Exponential Linear Unit. (Klambauer et al., 2017).\n * Reference: Self-Normalizing Neural Networks, https://arxiv.org/abs/1706.02515\n * Notes:\n *   - To be used together with the initialization \"lecunNormal\".\n *   - To be used together with the dropout variant \"AlphaDropout\".\n */\nexport class Selu extends Activation {\n  /** @nocollapse */\n  static readonly className = 'selu';\n  apply(x: Tensor): Tensor {\n    return tfc.selu(x);\n  }\n}\nserialization.registerClass(Selu);\n\n/**\n *  Rectified linear unit\n */\nexport class Relu extends Activation {\n  /** @nocollapse */\n  static readonly className = 'relu';\n  apply(x: Tensor): Tensor {\n    return tfc.relu(x);\n  }\n}\nserialization.registerClass(Relu);\n\n/**\n * Rectified linear unit activation maxing out at 6.0.\n */\nexport class Relu6 extends Activation {\n  /** @nocollapse */\n  static readonly className = 'relu6';\n  apply(x: Tensor): Tensor {\n    return tidy(() => tfc.minimum(6.0, tfc.relu(x)));\n  }\n}\nserialization.registerClass(Relu6);\n\n//* Linear activation (no-op) */\nexport class Linear extends Activation {\n  /** @nocollapse */\n  static readonly className = 'linear';\n  apply(x: Tensor): Tensor {\n    return x;\n  }\n}\nserialization.registerClass(Linear);\n\n/**\n * Sigmoid activation function.\n */\nexport class Sigmoid extends Activation {\n  /** @nocollapse */\n  static readonly className = 'sigmoid';\n  apply(x: Tensor): Tensor {\n    return tfc.sigmoid(x);\n  }\n}\nserialization.registerClass(Sigmoid);\n\n/**\n * Segment-wise linear approximation of sigmoid.\n */\nexport class HardSigmoid extends Activation {\n  /** @nocollapse */\n  static readonly className = 'hardSigmoid';\n  apply(x: Tensor): Tensor {\n    return K.hardSigmoid(x);\n  }\n}\nserialization.registerClass(HardSigmoid);\n\n/**\n * Softplus activation function.\n */\nexport class Softplus extends Activation {\n  /** @nocollapse */\n  static readonly className = 'softplus';\n  apply(x: Tensor): Tensor {\n    return tfc.softplus(x);\n  }\n}\nserialization.registerClass(Softplus);\n\n/**\n * Softsign activation function.\n */\nexport class Softsign extends Activation {\n  /** @nocollapse */\n  static readonly className = 'softsign';\n  apply(x: Tensor): Tensor {\n    return K.softsign(x);\n  }\n}\nserialization.registerClass(Softsign);\n\n/**\n * Hyperbolic tangent function.\n */\nexport class Tanh extends Activation {\n  /** @nocollapse */\n  static readonly className = 'tanh';\n  apply(x: Tensor): Tensor {\n    return tfc.tanh(x);\n  }\n}\nserialization.registerClass(Tanh);\n\n/**\n * Softmax activation function\n */\nexport class Softmax extends Activation {\n  /** @nocollapse */\n  static readonly className = 'softmax';\n  /**\n   * Calculate the activation function.\n   *\n   * @param x Tensor.\n   * @param axis Integer, axis along which the softmax normalization is applied.\n   * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\n   * an error.\n   *\n   * @returns a Tensor of the same shape as x\n   *\n   * @throws ValueError: In case `dim(x) < 2`.\n   */\n  apply(x: Tensor, axis: number = (-1)): Tensor {\n    return tfc.softmax(x, axis);\n  }\n}\nserialization.registerClass(Softmax);\n\n/**\n * Log softmax activation function\n */\nexport class LogSoftmax extends Activation {\n  /** @nocollapse */\n  static readonly className = 'logSoftmax';\n  /**\n   * Calculate the activation function of log softmax:\n   * log( exp(x_i) / sum(exp(x)) )\n   *\n   * @param x Tensor.\n   * @param axis Integer, axis along which the softmax normalization is applied.\n   * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\n   * an error.\n   *\n   * @returns a Tensor of the same shape as x\n   *\n   * @throws ValueError: In case `dim(x) < 2`.\n   */\n  apply(x: Tensor, axis: number = (-1)): Tensor {\n    return tfc.logSoftmax(x, axis);\n  }\n}\nserialization.registerClass(LogSoftmax);\n\n/**\n * Swish activation function\n */\nexport class Swish extends Activation {\n  /** @nocollapse */\n  static readonly className = 'swish';\n  /**\n   * Calculate the activation function.\n   *\n   * @param x Tensor.\n   * @param alpha Scaling factor for the sigmoid function.\n   * @returns a Tensor of the same shape as x\n   */\n  apply(x: Tensor, alpha = 1): Tensor {\n    return tidy(() => tfc.mul(tfc.sigmoid(tfc.mul(x, alpha)), x));\n  }\n}\nserialization.registerClass(Swish);\n\n/**\n * Mish activation function\n */\nexport class Mish extends Activation {\n  /** @nocollapse */\n  static readonly className = 'mish';\n  /**\n   * Calculate the activation function.\n   *\n   * @param x Tensor.\n   * @returns a Tensor of the same shape as x\n   */\n  apply(x: Tensor): Tensor {\n    return tidy(() => tfc.mul(x, tfc.tanh(tfc.softplus(x))));\n  }\n}\nserialization.registerClass(Mish);\n\nexport function serializeActivation(activation: Activation): string {\n  return activation.getClassName();\n}\n\nexport function deserializeActivation(\n    config: serialization.ConfigDict,\n    customObjects: serialization.ConfigDict = {}): Activation {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'activation');\n}\n\nexport function getActivation(identifier: ActivationIdentifier|\n                              serialization.ConfigDict|Activation): Activation {\n  if (identifier == null) {\n    const config: serialization.ConfigDict = {};\n    config['className'] = 'linear';\n    config['config'] = {};\n    return deserializeActivation(config);\n  }\n  if (typeof identifier === 'string') {\n    const config: serialization.ConfigDict = {};\n    config['className'] = identifier;\n    config['config'] = {};\n    return deserializeActivation(config);\n  } else if (identifier instanceof Activation) {\n    return identifier;\n  } else {\n    return deserializeActivation(identifier);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}