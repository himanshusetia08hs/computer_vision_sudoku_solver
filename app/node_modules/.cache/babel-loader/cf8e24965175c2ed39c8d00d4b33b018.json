{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Depthwise Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength } from '../utils/conv_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nimport { BaseConv, preprocessConv2DInput } from './convolutional';\n/**\n * 2D convolution with separable filters.\n * @param x Input tensor.\n * @param depthwiseKernel Convolution kernel for depthwise convolution.\n * @param strides Strides (Array of two integers).\n * @param padding Padding model.\n * @param dataFormat Data format.\n * @param dilationRate Array of two integers, dilation rates for the separable\n *   convolution.\n * @returns Output tensor.\n * @throws ValueError If depthwiseKernel is not a 4D array.\n */\nexport function depthwiseConv2d(x, depthwiseKernel) {\n  let strides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [1, 1];\n  let padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'valid';\n  let dataFormat = arguments.length > 4 ? arguments[4] : undefined;\n  let dilationRate = arguments.length > 5 ? arguments[5] : undefined;\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    let y = preprocessConv2DInput(x, dataFormat);\n    if (x.rank !== 4) {\n      throw new ValueError(`Input for depthwiseConv2d is required to be 4-D, but is instead ` + `${x.rank}-D`);\n    }\n    if (depthwiseKernel.rank !== 4) {\n      throw new ValueError(`depthwiseKernel is required to be 4-D, but is instead ` + `${depthwiseKernel.rank}-D`);\n    }\n    y = tfc.depthwiseConv2d(y, depthwiseKernel, strides, padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n  });\n}\nexport class DepthwiseConv2D extends BaseConv {\n  constructor(args) {\n    super(2, args);\n    this.depthwiseKernel = null;\n    this.depthMultiplier = args.depthMultiplier == null ? 1 : args.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(args.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.depthwiseConstraint = getConstraint(args.depthwiseConstraint);\n    this.depthwiseRegularizer = getRegularizer(args.depthwiseRegularizer);\n  }\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < 4) {\n      throw new ValueError(`Inputs to DepthwiseConv2D should have rank 4. ` + `Received input shape: ${JSON.stringify(inputShape)}.`);\n    }\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError('The channel dimension of the inputs to DepthwiseConv2D should ' + `be defined, but is not (${inputShape[channelAxis]}).`);\n    }\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape = [this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier];\n    this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [inputDim * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    this.built = true;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs = depthwiseConv2d(inputs, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);\n      // TODO(cais): Add support for dilation.\n      if (this.useBias) {\n        outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs);\n      }\n      return outputs;\n    });\n  }\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n    const cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n    const outFilters = this.dataFormat === 'channelsFirst' ? inputShape[1] * this.depthMultiplier : inputShape[3] * this.depthMultiplier;\n    const outRows = convOutputLength(rows, this.kernelSize[0], this.padding, this.strides[0]);\n    const outCols = convOutputLength(cols, this.kernelSize[1], this.padding, this.strides[1]);\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], outFilters, outRows, outCols];\n    } else {\n      // In this case, assume 'channelsLast'.\n      return [inputShape[0], outRows, outCols, outFilters];\n    }\n  }\n  getConfig() {\n    const config = super.getConfig();\n    config['depthMultiplier'] = this.depthMultiplier;\n    config['depthwiseInitializer'] = serializeInitializer(this.depthwiseInitializer);\n    config['depthwiseRegularizer'] = serializeRegularizer(this.depthwiseRegularizer);\n    config['depthwiseConstraint'] = serializeConstraint(this.depthwiseRegularizer);\n    return config;\n  }\n}\n/** @nocollapse */\nDepthwiseConv2D.className = 'DepthwiseConv2D';\nserialization.registerClass(DepthwiseConv2D);","map":{"version":3,"sources":["../../src/layers/convolutional_depthwise.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Depthwise Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength } from '../utils/conv_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nimport { BaseConv, preprocessConv2DInput } from './convolutional';\n/**\n * 2D convolution with separable filters.\n * @param x Input tensor.\n * @param depthwiseKernel Convolution kernel for depthwise convolution.\n * @param strides Strides (Array of two integers).\n * @param padding Padding model.\n * @param dataFormat Data format.\n * @param dilationRate Array of two integers, dilation rates for the separable\n *   convolution.\n * @returns Output tensor.\n * @throws ValueError If depthwiseKernel is not a 4D array.\n */\nexport function depthwiseConv2d(x, depthwiseKernel, strides = [1, 1], padding = 'valid', dataFormat, dilationRate) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        let y = preprocessConv2DInput(x, dataFormat);\n        if (x.rank !== 4) {\n            throw new ValueError(`Input for depthwiseConv2d is required to be 4-D, but is instead ` +\n                `${x.rank}-D`);\n        }\n        if (depthwiseKernel.rank !== 4) {\n            throw new ValueError(`depthwiseKernel is required to be 4-D, but is instead ` +\n                `${depthwiseKernel.rank}-D`);\n        }\n        y = tfc.depthwiseConv2d(y, depthwiseKernel, strides, padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 3, 1, 2]);\n        }\n        return y;\n    });\n}\nexport class DepthwiseConv2D extends BaseConv {\n    constructor(args) {\n        super(2, args);\n        this.depthwiseKernel = null;\n        this.depthMultiplier =\n            args.depthMultiplier == null ? 1 : args.depthMultiplier;\n        this.depthwiseInitializer = getInitializer(args.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n        this.depthwiseConstraint = getConstraint(args.depthwiseConstraint);\n        this.depthwiseRegularizer = getRegularizer(args.depthwiseRegularizer);\n    }\n    build(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (inputShape.length < 4) {\n            throw new ValueError(`Inputs to DepthwiseConv2D should have rank 4. ` +\n                `Received input shape: ${JSON.stringify(inputShape)}.`);\n        }\n        const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;\n        if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n            throw new ValueError('The channel dimension of the inputs to DepthwiseConv2D should ' +\n                `be defined, but is not (${inputShape[channelAxis]}).`);\n        }\n        const inputDim = inputShape[channelAxis];\n        const depthwiseKernelShape = [\n            this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier\n        ];\n        this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint);\n        if (this.useBias) {\n            this.bias = this.addWeight('bias', [inputDim * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n        }\n        else {\n            this.bias = null;\n        }\n        this.built = true;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            let outputs = depthwiseConv2d(inputs, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);\n            // TODO(cais): Add support for dilation.\n            if (this.useBias) {\n                outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n            }\n            if (this.activation != null) {\n                outputs = this.activation.apply(outputs);\n            }\n            return outputs;\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n        const cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n        const outFilters = this.dataFormat === 'channelsFirst' ?\n            inputShape[1] * this.depthMultiplier :\n            inputShape[3] * this.depthMultiplier;\n        const outRows = convOutputLength(rows, this.kernelSize[0], this.padding, this.strides[0]);\n        const outCols = convOutputLength(cols, this.kernelSize[1], this.padding, this.strides[1]);\n        if (this.dataFormat === 'channelsFirst') {\n            return [inputShape[0], outFilters, outRows, outCols];\n        }\n        else {\n            // In this case, assume 'channelsLast'.\n            return [inputShape[0], outRows, outCols, outFilters];\n        }\n    }\n    getConfig() {\n        const config = super.getConfig();\n        config['depthMultiplier'] = this.depthMultiplier;\n        config['depthwiseInitializer'] =\n            serializeInitializer(this.depthwiseInitializer);\n        config['depthwiseRegularizer'] =\n            serializeRegularizer(this.depthwiseRegularizer);\n        config['depthwiseConstraint'] =\n            serializeConstraint(this.depthwiseRegularizer);\n        return config;\n    }\n}\n/** @nocollapse */\nDepthwiseConv2D.className = 'DepthwiseConv2D';\nserialization.registerClass(DepthwiseConv2D);\n//# sourceMappingURL=convolutional_depthwise.js.map"]},"metadata":{},"sourceType":"module"}