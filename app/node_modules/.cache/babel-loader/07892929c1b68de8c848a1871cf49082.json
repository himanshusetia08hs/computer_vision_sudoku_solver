{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ComplexAbs, util } from '@tensorflow/tfjs-core';\nexport const complexAbs = args => {\n  const {\n    x\n  } = args.inputs;\n  const cpuBackend = args.backend;\n  const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const complexVals = cpuBackend.data.get(x.dataId);\n  const real = complexVals.complexTensorInfos.real;\n  const imag = complexVals.complexTensorInfos.imag;\n  const realVals = cpuBackend.data.get(real.dataId).values;\n  const imagVals = cpuBackend.data.get(imag.dataId).values;\n  for (let i = 0; i < realVals.length; i++) {\n    const real = realVals[i];\n    const imag = imagVals[i];\n    resultValues[i] = Math.hypot(real, imag);\n  }\n  return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\nexport const complexAbsConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'cpu',\n  kernelFunc: complexAbs\n};","map":{"version":3,"sources":["../../src/kernels/ComplexAbs.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,UAAU,EAA8C,IAAI,QAAO,uBAAuB;AAIlG,OAAO,MAAM,UAAU,GAClB,IAAyD,IAAI;EAC5D,MAAM;IAAC;EAAC,CAAC,GAAG,IAAI,CAAC,MAAM;EACvB,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO;EAC/B,MAAM,YAAY,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;EAClE,MAAM,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC;EACjD,MAAM,IAAI,GAAG,WAAW,CAAC,kBAAkB,CAAC,IAAI;EAChD,MAAM,IAAI,GAAG,WAAW,CAAC,kBAAkB,CAAC,IAAI;EAChD,MAAM,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAsB;EACxE,MAAM,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAsB;EACxE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACxC,MAAM,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC;IACxB,MAAM,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC;IACxB,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC;EACzC;EAED,OAAO,UAAU,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC,CAAC,KAAK,EAAE,SAAS,CAAC;AAChE,CAAC;AAEL,OAAO,MAAM,gBAAgB,GAAiB;EAC5C,UAAU,EAAE,UAAU;EACtB,WAAW,EAAE,KAAK;EAClB,UAAU,EAAE;CACb","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ComplexAbs, util } from '@tensorflow/tfjs-core';\nexport const complexAbs = (args) => {\n    const { x } = args.inputs;\n    const cpuBackend = args.backend;\n    const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n    const complexVals = cpuBackend.data.get(x.dataId);\n    const real = complexVals.complexTensorInfos.real;\n    const imag = complexVals.complexTensorInfos.imag;\n    const realVals = cpuBackend.data.get(real.dataId).values;\n    const imagVals = cpuBackend.data.get(imag.dataId).values;\n    for (let i = 0; i < realVals.length; i++) {\n        const real = realVals[i];\n        const imag = imagVals[i];\n        resultValues[i] = Math.hypot(real, imag);\n    }\n    return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\nexport const complexAbsConfig = {\n    kernelName: ComplexAbs,\n    backendName: 'cpu',\n    kernelFunc: complexAbs,\n};\n//# sourceMappingURL=ComplexAbs.js.map"]},"metadata":{},"sourceType":"module"}