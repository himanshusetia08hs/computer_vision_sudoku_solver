{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multinomial } from '@tensorflow/tfjs-core';\nimport { MultinomialProgram } from '../multinomial_gpu';\nimport { softmax } from './Softmax';\nexport function multinomial(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    logits\n  } = inputs;\n  const {\n    numSamples,\n    seed,\n    normalized\n  } = attrs;\n  const probs = normalized ? logits : softmax({\n    inputs: {\n      logits\n    },\n    backend,\n    attrs: {\n      dim: logits.shape.length - 1\n    }\n  });\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n  const customSetup = program.getCustomSetupFunc(seed);\n  const res = backend.runWebGLProgram(program, [probs], 'int32', customSetup);\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probs);\n  }\n  return res;\n}\nexport const multinomialConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgl',\n  kernelFunc: multinomial\n};","map":{"version":3,"sources":["../../src/kernels/Multinomial.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,WAAW,QAAwD,uBAAuB;AAG5H,SAAQ,kBAAkB,QAAO,oBAAoB;AAErD,SAAQ,OAAO,QAAO,WAAW;AAEjC,OAAM,SAAU,WAAW,CAAC,IAI3B,EAAA;EACC,MAAM;IAAC,MAAM;IAAE,OAAO;IAAE;EAAK,CAAC,GAAG,IAAI;EACrC,MAAM;IAAC;EAAM,CAAC,GAAG,MAAM;EACvB,MAAM;IAAC,UAAU;IAAE,IAAI;IAAE;EAAU,CAAC,GAAG,KAAK;EAE5C,MAAM,KAAK,GAAG,UAAU,GACpB,MAAM,GACN,OAAO,CACH;IAAC,MAAM,EAAE;MAAC;IAAM,CAAC;IAAE,OAAO;IAAE,KAAK,EAAE;MAAC,GAAG,EAAE,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG;IAAC;EAAC,CAAC,CAAC;EAC3E,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;EAChC,MAAM,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;EAClC,MAAM,OAAO,GAAG,IAAI,kBAAkB,CAAC,SAAS,EAAE,WAAW,EAAE,UAAU,CAAC;EAC1E,MAAM,WAAW,GAAG,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC;EAEpD,MAAM,GAAG,GAAG,OAAO,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,WAAW,CAAC;EAC3E,IAAI,CAAC,UAAU,EAAE;IACf,OAAO,CAAC,6BAA6B,CAAC,KAAK,CAAC;EAC7C;EACD,OAAO,GAAG;AACZ;AAEA,OAAO,MAAM,iBAAiB,GAAiB;EAC7C,UAAU,EAAE,WAAW;EACvB,WAAW,EAAE,OAAO;EACpB,UAAU,EAAE;CACb","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multinomial } from '@tensorflow/tfjs-core';\nimport { MultinomialProgram } from '../multinomial_gpu';\nimport { softmax } from './Softmax';\nexport function multinomial(args) {\n    const { inputs, backend, attrs } = args;\n    const { logits } = inputs;\n    const { numSamples, seed, normalized } = attrs;\n    const probs = normalized ?\n        logits :\n        softmax({ inputs: { logits }, backend, attrs: { dim: logits.shape.length - 1 } });\n    const batchSize = probs.shape[0];\n    const numOutcomes = probs.shape[1];\n    const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n    const customSetup = program.getCustomSetupFunc(seed);\n    const res = backend.runWebGLProgram(program, [probs], 'int32', customSetup);\n    if (!normalized) {\n        backend.disposeIntermediateTensorInfo(probs);\n    }\n    return res;\n}\nexport const multinomialConfig = {\n    kernelName: Multinomial,\n    backendName: 'webgl',\n    kernelFunc: multinomial\n};\n//# sourceMappingURL=Multinomial.js.map"]},"metadata":{},"sourceType":"module"}