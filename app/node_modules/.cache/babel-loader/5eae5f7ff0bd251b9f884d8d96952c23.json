{"ast":null,"code":"import { errorTransform } from './utils/errorTransform';\nimport { factory } from '../../utils/factory';\nimport { createApply } from '../../function/matrix/apply';\nimport { isBigNumber, isNumber } from '../../utils/is';\nvar name = 'apply';\nvar dependencies = ['typed', 'isInteger'];\n/**\n * Attach a transform function to math.apply\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function apply\n * from one-based to zero based\n */\n\nexport var createApplyTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    isInteger = _ref.isInteger;\n  var apply = createApply({\n    typed: typed,\n    isInteger: isInteger\n  }); // @see: comment of concat itself\n\n  return typed('apply', {\n    '...any': function any(args) {\n      // change dim from one-based to zero-based\n      var dim = args[1];\n      if (isNumber(dim)) {\n        args[1] = dim - 1;\n      } else if (isBigNumber(dim)) {\n        args[1] = dim.minus(1);\n      }\n      try {\n        return apply.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"names":["errorTransform","factory","createApply","isBigNumber","isNumber","name","dependencies","createApplyTransform","_ref","typed","isInteger","apply","any","args","dim","minus","err","isTransformFunction"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/Project/temp/app/node_modules/mathjs/es/expression/transform/apply.transform.js"],"sourcesContent":["import { errorTransform } from './utils/errorTransform';\nimport { factory } from '../../utils/factory';\nimport { createApply } from '../../function/matrix/apply';\nimport { isBigNumber, isNumber } from '../../utils/is';\nvar name = 'apply';\nvar dependencies = ['typed', 'isInteger'];\n/**\n * Attach a transform function to math.apply\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function apply\n * from one-based to zero based\n */\n\nexport var createApplyTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      isInteger = _ref.isInteger;\n  var apply = createApply({\n    typed: typed,\n    isInteger: isInteger\n  }); // @see: comment of concat itself\n\n  return typed('apply', {\n    '...any': function any(args) {\n      // change dim from one-based to zero-based\n      var dim = args[1];\n\n      if (isNumber(dim)) {\n        args[1] = dim - 1;\n      } else if (isBigNumber(dim)) {\n        args[1] = dim.minus(1);\n      }\n\n      try {\n        return apply.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});"],"mappings":"AAAA,SAASA,cAAc,QAAQ,wBAAwB;AACvD,SAASC,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,WAAW,QAAQ,6BAA6B;AACzD,SAASC,WAAW,EAAEC,QAAQ,QAAQ,gBAAgB;AACtD,IAAIC,IAAI,GAAG,OAAO;AAClB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,WAAW,CAAC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,oBAAoB,GAAG,eAAeN,OAAO,CAACI,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC3F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,SAAS,GAAGF,IAAI,CAACE,SAAS;EAC9B,IAAIC,KAAK,GAAGT,WAAW,CAAC;IACtBO,KAAK,EAAEA,KAAK;IACZC,SAAS,EAAEA;EACb,CAAC,CAAC,CAAC,CAAC;;EAEJ,OAAOD,KAAK,CAAC,OAAO,EAAE;IACpB,QAAQ,EAAE,SAASG,GAAG,CAACC,IAAI,EAAE;MAC3B;MACA,IAAIC,GAAG,GAAGD,IAAI,CAAC,CAAC,CAAC;MAEjB,IAAIT,QAAQ,CAACU,GAAG,CAAC,EAAE;QACjBD,IAAI,CAAC,CAAC,CAAC,GAAGC,GAAG,GAAG,CAAC;MACnB,CAAC,MAAM,IAAIX,WAAW,CAACW,GAAG,CAAC,EAAE;QAC3BD,IAAI,CAAC,CAAC,CAAC,GAAGC,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC;MACxB;MAEA,IAAI;QACF,OAAOJ,KAAK,CAACA,KAAK,CAAC,IAAI,EAAEE,IAAI,CAAC;MAChC,CAAC,CAAC,OAAOG,GAAG,EAAE;QACZ,MAAMhB,cAAc,CAACgB,GAAG,CAAC;MAC3B;IACF;EACF,CAAC,CAAC;AACJ,CAAC,EAAE;EACDC,mBAAmB,EAAE;AACvB,CAAC,CAAC"},"metadata":{},"sourceType":"module"}