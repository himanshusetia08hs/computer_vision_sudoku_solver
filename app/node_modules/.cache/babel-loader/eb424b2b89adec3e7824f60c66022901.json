{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RaggedGather } from '@tensorflow/tfjs-core';\nimport { raggedGatherImpl } from './RaggedGather_impl';\nexport function raggedGather(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    paramsNestedSplits,\n    paramsDenseValues,\n    indices\n  } = inputs;\n  const {\n    outputRaggedRank\n  } = attrs;\n  const $paramsNestedSplits = paramsNestedSplits.map(t => backend.data.get(t.dataId).values);\n  const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n  const $paramsDenseValues = backend.data.get(paramsDenseValues.dataId).values;\n  const $indices = backend.data.get(indices.dataId).values;\n  const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] = raggedGatherImpl($paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues, paramsDenseValues.shape, paramsDenseValues.dtype, $indices, indices.shape, outputRaggedRank);\n  const outputNestedSplitsTensors = outputNestedSplits.map(splits => backend.makeTensorInfo([splits.length], 'int32', splits));\n  const outputDenseValuesTensor = backend.makeTensorInfo(outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\nexport const raggedGatherConfig = {\n  kernelName: RaggedGather,\n  backendName: 'cpu',\n  kernelFunc: raggedGather\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/RaggedGather.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,YAAY,QAAsE,uBAAuB;AAI3I,SAAQ,gBAAgB,QAAO,qBAAqB;AAEpD,OAAM,SAAU,YAAY,CAAC,IAI5B,EAAA;EACC,MAAM;IAAC,MAAM;IAAE,OAAO;IAAE;EAAK,CAAC,GAAG,IAAI;EACrC,MAAM;IAAC,kBAAkB;IAAE,iBAAiB;IAAE;EAAO,CAAC,GAAG,MAAM;EAC/D,MAAM;IAAC;EAAgB,CAAC,GAAG,KAAK;EAEhC,MAAM,mBAAmB,GAAG,kBAAkB,CAAC,GAAG,CAC9C,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAoB,CAAC;EACzD,MAAM,yBAAyB,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;EACtE,MAAM,kBAAkB,GACpB,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,MAAoB;EACnE,MAAM,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAoB;EAEtE,MAAM,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,sBAAsB,CAAC,GACjE,gBAAgB,CACZ,mBAAmB,EAAE,yBAAyB,EAAE,kBAAkB,EAClE,iBAAiB,CAAC,KAAK,EAAE,iBAAiB,CAAC,KAAK,EAAE,QAAQ,EAC1D,OAAO,CAAC,KAAK,EAAE,gBAAgB,CAAC;EAExC,MAAM,yBAAyB,GAAG,kBAAkB,CAAC,GAAG,CACnD,MAAM,IAAK,OAAO,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;EAEzE,MAAM,uBAAuB,GAAG,OAAO,CAAC,cAAc,CAClD,sBAAsB,EAAE,iBAAiB,CAAC,KAAK,EAAE,iBAAiB,CAAC;EAEvE,OAAO,yBAAyB,CAAC,MAAM,CAAC,CAAC,uBAAuB,CAAC,CAAC;AACpE;AAEA,OAAO,MAAM,kBAAkB,GAAiB;EAC9C,UAAU,EAAE,YAAY;EACxB,WAAW,EAAE,KAAK;EAClB,UAAU,EAAE;CACb","sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RaggedGather, RaggedGatherAttrs, RaggedGatherInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {raggedGatherImpl} from './RaggedGather_impl';\n\nexport function raggedGather(args: {\n  inputs: RaggedGatherInputs,\n  backend: MathBackendCPU,\n  attrs: RaggedGatherAttrs\n}): TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {paramsNestedSplits, paramsDenseValues, indices} = inputs;\n  const {outputRaggedRank} = attrs;\n\n  const $paramsNestedSplits = paramsNestedSplits.map(\n      t => backend.data.get(t.dataId).values as TypedArray);\n  const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n  const $paramsDenseValues =\n      backend.data.get(paramsDenseValues.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n\n  const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] =\n      raggedGatherImpl(\n          $paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues,\n          paramsDenseValues.shape, paramsDenseValues.dtype, $indices,\n          indices.shape, outputRaggedRank);\n\n  const outputNestedSplitsTensors = outputNestedSplits.map(\n      (splits) => backend.makeTensorInfo([splits.length], 'int32', splits));\n\n  const outputDenseValuesTensor = backend.makeTensorInfo(\n      outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\n\nexport const raggedGatherConfig: KernelConfig = {\n  kernelName: RaggedGather,\n  backendName: 'cpu',\n  kernelFunc: raggedGather as {} as KernelFunc,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}