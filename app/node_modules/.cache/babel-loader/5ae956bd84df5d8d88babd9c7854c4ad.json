{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthwiseConv2dNative } from '../kernel_names';\nimport * as conv_util from '../ops/conv_util';\nimport { depthwiseConv2dNativeBackpropFilter } from '../ops/depthwise_conv2d_native_backprop_filter';\nimport { depthwiseConv2dNativeBackpropInput } from '../ops/depthwise_conv2d_native_backprop_input';\nimport * as util from '../util';\nexport const depthwiseConv2dNativeGradConfig = {\n  kernelName: DepthwiseConv2dNative,\n  inputsToSave: ['x', 'filter'],\n  gradFunc: (dy, saved, attrs) => {\n    const {\n      dilations,\n      strides,\n      pad,\n      dimRoundingMode\n    } = attrs;\n    const $dilations = dilations == null ? [1, 1] : dilations;\n    util.assert(conv_util.tupleValuesAreOne($dilations), () => 'Error in gradient of depthwiseConv2dNative: dilation rates ' + `greater than 1 are not yet supported. Got dilations ` + `'${$dilations}'`);\n    const [x, filter] = saved;\n    util.assert(x.rank === 4, () => `Error in gradient of depthwiseConv2dNative: input must be ` + `rank 4, but got rank ${x.rank}.`);\n    util.assert(filter.rank === 4, () => `Error in gradient of depthwiseConv2dNative: filter must be ` + `rank 4, but got rank ${filter.rank}.`);\n    util.assert(x.shape[3] === filter.shape[2], () => `Error in gradient of depthwiseConv2d: number of input ` + `channels (${x.shape[3]}) must match the inChannels dimension ` + `in filter ${filter.shape[2]}.`);\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in gradient of depthwiseConv2d: Either strides or ' + `dilations must be  1. Got strides ${strides} and dilations ` + `'${$dilations}'.`);\n    conv_util.checkPadOnDimRoundingMode('depthwiseConv2d', pad, dimRoundingMode);\n    return {\n      x: () => depthwiseConv2dNativeBackpropInput(x.shape, dy, filter, strides, pad, $dilations, dimRoundingMode),\n      filter: () => depthwiseConv2dNativeBackpropFilter(x, dy, filter.shape, strides, pad, $dilations, dimRoundingMode)\n    };\n  }\n};","map":{"version":3,"sources":["../../../../../../tfjs-core/src/gradients/DepthwiseConv2dNative_grad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,qBAAqB,QAAmC,iBAAiB;AAEjF,OAAO,KAAK,SAAS,MAAM,kBAAkB;AAC7C,SAAQ,mCAAmC,QAAO,gDAAgD;AAClG,SAAQ,kCAAkC,QAAO,+CAA+C;AAEhG,OAAO,KAAK,IAAI,MAAM,SAAS;AAE/B,OAAO,MAAM,+BAA+B,GAAe;EACzD,UAAU,EAAE,qBAAqB;EACjC,YAAY,EAAE,CAAC,GAAG,EAAE,QAAQ,CAAC;EAC7B,QAAQ,EAAE,CAAC,EAAY,EAAE,KAAe,EAAE,KAAmB,KAAI;IAC/D,MAAM;MAAC,SAAS;MAAE,OAAO;MAAE,GAAG;MAAE;IAAe,CAAC,GAC5C,KAAyC;IAC7C,MAAM,UAAU,GAAG,SAAS,IAAI,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAmB,GAAG,SAAS;IAE3E,IAAI,CAAC,MAAM,CACP,SAAS,CAAC,iBAAiB,CAAC,UAAU,CAAC,EACvC,MAAM,6DAA6D,GAC/D,sDAAsD,GACtD,IAAI,UAAU,GAAG,CAAC;IAE1B,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,GAAG,KAA6B;IAEjD,IAAI,CAAC,MAAM,CACP,CAAC,CAAC,IAAI,KAAK,CAAC,EACZ,MAAM,4DAA4D,GAC9D,wBAAwB,CAAC,CAAC,IAAI,GAAG,CAAC;IAC1C,IAAI,CAAC,MAAM,CACP,MAAM,CAAC,IAAI,KAAK,CAAC,EACjB,MAAM,6DAA6D,GAC/D,wBAAwB,MAAM,CAAC,IAAI,GAAG,CAAC;IAC/C,IAAI,CAAC,MAAM,CACP,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAC9B,MAAM,wDAAwD,GAC1D,aAAa,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,wCAAwC,GAC/D,aAAa,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;IAExC,IAAI,CAAC,MAAM,CACP,SAAS,CAAC,8BAA8B,CAAC,OAAO,EAAE,UAAU,CAAC,EAC7D,MAAM,0DAA0D,GAC5D,qCAAqC,OAAO,iBAAiB,GAC7D,IAAI,UAAU,IAAI,CAAC;IAE3B,SAAS,CAAC,yBAAyB,CAC/B,iBAAiB,EAAE,GAAG,EAAE,eAAe,CAAC;IAE5C,OAAO;MACL,CAAC,EAAE,MAAM,kCAAkC,CACvC,CAAC,CAAC,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,UAAU,EAAE,eAAe,CAAC;MACnE,MAAM,EAAE,MAAM,mCAAmC,CAC7C,CAAC,EAAE,EAAE,EAAE,MAAM,CAAC,KAAK,EAAE,OAAO,EAAE,GAAG,EAAE,UAAU,EAAE,eAAe;KACnE;EACH;CACD","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport * as conv_util from '../ops/conv_util';\nimport {depthwiseConv2dNativeBackpropFilter} from '../ops/depthwise_conv2d_native_backprop_filter';\nimport {depthwiseConv2dNativeBackpropInput} from '../ops/depthwise_conv2d_native_backprop_input';\nimport {Tensor, Tensor4D} from '../tensor';\nimport * as util from '../util';\n\nexport const depthwiseConv2dNativeGradConfig: GradConfig = {\n  kernelName: DepthwiseConv2dNative,\n  inputsToSave: ['x', 'filter'],\n  gradFunc: (dy: Tensor4D, saved: Tensor[], attrs: NamedAttrMap) => {\n    const {dilations, strides, pad, dimRoundingMode} =\n        attrs as {} as DepthwiseConv2dNativeAttrs;\n    const $dilations = dilations == null ? [1, 1] as[number,number] : dilations;\n\n    util.assert(\n        conv_util.tupleValuesAreOne($dilations),\n        () => 'Error in gradient of depthwiseConv2dNative: dilation rates ' +\n            `greater than 1 are not yet supported. Got dilations ` +\n            `'${$dilations}'`);\n\n    const [x, filter] = saved as [Tensor4D, Tensor4D];\n\n    util.assert(\n        x.rank === 4,\n        () => `Error in gradient of depthwiseConv2dNative: input must be ` +\n            `rank 4, but got rank ${x.rank}.`);\n    util.assert(\n        filter.rank === 4,\n        () => `Error in gradient of depthwiseConv2dNative: filter must be ` +\n            `rank 4, but got rank ${filter.rank}.`);\n    util.assert(\n        x.shape[3] === filter.shape[2],\n        () => `Error in gradient of depthwiseConv2d: number of input ` +\n            `channels (${x.shape[3]}) must match the inChannels dimension ` +\n            `in filter ${filter.shape[2]}.`);\n\n    util.assert(\n        conv_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n        () => 'Error in gradient of depthwiseConv2d: Either strides or ' +\n            `dilations must be  1. Got strides ${strides} and dilations ` +\n            `'${$dilations}'.`);\n\n    conv_util.checkPadOnDimRoundingMode(\n        'depthwiseConv2d', pad, dimRoundingMode);\n\n    return {\n      x: () => depthwiseConv2dNativeBackpropInput(\n          x.shape, dy, filter, strides, pad, $dilations, dimRoundingMode),\n      filter: () => depthwiseConv2dNativeBackpropFilter(\n          x, dy, filter.shape, strides, pad, $dilations, dimRoundingMode),\n    };\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}