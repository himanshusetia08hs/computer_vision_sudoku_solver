{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { CropAndResize } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\n// Must match enum in CropAndResize.cc\nvar InterpolationMethod;\n(function (InterpolationMethod) {\n  InterpolationMethod[InterpolationMethod[\"bilinear\"] = 0] = \"bilinear\";\n  InterpolationMethod[InterpolationMethod[\"nearest\"] = 1] = \"nearest\";\n})(InterpolationMethod || (InterpolationMethod = {}));\nlet wasmCropAndResize;\nfunction setup(backend) {\n  wasmCropAndResize = backend.wasm.cwrap(CropAndResize, null /*void*/, ['number', 'number', 'number', 'number', 'array', 'number', 'number', 'number', 'number', 'number' // out id\n  ]);\n}\n\nfunction cropAndResize(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    method,\n    extrapolationValue,\n    cropSize\n  } = attrs;\n  const {\n    image,\n    boxes,\n    boxInd\n  } = inputs;\n  const numBoxes = boxes.shape[0];\n  const [cropHeight, cropWidth] = cropSize;\n  const outShape = [numBoxes, cropHeight, cropWidth, image.shape[3]];\n  let imagesData = backend.dataIdMap.get(image.dataId);\n  let castedData;\n  if (image.dtype !== 'float32') {\n    castedData = cast({\n      backend,\n      inputs: {\n        x: image\n      },\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    imagesData = backend.dataIdMap.get(castedData.dataId);\n  }\n  const imagesId = imagesData.id;\n  const boxesId = backend.dataIdMap.get(boxes.dataId).id;\n  const boxIndId = backend.dataIdMap.get(boxInd.dataId).id;\n  const out = backend.makeOutput(outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const imagesShapeBytes = new Uint8Array(new Int32Array(image.shape).buffer);\n  wasmCropAndResize(imagesId, boxesId, boxIndId, numBoxes, imagesShapeBytes, cropHeight, cropWidth, InterpolationMethod[method], extrapolationValue, outId);\n  if (castedData != null) {\n    backend.disposeData(castedData.dataId);\n  }\n  return out;\n}\nexport const cropAndResizeConfig = {\n  kernelName: CropAndResize,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: cropAndResize\n};","map":{"version":3,"sources":["../../src/kernels/CropAndResize.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { CropAndResize } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\n// Must match enum in CropAndResize.cc\nvar InterpolationMethod;\n(function (InterpolationMethod) {\n    InterpolationMethod[InterpolationMethod[\"bilinear\"] = 0] = \"bilinear\";\n    InterpolationMethod[InterpolationMethod[\"nearest\"] = 1] = \"nearest\";\n})(InterpolationMethod || (InterpolationMethod = {}));\nlet wasmCropAndResize;\nfunction setup(backend) {\n    wasmCropAndResize = backend.wasm.cwrap(CropAndResize, null /*void*/, [\n        'number',\n        'number',\n        'number',\n        'number',\n        'array',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number' // out id\n    ]);\n}\nfunction cropAndResize(args) {\n    const { backend, inputs, attrs } = args;\n    const { method, extrapolationValue, cropSize } = attrs;\n    const { image, boxes, boxInd } = inputs;\n    const numBoxes = boxes.shape[0];\n    const [cropHeight, cropWidth] = cropSize;\n    const outShape = [numBoxes, cropHeight, cropWidth, image.shape[3]];\n    let imagesData = backend.dataIdMap.get(image.dataId);\n    let castedData;\n    if (image.dtype !== 'float32') {\n        castedData = cast({ backend, inputs: { x: image }, attrs: { dtype: 'float32' } });\n        imagesData = backend.dataIdMap.get(castedData.dataId);\n    }\n    const imagesId = imagesData.id;\n    const boxesId = backend.dataIdMap.get(boxes.dataId).id;\n    const boxIndId = backend.dataIdMap.get(boxInd.dataId).id;\n    const out = backend.makeOutput(outShape, 'float32');\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    const imagesShapeBytes = new Uint8Array(new Int32Array(image.shape).buffer);\n    wasmCropAndResize(imagesId, boxesId, boxIndId, numBoxes, imagesShapeBytes, cropHeight, cropWidth, InterpolationMethod[method], extrapolationValue, outId);\n    if (castedData != null) {\n        backend.disposeData(castedData.dataId);\n    }\n    return out;\n}\nexport const cropAndResizeConfig = {\n    kernelName: CropAndResize,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: cropAndResize\n};\n//# sourceMappingURL=CropAndResize.js.map"]},"metadata":{},"sourceType":"module"}