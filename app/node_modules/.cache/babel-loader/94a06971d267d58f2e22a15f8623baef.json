{"ast":null,"code":"import { bitAndBigNumber } from '../../utils/bignumber/bitwise';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { createAlgorithm06 } from '../../type/matrix/utils/algorithm06';\nimport { factory } from '../../utils/factory';\nimport { bitAndNumber } from '../../plain/number';\nvar name = 'bitAnd';\nvar dependencies = ['typed', 'matrix', 'equalScalar'];\nexport var createBitAnd = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    equalScalar = _ref.equalScalar;\n  var algorithm02 = createAlgorithm02({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm06 = createAlgorithm06({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm11 = createAlgorithm11({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Bitwise AND two values, `x & y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.bitAnd(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitAnd(53, 131)               // returns number 1\n   *\n   *    math.bitAnd([1, 12, 31], 42)       // returns Array [0, 8, 10]\n   *\n   * See also:\n   *\n   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to and\n   * @param  {number | BigNumber | Array | Matrix} y Second value to and\n   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`\n   */\n\n  return typed(name, {\n    'number, number': bitAndNumber,\n    'BigNumber, BigNumber': bitAndBigNumber,\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm06(x, y, this, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm02(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm11(y, x, this, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});","map":{"version":3,"names":["bitAndBigNumber","createAlgorithm02","createAlgorithm11","createAlgorithm13","createAlgorithm14","createAlgorithm06","factory","bitAndNumber","name","dependencies","createBitAnd","_ref","typed","matrix","equalScalar","algorithm02","algorithm06","algorithm11","algorithm13","algorithm14","SparseMatrixSparseMatrix","x","y","SparseMatrixDenseMatrix","DenseMatrixSparseMatrix","DenseMatrixDenseMatrix","ArrayArray","valueOf","ArrayMatrix","MatrixArray","SparseMatrixAny","DenseMatrixAny","anySparseMatrix","anyDenseMatrix","ArrayAny","anyArray"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/P/temp/app/node_modules/mathjs/es/function/bitwise/bitAnd.js"],"sourcesContent":["import { bitAndBigNumber } from '../../utils/bignumber/bitwise';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { createAlgorithm06 } from '../../type/matrix/utils/algorithm06';\nimport { factory } from '../../utils/factory';\nimport { bitAndNumber } from '../../plain/number';\nvar name = 'bitAnd';\nvar dependencies = ['typed', 'matrix', 'equalScalar'];\nexport var createBitAnd = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      equalScalar = _ref.equalScalar;\n  var algorithm02 = createAlgorithm02({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm06 = createAlgorithm06({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm11 = createAlgorithm11({\n    typed: typed,\n    equalScalar: equalScalar\n  });\n  var algorithm13 = createAlgorithm13({\n    typed: typed\n  });\n  var algorithm14 = createAlgorithm14({\n    typed: typed\n  });\n  /**\n   * Bitwise AND two values, `x & y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.bitAnd(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitAnd(53, 131)               // returns number 1\n   *\n   *    math.bitAnd([1, 12, 31], 42)       // returns Array [0, 8, 10]\n   *\n   * See also:\n   *\n   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to and\n   * @param  {number | BigNumber | Array | Matrix} y Second value to and\n   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`\n   */\n\n  return typed(name, {\n    'number, number': bitAndNumber,\n    'BigNumber, BigNumber': bitAndBigNumber,\n    'SparseMatrix, SparseMatrix': function SparseMatrixSparseMatrix(x, y) {\n      return algorithm06(x, y, this, false);\n    },\n    'SparseMatrix, DenseMatrix': function SparseMatrixDenseMatrix(x, y) {\n      return algorithm02(y, x, this, true);\n    },\n    'DenseMatrix, SparseMatrix': function DenseMatrixSparseMatrix(x, y) {\n      return algorithm02(x, y, this, false);\n    },\n    'DenseMatrix, DenseMatrix': function DenseMatrixDenseMatrix(x, y) {\n      return algorithm13(x, y, this);\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // use matrix implementation\n      return this(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function ArrayMatrix(x, y) {\n      // use matrix implementation\n      return this(matrix(x), y);\n    },\n    'Matrix, Array': function MatrixArray(x, y) {\n      // use matrix implementation\n      return this(x, matrix(y));\n    },\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return algorithm11(y, x, this, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return algorithm14(y, x, this, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});"],"mappings":"AAAA,SAASA,eAAe,QAAQ,+BAA+B;AAC/D,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,YAAY,QAAQ,oBAAoB;AACjD,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,CAAC;AACrD,OAAO,IAAIC,YAAY,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACnF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,MAAM,GAAGF,IAAI,CAACE,MAAM;IACpBC,WAAW,GAAGH,IAAI,CAACG,WAAW;EAClC,IAAIC,WAAW,GAAGd,iBAAiB,CAAC;IAClCW,KAAK,EAAEA,KAAK;IACZE,WAAW,EAAEA;EACf,CAAC,CAAC;EACF,IAAIE,WAAW,GAAGX,iBAAiB,CAAC;IAClCO,KAAK,EAAEA,KAAK;IACZE,WAAW,EAAEA;EACf,CAAC,CAAC;EACF,IAAIG,WAAW,GAAGf,iBAAiB,CAAC;IAClCU,KAAK,EAAEA,KAAK;IACZE,WAAW,EAAEA;EACf,CAAC,CAAC;EACF,IAAII,WAAW,GAAGf,iBAAiB,CAAC;IAClCS,KAAK,EAAEA;EACT,CAAC,CAAC;EACF,IAAIO,WAAW,GAAGf,iBAAiB,CAAC;IAClCQ,KAAK,EAAEA;EACT,CAAC,CAAC;EACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,OAAOA,KAAK,CAACJ,IAAI,EAAE;IACjB,gBAAgB,EAAED,YAAY;IAC9B,sBAAsB,EAAEP,eAAe;IACvC,4BAA4B,EAAE,SAASoB,wBAAwB,CAACC,CAAC,EAAEC,CAAC,EAAE;MACpE,OAAON,WAAW,CAACK,CAAC,EAAEC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC;IACvC,CAAC;IACD,2BAA2B,EAAE,SAASC,uBAAuB,CAACF,CAAC,EAAEC,CAAC,EAAE;MAClE,OAAOP,WAAW,CAACO,CAAC,EAAED,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;IACtC,CAAC;IACD,2BAA2B,EAAE,SAASG,uBAAuB,CAACH,CAAC,EAAEC,CAAC,EAAE;MAClE,OAAOP,WAAW,CAACM,CAAC,EAAEC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC;IACvC,CAAC;IACD,0BAA0B,EAAE,SAASG,sBAAsB,CAACJ,CAAC,EAAEC,CAAC,EAAE;MAChE,OAAOJ,WAAW,CAACG,CAAC,EAAEC,CAAC,EAAE,IAAI,CAAC;IAChC,CAAC;IACD,cAAc,EAAE,SAASI,UAAU,CAACL,CAAC,EAAEC,CAAC,EAAE;MACxC;MACA,OAAO,IAAI,CAACT,MAAM,CAACQ,CAAC,CAAC,EAAER,MAAM,CAACS,CAAC,CAAC,CAAC,CAACK,OAAO,EAAE;IAC7C,CAAC;IACD,eAAe,EAAE,SAASC,WAAW,CAACP,CAAC,EAAEC,CAAC,EAAE;MAC1C;MACA,OAAO,IAAI,CAACT,MAAM,CAACQ,CAAC,CAAC,EAAEC,CAAC,CAAC;IAC3B,CAAC;IACD,eAAe,EAAE,SAASO,WAAW,CAACR,CAAC,EAAEC,CAAC,EAAE;MAC1C;MACA,OAAO,IAAI,CAACD,CAAC,EAAER,MAAM,CAACS,CAAC,CAAC,CAAC;IAC3B,CAAC;IACD,mBAAmB,EAAE,SAASQ,eAAe,CAACT,CAAC,EAAEC,CAAC,EAAE;MAClD,OAAOL,WAAW,CAACI,CAAC,EAAEC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC;IACvC,CAAC;IACD,kBAAkB,EAAE,SAASS,cAAc,CAACV,CAAC,EAAEC,CAAC,EAAE;MAChD,OAAOH,WAAW,CAACE,CAAC,EAAEC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC;IACvC,CAAC;IACD,mBAAmB,EAAE,SAASU,eAAe,CAACX,CAAC,EAAEC,CAAC,EAAE;MAClD,OAAOL,WAAW,CAACK,CAAC,EAAED,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;IACtC,CAAC;IACD,kBAAkB,EAAE,SAASY,cAAc,CAACZ,CAAC,EAAEC,CAAC,EAAE;MAChD,OAAOH,WAAW,CAACG,CAAC,EAAED,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;IACtC,CAAC;IACD,YAAY,EAAE,SAASa,QAAQ,CAACb,CAAC,EAAEC,CAAC,EAAE;MACpC;MACA,OAAOH,WAAW,CAACN,MAAM,CAACQ,CAAC,CAAC,EAAEC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAACK,OAAO,EAAE;IACzD,CAAC;IACD,YAAY,EAAE,SAASQ,QAAQ,CAACd,CAAC,EAAEC,CAAC,EAAE;MACpC;MACA,OAAOH,WAAW,CAACN,MAAM,CAACS,CAAC,CAAC,EAAED,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,CAACM,OAAO,EAAE;IACxD;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module"}