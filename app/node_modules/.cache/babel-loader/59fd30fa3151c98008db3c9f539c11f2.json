{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { deprecationWarn } from '../globals';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertShapesMatch } from '../util';\nimport { equal } from './equal';\nimport { greater } from './greater';\nimport { greaterEqual } from './greater_equal';\nimport { less } from './less';\nimport { lessEqual } from './less_equal';\nimport { notEqual } from './not_equal';\nimport { op } from './operation';\n/**\n * @deprecated\n * Strict version of `tf.notEqual` that forces `a` and `b` to be of the same\n * shape.\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same shape and dtype as\n *     `a`.\n */\nfunction notEqualStrict_(a, b) {\n  deprecationWarn('strict variants of ops have been deprecated ' + 'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'notEqualStrict');\n  const $b = convertToTensor(b, 'b', 'notEqualStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in notEqualStrict: ');\n  return notEqual($a, $b);\n}\n/**\n * @deprecated\n * Strict version of `tf.less` that forces `a` and `b` to be of the same\n * shape.\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same shape and dtype as\n *     `a`.\n */\nfunction lessStrict_(a, b) {\n  deprecationWarn('strict variants of ops have been deprecated ' + 'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'lessStrict');\n  const $b = convertToTensor(b, 'b', 'lessStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in lessStrict: ');\n  return less($a, $b);\n}\nfunction equalStrict_(a, b) {\n  deprecationWarn('strict variants of ops have been deprecated ' + 'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'equalStrict');\n  const $b = convertToTensor(b, 'b', 'equalStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in equalStrict: ');\n  return equal($a, $b);\n}\nfunction lessEqualStrict_(a, b) {\n  deprecationWarn('strict variants of ops have been deprecated ' + 'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'lessEqualStrict');\n  const $b = convertToTensor(b, 'b', 'lessEqualStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in lessEqualStrict: ');\n  return lessEqual($a, $b);\n}\nfunction greaterStrict_(a, b) {\n  deprecationWarn('strict variants of ops have been deprecated ' + 'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'greaterStrict');\n  const $b = convertToTensor(b, 'b', 'greaterStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in greaterStrict: ');\n  return greater($a, $b);\n}\nfunction greaterEqualStrict_(a, b) {\n  deprecationWarn('strict variants of ops have been deprecated ' + 'and will be removed in future');\n  const $a = convertToTensor(a, 'a', 'greaterEqualStrict');\n  const $b = convertToTensor(b, 'b', 'greaterEqualStrict');\n  assertShapesMatch($a.shape, $b.shape, 'Error in greaterEqualStrict: ');\n  return greaterEqual($a, $b);\n}\nexport const equalStrict = op({\n  equalStrict_\n});\nexport const greaterEqualStrict = op({\n  greaterEqualStrict_\n});\nexport const greaterStrict = op({\n  greaterStrict_\n});\nexport const lessEqualStrict = op({\n  lessEqualStrict_\n});\nexport const lessStrict = op({\n  lessStrict_\n});\nexport const notEqualStrict = op({\n  notEqualStrict_\n});","map":{"version":3,"sources":["../../src/ops/compare.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { deprecationWarn } from '../globals';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertShapesMatch } from '../util';\nimport { equal } from './equal';\nimport { greater } from './greater';\nimport { greaterEqual } from './greater_equal';\nimport { less } from './less';\nimport { lessEqual } from './less_equal';\nimport { notEqual } from './not_equal';\nimport { op } from './operation';\n/**\n * @deprecated\n * Strict version of `tf.notEqual` that forces `a` and `b` to be of the same\n * shape.\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same shape and dtype as\n *     `a`.\n */\nfunction notEqualStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'notEqualStrict');\n    const $b = convertToTensor(b, 'b', 'notEqualStrict');\n    assertShapesMatch($a.shape, $b.shape, 'Error in notEqualStrict: ');\n    return notEqual($a, $b);\n}\n/**\n * @deprecated\n * Strict version of `tf.less` that forces `a` and `b` to be of the same\n * shape.\n *\n * @param a The first input tensor.\n * @param b The second input tensor. Must have the same shape and dtype as\n *     `a`.\n */\nfunction lessStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'lessStrict');\n    const $b = convertToTensor(b, 'b', 'lessStrict');\n    assertShapesMatch($a.shape, $b.shape, 'Error in lessStrict: ');\n    return less($a, $b);\n}\nfunction equalStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'equalStrict');\n    const $b = convertToTensor(b, 'b', 'equalStrict');\n    assertShapesMatch($a.shape, $b.shape, 'Error in equalStrict: ');\n    return equal($a, $b);\n}\nfunction lessEqualStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'lessEqualStrict');\n    const $b = convertToTensor(b, 'b', 'lessEqualStrict');\n    assertShapesMatch($a.shape, $b.shape, 'Error in lessEqualStrict: ');\n    return lessEqual($a, $b);\n}\nfunction greaterStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'greaterStrict');\n    const $b = convertToTensor(b, 'b', 'greaterStrict');\n    assertShapesMatch($a.shape, $b.shape, 'Error in greaterStrict: ');\n    return greater($a, $b);\n}\nfunction greaterEqualStrict_(a, b) {\n    deprecationWarn('strict variants of ops have been deprecated ' +\n        'and will be removed in future');\n    const $a = convertToTensor(a, 'a', 'greaterEqualStrict');\n    const $b = convertToTensor(b, 'b', 'greaterEqualStrict');\n    assertShapesMatch($a.shape, $b.shape, 'Error in greaterEqualStrict: ');\n    return greaterEqual($a, $b);\n}\nexport const equalStrict = op({ equalStrict_ });\nexport const greaterEqualStrict = op({ greaterEqualStrict_ });\nexport const greaterStrict = op({ greaterStrict_ });\nexport const lessEqualStrict = op({ lessEqualStrict_ });\nexport const lessStrict = op({ lessStrict_ });\nexport const notEqualStrict = op({ notEqualStrict_ });\n//# sourceMappingURL=compare.js.map"]},"metadata":{},"sourceType":"module"}