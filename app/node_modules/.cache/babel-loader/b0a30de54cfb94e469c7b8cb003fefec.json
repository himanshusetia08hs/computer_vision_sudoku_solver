{"ast":null,"code":"import { clone } from '../../utils/object';\nimport { factory } from '../../utils/factory';\nimport { format } from '../../utils/string';\nvar name = 'eigs';\nvar dependencies = ['config', 'typed', 'matrix', 'addScalar', 'equal', 'subtract', 'abs', 'atan', 'cos', 'sin', 'multiplyScalar', 'inv', 'bignumber', 'multiply', 'add'];\nexport var createEigs = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var config = _ref.config,\n    typed = _ref.typed,\n    matrix = _ref.matrix,\n    addScalar = _ref.addScalar,\n    subtract = _ref.subtract,\n    equal = _ref.equal,\n    abs = _ref.abs,\n    atan = _ref.atan,\n    cos = _ref.cos,\n    sin = _ref.sin,\n    multiplyScalar = _ref.multiplyScalar,\n    inv = _ref.inv,\n    bignumber = _ref.bignumber,\n    multiply = _ref.multiply,\n    add = _ref.add;\n\n  /**\n   * Compute eigenvalue and eigenvector of a real symmetric matrix.\n   * Only applicable to two dimensional symmetric matrices. Uses Jacobi\n   * Algorithm. Matrix containing mixed type ('number', 'bignumber', 'fraction')\n   * of elements are not supported. Input matrix or 2D array should contain all elements\n   * of either 'number', 'bignumber' or 'fraction' type. For 'number' and 'fraction', the\n   * eigenvalues are of 'number' type. For 'bignumber' the eigenvalues are of ''bignumber' type.\n   * Eigenvectors are always of 'number' type.\n   *\n   * Syntax:\n   *\n   *     math.eigs(x)\n   *\n   * Examples:\n   *\n   *     const H = [[5, 2.3], [2.3, 1]]\n   *     const ans = math.eigs(H) // returns {values: [E1,E2...sorted], vectors: [v1,v2.... corresponding vectors as columns]}\n   *     const E = ans.values\n   *     const U = ans.vectors\n   *     math.multiply(H, math.column(U, 0)) // returns math.multiply(E[0], math.column(U, 0))\n   *     const UTxHxU = math.multiply(math.transpose(U), H, U) // rotates H to the eigen-representation\n   *     E[0] == UTxHxU[0][0]  // returns true\n   * See also:\n   *\n   *     inv\n   *\n   * @param {Array | Matrix} x  Matrix to be diagonalized\n   * @return {{values: Array, vectors: Array} | {values: Matrix, vectors: Matrix}} Object containing eigenvalues (Array or Matrix) and eigenvectors (2D Array/Matrix with eigenvectors as columns).\n   */\n  return typed('eigs', {\n    Array: function Array(x) {\n      // check array size\n      var mat = matrix(x);\n      var size = mat.size();\n      if (size.length !== 2 || size[0] !== size[1]) {\n        throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n      } // use dense 2D matrix implementation\n\n      var ans = checkAndSubmit(mat, size[0]);\n      return {\n        values: ans[0],\n        vectors: ans[1]\n      };\n    },\n    Matrix: function Matrix(x) {\n      // use dense 2D array implementation\n      // dense matrix\n      var size = x.size();\n      if (size.length !== 2 || size[0] !== size[1]) {\n        throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n      }\n      var ans = checkAndSubmit(x, size[0]);\n      return {\n        values: matrix(ans[0]),\n        vectors: matrix(ans[1])\n      };\n    }\n  }); // Is the matrix\n  // symmetric ?\n\n  function isSymmetric(x, n) {\n    for (var i = 0; i < n; i++) {\n      for (var j = i; j < n; j++) {\n        // not symmtric\n        if (!equal(x[i][j], x[j][i])) {\n          throw new TypeError('Input matrix is not symmetric');\n        }\n      }\n    }\n  } // check input for possible problems\n  // and perform diagonalization efficiently for\n  // specific type of number\n\n  function checkAndSubmit(x, n) {\n    var type = x.datatype(); // type check\n\n    if (type === undefined) {\n      type = x.getDataType();\n    }\n    if (type !== 'number' && type !== 'BigNumber' && type !== 'Fraction') {\n      if (type === 'mixed') {\n        throw new TypeError('Mixed matrix element type is not supported');\n      } else {\n        throw new TypeError('Matrix element type not supported (' + type + ')');\n      }\n    } else {\n      isSymmetric(x.toArray(), n);\n    } // perform efficient calculation for 'numbers'\n\n    if (type === 'number') {\n      return diag(x.toArray());\n    } else if (type === 'Fraction') {\n      var xArr = x.toArray(); // convert fraction to numbers\n\n      for (var i = 0; i < n; i++) {\n        for (var j = i; j < n; j++) {\n          xArr[i][j] = xArr[i][j].valueOf();\n          xArr[j][i] = xArr[i][j];\n        }\n      }\n      return diag(x.toArray());\n    } else if (type === 'BigNumber') {\n      return diagBig(x.toArray());\n    }\n  } // diagonalization implementation for number (efficient)\n\n  function diag(x) {\n    var N = x.length;\n    var e0 = Math.abs(config.epsilon / N);\n    var psi;\n    var Sij = new Array(N); // Sij is Identity Matrix\n\n    for (var i = 0; i < N; i++) {\n      Sij[i] = createArray(N, 0);\n      Sij[i][i] = 1.0;\n    } // initial error\n\n    var Vab = getAij(x);\n    while (Math.abs(Vab[1]) >= Math.abs(e0)) {\n      var _i = Vab[0][0];\n      var j = Vab[0][1];\n      psi = getTheta(x[_i][_i], x[j][j], x[_i][j]);\n      x = x1(x, psi, _i, j);\n      Sij = Sij1(Sij, psi, _i, j);\n      Vab = getAij(x);\n    }\n    var Ei = createArray(N, 0); // eigenvalues\n\n    for (var _i2 = 0; _i2 < N; _i2++) {\n      Ei[_i2] = x[_i2][_i2];\n    }\n    return sorting(clone(Ei), clone(Sij));\n  } // diagonalization implementation for bigNumber\n\n  function diagBig(x) {\n    var N = x.length;\n    var e0 = abs(config.epsilon / N);\n    var psi;\n    var Sij = new Array(N); // Sij is Identity Matrix\n\n    for (var i = 0; i < N; i++) {\n      Sij[i] = createArray(N, 0);\n      Sij[i][i] = 1.0;\n    } // initial error\n\n    var Vab = getAijBig(x);\n    while (abs(Vab[1]) >= abs(e0)) {\n      var _i3 = Vab[0][0];\n      var j = Vab[0][1];\n      psi = getThetaBig(x[_i3][_i3], x[j][j], x[_i3][j]);\n      x = x1Big(x, psi, _i3, j);\n      Sij = Sij1Big(Sij, psi, _i3, j);\n      Vab = getAijBig(x);\n    }\n    var Ei = createArray(N, 0); // eigenvalues\n\n    for (var _i4 = 0; _i4 < N; _i4++) {\n      Ei[_i4] = x[_i4][_i4];\n    } // return [clone(Ei), clone(Sij)]\n\n    return sorting(clone(Ei), clone(Sij));\n  } // get angle\n\n  function getTheta(aii, ajj, aij) {\n    var denom = ajj - aii;\n    if (Math.abs(denom) <= config.epsilon) {\n      return Math.PI / 4;\n    } else {\n      return 0.5 * Math.atan(2 * aij / (ajj - aii));\n    }\n  } // get angle\n\n  function getThetaBig(aii, ajj, aij) {\n    var denom = subtract(ajj, aii);\n    if (abs(denom) <= config.epsilon) {\n      return bignumber(-1).acos().div(4);\n    } else {\n      return multiplyScalar(0.5, atan(multiply(2, aij, inv(denom))));\n    }\n  } // update eigvec\n\n  function Sij1(Sij, theta, i, j) {\n    var N = Sij.length;\n    var c = Math.cos(theta);\n    var s = Math.sin(theta);\n    var Ski = createArray(N, 0);\n    var Skj = createArray(N, 0);\n    for (var k = 0; k < N; k++) {\n      Ski[k] = c * Sij[k][i] - s * Sij[k][j];\n      Skj[k] = s * Sij[k][i] + c * Sij[k][j];\n    }\n    for (var _k = 0; _k < N; _k++) {\n      Sij[_k][i] = Ski[_k];\n      Sij[_k][j] = Skj[_k];\n    }\n    return Sij;\n  } // update eigvec for overlap\n\n  function Sij1Big(Sij, theta, i, j) {\n    var N = Sij.length;\n    var c = cos(theta);\n    var s = sin(theta);\n    var Ski = createArray(N, bignumber(0));\n    var Skj = createArray(N, bignumber(0));\n    for (var k = 0; k < N; k++) {\n      Ski[k] = subtract(multiplyScalar(c, Sij[k][i]), multiplyScalar(s, Sij[k][j]));\n      Skj[k] = addScalar(multiplyScalar(s, Sij[k][i]), multiplyScalar(c, Sij[k][j]));\n    }\n    for (var _k2 = 0; _k2 < N; _k2++) {\n      Sij[_k2][i] = Ski[_k2];\n      Sij[_k2][j] = Skj[_k2];\n    }\n    return Sij;\n  } // update matrix\n\n  function x1Big(Hij, theta, i, j) {\n    var N = Hij.length;\n    var c = bignumber(cos(theta));\n    var s = bignumber(sin(theta));\n    var c2 = multiplyScalar(c, c);\n    var s2 = multiplyScalar(s, s);\n    var Aki = createArray(N, bignumber(0));\n    var Akj = createArray(N, bignumber(0)); // 2cs Hij\n\n    var csHij = multiply(bignumber(2), c, s, Hij[i][j]); //  Aii\n\n    var Aii = addScalar(subtract(multiplyScalar(c2, Hij[i][i]), csHij), multiplyScalar(s2, Hij[j][j]));\n    var Ajj = add(multiplyScalar(s2, Hij[i][i]), csHij, multiplyScalar(c2, Hij[j][j])); // 0  to i\n\n    for (var k = 0; k < N; k++) {\n      Aki[k] = subtract(multiplyScalar(c, Hij[i][k]), multiplyScalar(s, Hij[j][k]));\n      Akj[k] = addScalar(multiplyScalar(s, Hij[i][k]), multiplyScalar(c, Hij[j][k]));\n    } // Modify Hij\n\n    Hij[i][i] = Aii;\n    Hij[j][j] = Ajj;\n    Hij[i][j] = bignumber(0);\n    Hij[j][i] = bignumber(0); // 0  to i\n\n    for (var _k3 = 0; _k3 < N; _k3++) {\n      if (_k3 !== i && _k3 !== j) {\n        Hij[i][_k3] = Aki[_k3];\n        Hij[_k3][i] = Aki[_k3];\n        Hij[j][_k3] = Akj[_k3];\n        Hij[_k3][j] = Akj[_k3];\n      }\n    }\n    return Hij;\n  } // update matrix\n\n  function x1(Hij, theta, i, j) {\n    var N = Hij.length;\n    var c = Math.cos(theta);\n    var s = Math.sin(theta);\n    var c2 = c * c;\n    var s2 = s * s;\n    var Aki = createArray(N, 0);\n    var Akj = createArray(N, 0); //  Aii\n\n    var Aii = c2 * Hij[i][i] - 2 * c * s * Hij[i][j] + s2 * Hij[j][j];\n    var Ajj = s2 * Hij[i][i] + 2 * c * s * Hij[i][j] + c2 * Hij[j][j]; // 0  to i\n\n    for (var k = 0; k < N; k++) {\n      Aki[k] = c * Hij[i][k] - s * Hij[j][k];\n      Akj[k] = s * Hij[i][k] + c * Hij[j][k];\n    } // Modify Hij\n\n    Hij[i][i] = Aii;\n    Hij[j][j] = Ajj;\n    Hij[i][j] = 0;\n    Hij[j][i] = 0; // 0  to i\n\n    for (var _k4 = 0; _k4 < N; _k4++) {\n      if (_k4 !== i && _k4 !== j) {\n        Hij[i][_k4] = Aki[_k4];\n        Hij[_k4][i] = Aki[_k4];\n        Hij[j][_k4] = Akj[_k4];\n        Hij[_k4][j] = Akj[_k4];\n      }\n    }\n    return Hij;\n  } // get max off-diagonal value from Upper Diagonal\n\n  function getAij(Mij) {\n    var N = Mij.length;\n    var maxMij = 0;\n    var maxIJ = [0, 1];\n    for (var i = 0; i < N; i++) {\n      for (var j = i + 1; j < N; j++) {\n        if (Math.abs(maxMij) < Math.abs(Mij[i][j])) {\n          maxMij = Math.abs(Mij[i][j]);\n          maxIJ = [i, j];\n        }\n      }\n    }\n    return [maxIJ, maxMij];\n  } // get max off-diagonal value from Upper Diagonal\n\n  function getAijBig(Mij) {\n    var N = Mij.length;\n    var maxMij = 0;\n    var maxIJ = [0, 1];\n    for (var i = 0; i < N; i++) {\n      for (var j = i + 1; j < N; j++) {\n        if (abs(maxMij) < abs(Mij[i][j])) {\n          maxMij = abs(Mij[i][j]);\n          maxIJ = [i, j];\n        }\n      }\n    }\n    return [maxIJ, maxMij];\n  } // sort results\n\n  function sorting(E, S) {\n    var N = E.length;\n    var Ef = Array(N);\n    var Sf = Array(N);\n    for (var k = 0; k < N; k++) {\n      Sf[k] = Array(N);\n    }\n    for (var i = 0; i < N; i++) {\n      var minID = 0;\n      var minE = E[0];\n      for (var j = 0; j < E.length; j++) {\n        if (E[j] < minE) {\n          minID = j;\n          minE = E[minID];\n        }\n      }\n      Ef[i] = E.splice(minID, 1)[0];\n      for (var _k5 = 0; _k5 < N; _k5++) {\n        Sf[_k5][i] = S[_k5][minID];\n        S[_k5].splice(minID, 1);\n      }\n    }\n    return [clone(Ef), clone(Sf)];\n  }\n  /**\n   * Create an array of a certain size and fill all items with an initial value\n   * @param {number} size\n   * @param {number} value\n   * @return {number[]}\n   */\n\n  function createArray(size, value) {\n    // TODO: as soon as all browsers support Array.fill, use that instead (IE doesn't support it)\n    var array = new Array(size);\n    for (var i = 0; i < size; i++) {\n      array[i] = value;\n    }\n    return array;\n  }\n});","map":{"version":3,"names":["clone","factory","format","name","dependencies","createEigs","_ref","config","typed","matrix","addScalar","subtract","equal","abs","atan","cos","sin","multiplyScalar","inv","bignumber","multiply","add","Array","x","mat","size","length","RangeError","ans","checkAndSubmit","values","vectors","Matrix","isSymmetric","n","i","j","TypeError","type","datatype","undefined","getDataType","toArray","diag","xArr","valueOf","diagBig","N","e0","Math","epsilon","psi","Sij","createArray","Vab","getAij","_i","getTheta","x1","Sij1","Ei","_i2","sorting","getAijBig","_i3","getThetaBig","x1Big","Sij1Big","_i4","aii","ajj","aij","denom","PI","acos","div","theta","c","s","Ski","Skj","k","_k","_k2","Hij","c2","s2","Aki","Akj","csHij","Aii","Ajj","_k3","_k4","Mij","maxMij","maxIJ","E","S","Ef","Sf","minID","minE","splice","_k5","value","array"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/P/temp/app/node_modules/mathjs/es/function/matrix/eigs.js"],"sourcesContent":["import { clone } from '../../utils/object';\nimport { factory } from '../../utils/factory';\nimport { format } from '../../utils/string';\nvar name = 'eigs';\nvar dependencies = ['config', 'typed', 'matrix', 'addScalar', 'equal', 'subtract', 'abs', 'atan', 'cos', 'sin', 'multiplyScalar', 'inv', 'bignumber', 'multiply', 'add'];\nexport var createEigs = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var config = _ref.config,\n      typed = _ref.typed,\n      matrix = _ref.matrix,\n      addScalar = _ref.addScalar,\n      subtract = _ref.subtract,\n      equal = _ref.equal,\n      abs = _ref.abs,\n      atan = _ref.atan,\n      cos = _ref.cos,\n      sin = _ref.sin,\n      multiplyScalar = _ref.multiplyScalar,\n      inv = _ref.inv,\n      bignumber = _ref.bignumber,\n      multiply = _ref.multiply,\n      add = _ref.add;\n\n  /**\n   * Compute eigenvalue and eigenvector of a real symmetric matrix.\n   * Only applicable to two dimensional symmetric matrices. Uses Jacobi\n   * Algorithm. Matrix containing mixed type ('number', 'bignumber', 'fraction')\n   * of elements are not supported. Input matrix or 2D array should contain all elements\n   * of either 'number', 'bignumber' or 'fraction' type. For 'number' and 'fraction', the\n   * eigenvalues are of 'number' type. For 'bignumber' the eigenvalues are of ''bignumber' type.\n   * Eigenvectors are always of 'number' type.\n   *\n   * Syntax:\n   *\n   *     math.eigs(x)\n   *\n   * Examples:\n   *\n   *     const H = [[5, 2.3], [2.3, 1]]\n   *     const ans = math.eigs(H) // returns {values: [E1,E2...sorted], vectors: [v1,v2.... corresponding vectors as columns]}\n   *     const E = ans.values\n   *     const U = ans.vectors\n   *     math.multiply(H, math.column(U, 0)) // returns math.multiply(E[0], math.column(U, 0))\n   *     const UTxHxU = math.multiply(math.transpose(U), H, U) // rotates H to the eigen-representation\n   *     E[0] == UTxHxU[0][0]  // returns true\n   * See also:\n   *\n   *     inv\n   *\n   * @param {Array | Matrix} x  Matrix to be diagonalized\n   * @return {{values: Array, vectors: Array} | {values: Matrix, vectors: Matrix}} Object containing eigenvalues (Array or Matrix) and eigenvectors (2D Array/Matrix with eigenvectors as columns).\n   */\n  return typed('eigs', {\n    Array: function Array(x) {\n      // check array size\n      var mat = matrix(x);\n      var size = mat.size();\n\n      if (size.length !== 2 || size[0] !== size[1]) {\n        throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n      } // use dense 2D matrix implementation\n\n\n      var ans = checkAndSubmit(mat, size[0]);\n      return {\n        values: ans[0],\n        vectors: ans[1]\n      };\n    },\n    Matrix: function Matrix(x) {\n      // use dense 2D array implementation\n      // dense matrix\n      var size = x.size();\n\n      if (size.length !== 2 || size[0] !== size[1]) {\n        throw new RangeError('Matrix must be square ' + '(size: ' + format(size) + ')');\n      }\n\n      var ans = checkAndSubmit(x, size[0]);\n      return {\n        values: matrix(ans[0]),\n        vectors: matrix(ans[1])\n      };\n    }\n  }); // Is the matrix\n  // symmetric ?\n\n  function isSymmetric(x, n) {\n    for (var i = 0; i < n; i++) {\n      for (var j = i; j < n; j++) {\n        // not symmtric\n        if (!equal(x[i][j], x[j][i])) {\n          throw new TypeError('Input matrix is not symmetric');\n        }\n      }\n    }\n  } // check input for possible problems\n  // and perform diagonalization efficiently for\n  // specific type of number\n\n\n  function checkAndSubmit(x, n) {\n    var type = x.datatype(); // type check\n\n    if (type === undefined) {\n      type = x.getDataType();\n    }\n\n    if (type !== 'number' && type !== 'BigNumber' && type !== 'Fraction') {\n      if (type === 'mixed') {\n        throw new TypeError('Mixed matrix element type is not supported');\n      } else {\n        throw new TypeError('Matrix element type not supported (' + type + ')');\n      }\n    } else {\n      isSymmetric(x.toArray(), n);\n    } // perform efficient calculation for 'numbers'\n\n\n    if (type === 'number') {\n      return diag(x.toArray());\n    } else if (type === 'Fraction') {\n      var xArr = x.toArray(); // convert fraction to numbers\n\n      for (var i = 0; i < n; i++) {\n        for (var j = i; j < n; j++) {\n          xArr[i][j] = xArr[i][j].valueOf();\n          xArr[j][i] = xArr[i][j];\n        }\n      }\n\n      return diag(x.toArray());\n    } else if (type === 'BigNumber') {\n      return diagBig(x.toArray());\n    }\n  } // diagonalization implementation for number (efficient)\n\n\n  function diag(x) {\n    var N = x.length;\n    var e0 = Math.abs(config.epsilon / N);\n    var psi;\n    var Sij = new Array(N); // Sij is Identity Matrix\n\n    for (var i = 0; i < N; i++) {\n      Sij[i] = createArray(N, 0);\n      Sij[i][i] = 1.0;\n    } // initial error\n\n\n    var Vab = getAij(x);\n\n    while (Math.abs(Vab[1]) >= Math.abs(e0)) {\n      var _i = Vab[0][0];\n      var j = Vab[0][1];\n      psi = getTheta(x[_i][_i], x[j][j], x[_i][j]);\n      x = x1(x, psi, _i, j);\n      Sij = Sij1(Sij, psi, _i, j);\n      Vab = getAij(x);\n    }\n\n    var Ei = createArray(N, 0); // eigenvalues\n\n    for (var _i2 = 0; _i2 < N; _i2++) {\n      Ei[_i2] = x[_i2][_i2];\n    }\n\n    return sorting(clone(Ei), clone(Sij));\n  } // diagonalization implementation for bigNumber\n\n\n  function diagBig(x) {\n    var N = x.length;\n    var e0 = abs(config.epsilon / N);\n    var psi;\n    var Sij = new Array(N); // Sij is Identity Matrix\n\n    for (var i = 0; i < N; i++) {\n      Sij[i] = createArray(N, 0);\n      Sij[i][i] = 1.0;\n    } // initial error\n\n\n    var Vab = getAijBig(x);\n\n    while (abs(Vab[1]) >= abs(e0)) {\n      var _i3 = Vab[0][0];\n      var j = Vab[0][1];\n      psi = getThetaBig(x[_i3][_i3], x[j][j], x[_i3][j]);\n      x = x1Big(x, psi, _i3, j);\n      Sij = Sij1Big(Sij, psi, _i3, j);\n      Vab = getAijBig(x);\n    }\n\n    var Ei = createArray(N, 0); // eigenvalues\n\n    for (var _i4 = 0; _i4 < N; _i4++) {\n      Ei[_i4] = x[_i4][_i4];\n    } // return [clone(Ei), clone(Sij)]\n\n\n    return sorting(clone(Ei), clone(Sij));\n  } // get angle\n\n\n  function getTheta(aii, ajj, aij) {\n    var denom = ajj - aii;\n\n    if (Math.abs(denom) <= config.epsilon) {\n      return Math.PI / 4;\n    } else {\n      return 0.5 * Math.atan(2 * aij / (ajj - aii));\n    }\n  } // get angle\n\n\n  function getThetaBig(aii, ajj, aij) {\n    var denom = subtract(ajj, aii);\n\n    if (abs(denom) <= config.epsilon) {\n      return bignumber(-1).acos().div(4);\n    } else {\n      return multiplyScalar(0.5, atan(multiply(2, aij, inv(denom))));\n    }\n  } // update eigvec\n\n\n  function Sij1(Sij, theta, i, j) {\n    var N = Sij.length;\n    var c = Math.cos(theta);\n    var s = Math.sin(theta);\n    var Ski = createArray(N, 0);\n    var Skj = createArray(N, 0);\n\n    for (var k = 0; k < N; k++) {\n      Ski[k] = c * Sij[k][i] - s * Sij[k][j];\n      Skj[k] = s * Sij[k][i] + c * Sij[k][j];\n    }\n\n    for (var _k = 0; _k < N; _k++) {\n      Sij[_k][i] = Ski[_k];\n      Sij[_k][j] = Skj[_k];\n    }\n\n    return Sij;\n  } // update eigvec for overlap\n\n\n  function Sij1Big(Sij, theta, i, j) {\n    var N = Sij.length;\n    var c = cos(theta);\n    var s = sin(theta);\n    var Ski = createArray(N, bignumber(0));\n    var Skj = createArray(N, bignumber(0));\n\n    for (var k = 0; k < N; k++) {\n      Ski[k] = subtract(multiplyScalar(c, Sij[k][i]), multiplyScalar(s, Sij[k][j]));\n      Skj[k] = addScalar(multiplyScalar(s, Sij[k][i]), multiplyScalar(c, Sij[k][j]));\n    }\n\n    for (var _k2 = 0; _k2 < N; _k2++) {\n      Sij[_k2][i] = Ski[_k2];\n      Sij[_k2][j] = Skj[_k2];\n    }\n\n    return Sij;\n  } // update matrix\n\n\n  function x1Big(Hij, theta, i, j) {\n    var N = Hij.length;\n    var c = bignumber(cos(theta));\n    var s = bignumber(sin(theta));\n    var c2 = multiplyScalar(c, c);\n    var s2 = multiplyScalar(s, s);\n    var Aki = createArray(N, bignumber(0));\n    var Akj = createArray(N, bignumber(0)); // 2cs Hij\n\n    var csHij = multiply(bignumber(2), c, s, Hij[i][j]); //  Aii\n\n    var Aii = addScalar(subtract(multiplyScalar(c2, Hij[i][i]), csHij), multiplyScalar(s2, Hij[j][j]));\n    var Ajj = add(multiplyScalar(s2, Hij[i][i]), csHij, multiplyScalar(c2, Hij[j][j])); // 0  to i\n\n    for (var k = 0; k < N; k++) {\n      Aki[k] = subtract(multiplyScalar(c, Hij[i][k]), multiplyScalar(s, Hij[j][k]));\n      Akj[k] = addScalar(multiplyScalar(s, Hij[i][k]), multiplyScalar(c, Hij[j][k]));\n    } // Modify Hij\n\n\n    Hij[i][i] = Aii;\n    Hij[j][j] = Ajj;\n    Hij[i][j] = bignumber(0);\n    Hij[j][i] = bignumber(0); // 0  to i\n\n    for (var _k3 = 0; _k3 < N; _k3++) {\n      if (_k3 !== i && _k3 !== j) {\n        Hij[i][_k3] = Aki[_k3];\n        Hij[_k3][i] = Aki[_k3];\n        Hij[j][_k3] = Akj[_k3];\n        Hij[_k3][j] = Akj[_k3];\n      }\n    }\n\n    return Hij;\n  } // update matrix\n\n\n  function x1(Hij, theta, i, j) {\n    var N = Hij.length;\n    var c = Math.cos(theta);\n    var s = Math.sin(theta);\n    var c2 = c * c;\n    var s2 = s * s;\n    var Aki = createArray(N, 0);\n    var Akj = createArray(N, 0); //  Aii\n\n    var Aii = c2 * Hij[i][i] - 2 * c * s * Hij[i][j] + s2 * Hij[j][j];\n    var Ajj = s2 * Hij[i][i] + 2 * c * s * Hij[i][j] + c2 * Hij[j][j]; // 0  to i\n\n    for (var k = 0; k < N; k++) {\n      Aki[k] = c * Hij[i][k] - s * Hij[j][k];\n      Akj[k] = s * Hij[i][k] + c * Hij[j][k];\n    } // Modify Hij\n\n\n    Hij[i][i] = Aii;\n    Hij[j][j] = Ajj;\n    Hij[i][j] = 0;\n    Hij[j][i] = 0; // 0  to i\n\n    for (var _k4 = 0; _k4 < N; _k4++) {\n      if (_k4 !== i && _k4 !== j) {\n        Hij[i][_k4] = Aki[_k4];\n        Hij[_k4][i] = Aki[_k4];\n        Hij[j][_k4] = Akj[_k4];\n        Hij[_k4][j] = Akj[_k4];\n      }\n    }\n\n    return Hij;\n  } // get max off-diagonal value from Upper Diagonal\n\n\n  function getAij(Mij) {\n    var N = Mij.length;\n    var maxMij = 0;\n    var maxIJ = [0, 1];\n\n    for (var i = 0; i < N; i++) {\n      for (var j = i + 1; j < N; j++) {\n        if (Math.abs(maxMij) < Math.abs(Mij[i][j])) {\n          maxMij = Math.abs(Mij[i][j]);\n          maxIJ = [i, j];\n        }\n      }\n    }\n\n    return [maxIJ, maxMij];\n  } // get max off-diagonal value from Upper Diagonal\n\n\n  function getAijBig(Mij) {\n    var N = Mij.length;\n    var maxMij = 0;\n    var maxIJ = [0, 1];\n\n    for (var i = 0; i < N; i++) {\n      for (var j = i + 1; j < N; j++) {\n        if (abs(maxMij) < abs(Mij[i][j])) {\n          maxMij = abs(Mij[i][j]);\n          maxIJ = [i, j];\n        }\n      }\n    }\n\n    return [maxIJ, maxMij];\n  } // sort results\n\n\n  function sorting(E, S) {\n    var N = E.length;\n    var Ef = Array(N);\n    var Sf = Array(N);\n\n    for (var k = 0; k < N; k++) {\n      Sf[k] = Array(N);\n    }\n\n    for (var i = 0; i < N; i++) {\n      var minID = 0;\n      var minE = E[0];\n\n      for (var j = 0; j < E.length; j++) {\n        if (E[j] < minE) {\n          minID = j;\n          minE = E[minID];\n        }\n      }\n\n      Ef[i] = E.splice(minID, 1)[0];\n\n      for (var _k5 = 0; _k5 < N; _k5++) {\n        Sf[_k5][i] = S[_k5][minID];\n\n        S[_k5].splice(minID, 1);\n      }\n    }\n\n    return [clone(Ef), clone(Sf)];\n  }\n  /**\n   * Create an array of a certain size and fill all items with an initial value\n   * @param {number} size\n   * @param {number} value\n   * @return {number[]}\n   */\n\n\n  function createArray(size, value) {\n    // TODO: as soon as all browsers support Array.fill, use that instead (IE doesn't support it)\n    var array = new Array(size);\n\n    for (var i = 0; i < size; i++) {\n      array[i] = value;\n    }\n\n    return array;\n  }\n});"],"mappings":"AAAA,SAASA,KAAK,QAAQ,oBAAoB;AAC1C,SAASC,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,MAAM,QAAQ,oBAAoB;AAC3C,IAAIC,IAAI,GAAG,MAAM;AACjB,IAAIC,YAAY,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,gBAAgB,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,EAAE,KAAK,CAAC;AACxK,OAAO,IAAIC,UAAU,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACjF,IAAIC,MAAM,GAAGD,IAAI,CAACC,MAAM;IACpBC,KAAK,GAAGF,IAAI,CAACE,KAAK;IAClBC,MAAM,GAAGH,IAAI,CAACG,MAAM;IACpBC,SAAS,GAAGJ,IAAI,CAACI,SAAS;IAC1BC,QAAQ,GAAGL,IAAI,CAACK,QAAQ;IACxBC,KAAK,GAAGN,IAAI,CAACM,KAAK;IAClBC,GAAG,GAAGP,IAAI,CAACO,GAAG;IACdC,IAAI,GAAGR,IAAI,CAACQ,IAAI;IAChBC,GAAG,GAAGT,IAAI,CAACS,GAAG;IACdC,GAAG,GAAGV,IAAI,CAACU,GAAG;IACdC,cAAc,GAAGX,IAAI,CAACW,cAAc;IACpCC,GAAG,GAAGZ,IAAI,CAACY,GAAG;IACdC,SAAS,GAAGb,IAAI,CAACa,SAAS;IAC1BC,QAAQ,GAAGd,IAAI,CAACc,QAAQ;IACxBC,GAAG,GAAGf,IAAI,CAACe,GAAG;;EAElB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOb,KAAK,CAAC,MAAM,EAAE;IACnBc,KAAK,EAAE,SAASA,KAAK,CAACC,CAAC,EAAE;MACvB;MACA,IAAIC,GAAG,GAAGf,MAAM,CAACc,CAAC,CAAC;MACnB,IAAIE,IAAI,GAAGD,GAAG,CAACC,IAAI,EAAE;MAErB,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,IAAID,IAAI,CAAC,CAAC,CAAC,KAAKA,IAAI,CAAC,CAAC,CAAC,EAAE;QAC5C,MAAM,IAAIE,UAAU,CAAC,wBAAwB,GAAG,SAAS,GAAGzB,MAAM,CAACuB,IAAI,CAAC,GAAG,GAAG,CAAC;MACjF,CAAC,CAAC;;MAGF,IAAIG,GAAG,GAAGC,cAAc,CAACL,GAAG,EAAEC,IAAI,CAAC,CAAC,CAAC,CAAC;MACtC,OAAO;QACLK,MAAM,EAAEF,GAAG,CAAC,CAAC,CAAC;QACdG,OAAO,EAAEH,GAAG,CAAC,CAAC;MAChB,CAAC;IACH,CAAC;IACDI,MAAM,EAAE,SAASA,MAAM,CAACT,CAAC,EAAE;MACzB;MACA;MACA,IAAIE,IAAI,GAAGF,CAAC,CAACE,IAAI,EAAE;MAEnB,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,IAAID,IAAI,CAAC,CAAC,CAAC,KAAKA,IAAI,CAAC,CAAC,CAAC,EAAE;QAC5C,MAAM,IAAIE,UAAU,CAAC,wBAAwB,GAAG,SAAS,GAAGzB,MAAM,CAACuB,IAAI,CAAC,GAAG,GAAG,CAAC;MACjF;MAEA,IAAIG,GAAG,GAAGC,cAAc,CAACN,CAAC,EAAEE,IAAI,CAAC,CAAC,CAAC,CAAC;MACpC,OAAO;QACLK,MAAM,EAAErB,MAAM,CAACmB,GAAG,CAAC,CAAC,CAAC,CAAC;QACtBG,OAAO,EAAEtB,MAAM,CAACmB,GAAG,CAAC,CAAC,CAAC;MACxB,CAAC;IACH;EACF,CAAC,CAAC,CAAC,CAAC;EACJ;;EAEA,SAASK,WAAW,CAACV,CAAC,EAAEW,CAAC,EAAE;IACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,CAAC,EAAEC,CAAC,EAAE,EAAE;MAC1B,KAAK,IAAIC,CAAC,GAAGD,CAAC,EAAEC,CAAC,GAAGF,CAAC,EAAEE,CAAC,EAAE,EAAE;QAC1B;QACA,IAAI,CAACxB,KAAK,CAACW,CAAC,CAACY,CAAC,CAAC,CAACC,CAAC,CAAC,EAAEb,CAAC,CAACa,CAAC,CAAC,CAACD,CAAC,CAAC,CAAC,EAAE;UAC5B,MAAM,IAAIE,SAAS,CAAC,+BAA+B,CAAC;QACtD;MACF;IACF;EACF,CAAC,CAAC;EACF;EACA;;EAGA,SAASR,cAAc,CAACN,CAAC,EAAEW,CAAC,EAAE;IAC5B,IAAII,IAAI,GAAGf,CAAC,CAACgB,QAAQ,EAAE,CAAC,CAAC;;IAEzB,IAAID,IAAI,KAAKE,SAAS,EAAE;MACtBF,IAAI,GAAGf,CAAC,CAACkB,WAAW,EAAE;IACxB;IAEA,IAAIH,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,WAAW,IAAIA,IAAI,KAAK,UAAU,EAAE;MACpE,IAAIA,IAAI,KAAK,OAAO,EAAE;QACpB,MAAM,IAAID,SAAS,CAAC,4CAA4C,CAAC;MACnE,CAAC,MAAM;QACL,MAAM,IAAIA,SAAS,CAAC,qCAAqC,GAAGC,IAAI,GAAG,GAAG,CAAC;MACzE;IACF,CAAC,MAAM;MACLL,WAAW,CAACV,CAAC,CAACmB,OAAO,EAAE,EAAER,CAAC,CAAC;IAC7B,CAAC,CAAC;;IAGF,IAAII,IAAI,KAAK,QAAQ,EAAE;MACrB,OAAOK,IAAI,CAACpB,CAAC,CAACmB,OAAO,EAAE,CAAC;IAC1B,CAAC,MAAM,IAAIJ,IAAI,KAAK,UAAU,EAAE;MAC9B,IAAIM,IAAI,GAAGrB,CAAC,CAACmB,OAAO,EAAE,CAAC,CAAC;;MAExB,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,CAAC,EAAEC,CAAC,EAAE,EAAE;QAC1B,KAAK,IAAIC,CAAC,GAAGD,CAAC,EAAEC,CAAC,GAAGF,CAAC,EAAEE,CAAC,EAAE,EAAE;UAC1BQ,IAAI,CAACT,CAAC,CAAC,CAACC,CAAC,CAAC,GAAGQ,IAAI,CAACT,CAAC,CAAC,CAACC,CAAC,CAAC,CAACS,OAAO,EAAE;UACjCD,IAAI,CAACR,CAAC,CAAC,CAACD,CAAC,CAAC,GAAGS,IAAI,CAACT,CAAC,CAAC,CAACC,CAAC,CAAC;QACzB;MACF;MAEA,OAAOO,IAAI,CAACpB,CAAC,CAACmB,OAAO,EAAE,CAAC;IAC1B,CAAC,MAAM,IAAIJ,IAAI,KAAK,WAAW,EAAE;MAC/B,OAAOQ,OAAO,CAACvB,CAAC,CAACmB,OAAO,EAAE,CAAC;IAC7B;EACF,CAAC,CAAC;;EAGF,SAASC,IAAI,CAACpB,CAAC,EAAE;IACf,IAAIwB,CAAC,GAAGxB,CAAC,CAACG,MAAM;IAChB,IAAIsB,EAAE,GAAGC,IAAI,CAACpC,GAAG,CAACN,MAAM,CAAC2C,OAAO,GAAGH,CAAC,CAAC;IACrC,IAAII,GAAG;IACP,IAAIC,GAAG,GAAG,IAAI9B,KAAK,CAACyB,CAAC,CAAC,CAAC,CAAC;;IAExB,KAAK,IAAIZ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGY,CAAC,EAAEZ,CAAC,EAAE,EAAE;MAC1BiB,GAAG,CAACjB,CAAC,CAAC,GAAGkB,WAAW,CAACN,CAAC,EAAE,CAAC,CAAC;MAC1BK,GAAG,CAACjB,CAAC,CAAC,CAACA,CAAC,CAAC,GAAG,GAAG;IACjB,CAAC,CAAC;;IAGF,IAAImB,GAAG,GAAGC,MAAM,CAAChC,CAAC,CAAC;IAEnB,OAAO0B,IAAI,CAACpC,GAAG,CAACyC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAIL,IAAI,CAACpC,GAAG,CAACmC,EAAE,CAAC,EAAE;MACvC,IAAIQ,EAAE,GAAGF,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAClB,IAAIlB,CAAC,GAAGkB,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACjBH,GAAG,GAAGM,QAAQ,CAAClC,CAAC,CAACiC,EAAE,CAAC,CAACA,EAAE,CAAC,EAAEjC,CAAC,CAACa,CAAC,CAAC,CAACA,CAAC,CAAC,EAAEb,CAAC,CAACiC,EAAE,CAAC,CAACpB,CAAC,CAAC,CAAC;MAC5Cb,CAAC,GAAGmC,EAAE,CAACnC,CAAC,EAAE4B,GAAG,EAAEK,EAAE,EAAEpB,CAAC,CAAC;MACrBgB,GAAG,GAAGO,IAAI,CAACP,GAAG,EAAED,GAAG,EAAEK,EAAE,EAAEpB,CAAC,CAAC;MAC3BkB,GAAG,GAAGC,MAAM,CAAChC,CAAC,CAAC;IACjB;IAEA,IAAIqC,EAAE,GAAGP,WAAW,CAACN,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;;IAE5B,KAAK,IAAIc,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGd,CAAC,EAAEc,GAAG,EAAE,EAAE;MAChCD,EAAE,CAACC,GAAG,CAAC,GAAGtC,CAAC,CAACsC,GAAG,CAAC,CAACA,GAAG,CAAC;IACvB;IAEA,OAAOC,OAAO,CAAC9D,KAAK,CAAC4D,EAAE,CAAC,EAAE5D,KAAK,CAACoD,GAAG,CAAC,CAAC;EACvC,CAAC,CAAC;;EAGF,SAASN,OAAO,CAACvB,CAAC,EAAE;IAClB,IAAIwB,CAAC,GAAGxB,CAAC,CAACG,MAAM;IAChB,IAAIsB,EAAE,GAAGnC,GAAG,CAACN,MAAM,CAAC2C,OAAO,GAAGH,CAAC,CAAC;IAChC,IAAII,GAAG;IACP,IAAIC,GAAG,GAAG,IAAI9B,KAAK,CAACyB,CAAC,CAAC,CAAC,CAAC;;IAExB,KAAK,IAAIZ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGY,CAAC,EAAEZ,CAAC,EAAE,EAAE;MAC1BiB,GAAG,CAACjB,CAAC,CAAC,GAAGkB,WAAW,CAACN,CAAC,EAAE,CAAC,CAAC;MAC1BK,GAAG,CAACjB,CAAC,CAAC,CAACA,CAAC,CAAC,GAAG,GAAG;IACjB,CAAC,CAAC;;IAGF,IAAImB,GAAG,GAAGS,SAAS,CAACxC,CAAC,CAAC;IAEtB,OAAOV,GAAG,CAACyC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAIzC,GAAG,CAACmC,EAAE,CAAC,EAAE;MAC7B,IAAIgB,GAAG,GAAGV,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACnB,IAAIlB,CAAC,GAAGkB,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACjBH,GAAG,GAAGc,WAAW,CAAC1C,CAAC,CAACyC,GAAG,CAAC,CAACA,GAAG,CAAC,EAAEzC,CAAC,CAACa,CAAC,CAAC,CAACA,CAAC,CAAC,EAAEb,CAAC,CAACyC,GAAG,CAAC,CAAC5B,CAAC,CAAC,CAAC;MAClDb,CAAC,GAAG2C,KAAK,CAAC3C,CAAC,EAAE4B,GAAG,EAAEa,GAAG,EAAE5B,CAAC,CAAC;MACzBgB,GAAG,GAAGe,OAAO,CAACf,GAAG,EAAED,GAAG,EAAEa,GAAG,EAAE5B,CAAC,CAAC;MAC/BkB,GAAG,GAAGS,SAAS,CAACxC,CAAC,CAAC;IACpB;IAEA,IAAIqC,EAAE,GAAGP,WAAW,CAACN,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;;IAE5B,KAAK,IAAIqB,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGrB,CAAC,EAAEqB,GAAG,EAAE,EAAE;MAChCR,EAAE,CAACQ,GAAG,CAAC,GAAG7C,CAAC,CAAC6C,GAAG,CAAC,CAACA,GAAG,CAAC;IACvB,CAAC,CAAC;;IAGF,OAAON,OAAO,CAAC9D,KAAK,CAAC4D,EAAE,CAAC,EAAE5D,KAAK,CAACoD,GAAG,CAAC,CAAC;EACvC,CAAC,CAAC;;EAGF,SAASK,QAAQ,CAACY,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAE;IAC/B,IAAIC,KAAK,GAAGF,GAAG,GAAGD,GAAG;IAErB,IAAIpB,IAAI,CAACpC,GAAG,CAAC2D,KAAK,CAAC,IAAIjE,MAAM,CAAC2C,OAAO,EAAE;MACrC,OAAOD,IAAI,CAACwB,EAAE,GAAG,CAAC;IACpB,CAAC,MAAM;MACL,OAAO,GAAG,GAAGxB,IAAI,CAACnC,IAAI,CAAC,CAAC,GAAGyD,GAAG,IAAID,GAAG,GAAGD,GAAG,CAAC,CAAC;IAC/C;EACF,CAAC,CAAC;;EAGF,SAASJ,WAAW,CAACI,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAE;IAClC,IAAIC,KAAK,GAAG7D,QAAQ,CAAC2D,GAAG,EAAED,GAAG,CAAC;IAE9B,IAAIxD,GAAG,CAAC2D,KAAK,CAAC,IAAIjE,MAAM,CAAC2C,OAAO,EAAE;MAChC,OAAO/B,SAAS,CAAC,CAAC,CAAC,CAAC,CAACuD,IAAI,EAAE,CAACC,GAAG,CAAC,CAAC,CAAC;IACpC,CAAC,MAAM;MACL,OAAO1D,cAAc,CAAC,GAAG,EAAEH,IAAI,CAACM,QAAQ,CAAC,CAAC,EAAEmD,GAAG,EAAErD,GAAG,CAACsD,KAAK,CAAC,CAAC,CAAC,CAAC;IAChE;EACF,CAAC,CAAC;;EAGF,SAASb,IAAI,CAACP,GAAG,EAAEwB,KAAK,EAAEzC,CAAC,EAAEC,CAAC,EAAE;IAC9B,IAAIW,CAAC,GAAGK,GAAG,CAAC1B,MAAM;IAClB,IAAImD,CAAC,GAAG5B,IAAI,CAAClC,GAAG,CAAC6D,KAAK,CAAC;IACvB,IAAIE,CAAC,GAAG7B,IAAI,CAACjC,GAAG,CAAC4D,KAAK,CAAC;IACvB,IAAIG,GAAG,GAAG1B,WAAW,CAACN,CAAC,EAAE,CAAC,CAAC;IAC3B,IAAIiC,GAAG,GAAG3B,WAAW,CAACN,CAAC,EAAE,CAAC,CAAC;IAE3B,KAAK,IAAIkC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlC,CAAC,EAAEkC,CAAC,EAAE,EAAE;MAC1BF,GAAG,CAACE,CAAC,CAAC,GAAGJ,CAAC,GAAGzB,GAAG,CAAC6B,CAAC,CAAC,CAAC9C,CAAC,CAAC,GAAG2C,CAAC,GAAG1B,GAAG,CAAC6B,CAAC,CAAC,CAAC7C,CAAC,CAAC;MACtC4C,GAAG,CAACC,CAAC,CAAC,GAAGH,CAAC,GAAG1B,GAAG,CAAC6B,CAAC,CAAC,CAAC9C,CAAC,CAAC,GAAG0C,CAAC,GAAGzB,GAAG,CAAC6B,CAAC,CAAC,CAAC7C,CAAC,CAAC;IACxC;IAEA,KAAK,IAAI8C,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGnC,CAAC,EAAEmC,EAAE,EAAE,EAAE;MAC7B9B,GAAG,CAAC8B,EAAE,CAAC,CAAC/C,CAAC,CAAC,GAAG4C,GAAG,CAACG,EAAE,CAAC;MACpB9B,GAAG,CAAC8B,EAAE,CAAC,CAAC9C,CAAC,CAAC,GAAG4C,GAAG,CAACE,EAAE,CAAC;IACtB;IAEA,OAAO9B,GAAG;EACZ,CAAC,CAAC;;EAGF,SAASe,OAAO,CAACf,GAAG,EAAEwB,KAAK,EAAEzC,CAAC,EAAEC,CAAC,EAAE;IACjC,IAAIW,CAAC,GAAGK,GAAG,CAAC1B,MAAM;IAClB,IAAImD,CAAC,GAAG9D,GAAG,CAAC6D,KAAK,CAAC;IAClB,IAAIE,CAAC,GAAG9D,GAAG,CAAC4D,KAAK,CAAC;IAClB,IAAIG,GAAG,GAAG1B,WAAW,CAACN,CAAC,EAAE5B,SAAS,CAAC,CAAC,CAAC,CAAC;IACtC,IAAI6D,GAAG,GAAG3B,WAAW,CAACN,CAAC,EAAE5B,SAAS,CAAC,CAAC,CAAC,CAAC;IAEtC,KAAK,IAAI8D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlC,CAAC,EAAEkC,CAAC,EAAE,EAAE;MAC1BF,GAAG,CAACE,CAAC,CAAC,GAAGtE,QAAQ,CAACM,cAAc,CAAC4D,CAAC,EAAEzB,GAAG,CAAC6B,CAAC,CAAC,CAAC9C,CAAC,CAAC,CAAC,EAAElB,cAAc,CAAC6D,CAAC,EAAE1B,GAAG,CAAC6B,CAAC,CAAC,CAAC7C,CAAC,CAAC,CAAC,CAAC;MAC7E4C,GAAG,CAACC,CAAC,CAAC,GAAGvE,SAAS,CAACO,cAAc,CAAC6D,CAAC,EAAE1B,GAAG,CAAC6B,CAAC,CAAC,CAAC9C,CAAC,CAAC,CAAC,EAAElB,cAAc,CAAC4D,CAAC,EAAEzB,GAAG,CAAC6B,CAAC,CAAC,CAAC7C,CAAC,CAAC,CAAC,CAAC;IAChF;IAEA,KAAK,IAAI+C,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGpC,CAAC,EAAEoC,GAAG,EAAE,EAAE;MAChC/B,GAAG,CAAC+B,GAAG,CAAC,CAAChD,CAAC,CAAC,GAAG4C,GAAG,CAACI,GAAG,CAAC;MACtB/B,GAAG,CAAC+B,GAAG,CAAC,CAAC/C,CAAC,CAAC,GAAG4C,GAAG,CAACG,GAAG,CAAC;IACxB;IAEA,OAAO/B,GAAG;EACZ,CAAC,CAAC;;EAGF,SAASc,KAAK,CAACkB,GAAG,EAAER,KAAK,EAAEzC,CAAC,EAAEC,CAAC,EAAE;IAC/B,IAAIW,CAAC,GAAGqC,GAAG,CAAC1D,MAAM;IAClB,IAAImD,CAAC,GAAG1D,SAAS,CAACJ,GAAG,CAAC6D,KAAK,CAAC,CAAC;IAC7B,IAAIE,CAAC,GAAG3D,SAAS,CAACH,GAAG,CAAC4D,KAAK,CAAC,CAAC;IAC7B,IAAIS,EAAE,GAAGpE,cAAc,CAAC4D,CAAC,EAAEA,CAAC,CAAC;IAC7B,IAAIS,EAAE,GAAGrE,cAAc,CAAC6D,CAAC,EAAEA,CAAC,CAAC;IAC7B,IAAIS,GAAG,GAAGlC,WAAW,CAACN,CAAC,EAAE5B,SAAS,CAAC,CAAC,CAAC,CAAC;IACtC,IAAIqE,GAAG,GAAGnC,WAAW,CAACN,CAAC,EAAE5B,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;IAExC,IAAIsE,KAAK,GAAGrE,QAAQ,CAACD,SAAS,CAAC,CAAC,CAAC,EAAE0D,CAAC,EAAEC,CAAC,EAAEM,GAAG,CAACjD,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC;;IAErD,IAAIsD,GAAG,GAAGhF,SAAS,CAACC,QAAQ,CAACM,cAAc,CAACoE,EAAE,EAAED,GAAG,CAACjD,CAAC,CAAC,CAACA,CAAC,CAAC,CAAC,EAAEsD,KAAK,CAAC,EAAExE,cAAc,CAACqE,EAAE,EAAEF,GAAG,CAAChD,CAAC,CAAC,CAACA,CAAC,CAAC,CAAC,CAAC;IAClG,IAAIuD,GAAG,GAAGtE,GAAG,CAACJ,cAAc,CAACqE,EAAE,EAAEF,GAAG,CAACjD,CAAC,CAAC,CAACA,CAAC,CAAC,CAAC,EAAEsD,KAAK,EAAExE,cAAc,CAACoE,EAAE,EAAED,GAAG,CAAChD,CAAC,CAAC,CAACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEpF,KAAK,IAAI6C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlC,CAAC,EAAEkC,CAAC,EAAE,EAAE;MAC1BM,GAAG,CAACN,CAAC,CAAC,GAAGtE,QAAQ,CAACM,cAAc,CAAC4D,CAAC,EAAEO,GAAG,CAACjD,CAAC,CAAC,CAAC8C,CAAC,CAAC,CAAC,EAAEhE,cAAc,CAAC6D,CAAC,EAAEM,GAAG,CAAChD,CAAC,CAAC,CAAC6C,CAAC,CAAC,CAAC,CAAC;MAC7EO,GAAG,CAACP,CAAC,CAAC,GAAGvE,SAAS,CAACO,cAAc,CAAC6D,CAAC,EAAEM,GAAG,CAACjD,CAAC,CAAC,CAAC8C,CAAC,CAAC,CAAC,EAAEhE,cAAc,CAAC4D,CAAC,EAAEO,GAAG,CAAChD,CAAC,CAAC,CAAC6C,CAAC,CAAC,CAAC,CAAC;IAChF,CAAC,CAAC;;IAGFG,GAAG,CAACjD,CAAC,CAAC,CAACA,CAAC,CAAC,GAAGuD,GAAG;IACfN,GAAG,CAAChD,CAAC,CAAC,CAACA,CAAC,CAAC,GAAGuD,GAAG;IACfP,GAAG,CAACjD,CAAC,CAAC,CAACC,CAAC,CAAC,GAAGjB,SAAS,CAAC,CAAC,CAAC;IACxBiE,GAAG,CAAChD,CAAC,CAAC,CAACD,CAAC,CAAC,GAAGhB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;;IAE1B,KAAK,IAAIyE,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG7C,CAAC,EAAE6C,GAAG,EAAE,EAAE;MAChC,IAAIA,GAAG,KAAKzD,CAAC,IAAIyD,GAAG,KAAKxD,CAAC,EAAE;QAC1BgD,GAAG,CAACjD,CAAC,CAAC,CAACyD,GAAG,CAAC,GAAGL,GAAG,CAACK,GAAG,CAAC;QACtBR,GAAG,CAACQ,GAAG,CAAC,CAACzD,CAAC,CAAC,GAAGoD,GAAG,CAACK,GAAG,CAAC;QACtBR,GAAG,CAAChD,CAAC,CAAC,CAACwD,GAAG,CAAC,GAAGJ,GAAG,CAACI,GAAG,CAAC;QACtBR,GAAG,CAACQ,GAAG,CAAC,CAACxD,CAAC,CAAC,GAAGoD,GAAG,CAACI,GAAG,CAAC;MACxB;IACF;IAEA,OAAOR,GAAG;EACZ,CAAC,CAAC;;EAGF,SAAS1B,EAAE,CAAC0B,GAAG,EAAER,KAAK,EAAEzC,CAAC,EAAEC,CAAC,EAAE;IAC5B,IAAIW,CAAC,GAAGqC,GAAG,CAAC1D,MAAM;IAClB,IAAImD,CAAC,GAAG5B,IAAI,CAAClC,GAAG,CAAC6D,KAAK,CAAC;IACvB,IAAIE,CAAC,GAAG7B,IAAI,CAACjC,GAAG,CAAC4D,KAAK,CAAC;IACvB,IAAIS,EAAE,GAAGR,CAAC,GAAGA,CAAC;IACd,IAAIS,EAAE,GAAGR,CAAC,GAAGA,CAAC;IACd,IAAIS,GAAG,GAAGlC,WAAW,CAACN,CAAC,EAAE,CAAC,CAAC;IAC3B,IAAIyC,GAAG,GAAGnC,WAAW,CAACN,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;;IAE7B,IAAI2C,GAAG,GAAGL,EAAE,GAAGD,GAAG,CAACjD,CAAC,CAAC,CAACA,CAAC,CAAC,GAAG,CAAC,GAAG0C,CAAC,GAAGC,CAAC,GAAGM,GAAG,CAACjD,CAAC,CAAC,CAACC,CAAC,CAAC,GAAGkD,EAAE,GAAGF,GAAG,CAAChD,CAAC,CAAC,CAACA,CAAC,CAAC;IACjE,IAAIuD,GAAG,GAAGL,EAAE,GAAGF,GAAG,CAACjD,CAAC,CAAC,CAACA,CAAC,CAAC,GAAG,CAAC,GAAG0C,CAAC,GAAGC,CAAC,GAAGM,GAAG,CAACjD,CAAC,CAAC,CAACC,CAAC,CAAC,GAAGiD,EAAE,GAAGD,GAAG,CAAChD,CAAC,CAAC,CAACA,CAAC,CAAC,CAAC,CAAC;;IAEnE,KAAK,IAAI6C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlC,CAAC,EAAEkC,CAAC,EAAE,EAAE;MAC1BM,GAAG,CAACN,CAAC,CAAC,GAAGJ,CAAC,GAAGO,GAAG,CAACjD,CAAC,CAAC,CAAC8C,CAAC,CAAC,GAAGH,CAAC,GAAGM,GAAG,CAAChD,CAAC,CAAC,CAAC6C,CAAC,CAAC;MACtCO,GAAG,CAACP,CAAC,CAAC,GAAGH,CAAC,GAAGM,GAAG,CAACjD,CAAC,CAAC,CAAC8C,CAAC,CAAC,GAAGJ,CAAC,GAAGO,GAAG,CAAChD,CAAC,CAAC,CAAC6C,CAAC,CAAC;IACxC,CAAC,CAAC;;IAGFG,GAAG,CAACjD,CAAC,CAAC,CAACA,CAAC,CAAC,GAAGuD,GAAG;IACfN,GAAG,CAAChD,CAAC,CAAC,CAACA,CAAC,CAAC,GAAGuD,GAAG;IACfP,GAAG,CAACjD,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,CAAC;IACbgD,GAAG,CAAChD,CAAC,CAAC,CAACD,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;;IAEf,KAAK,IAAI0D,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG9C,CAAC,EAAE8C,GAAG,EAAE,EAAE;MAChC,IAAIA,GAAG,KAAK1D,CAAC,IAAI0D,GAAG,KAAKzD,CAAC,EAAE;QAC1BgD,GAAG,CAACjD,CAAC,CAAC,CAAC0D,GAAG,CAAC,GAAGN,GAAG,CAACM,GAAG,CAAC;QACtBT,GAAG,CAACS,GAAG,CAAC,CAAC1D,CAAC,CAAC,GAAGoD,GAAG,CAACM,GAAG,CAAC;QACtBT,GAAG,CAAChD,CAAC,CAAC,CAACyD,GAAG,CAAC,GAAGL,GAAG,CAACK,GAAG,CAAC;QACtBT,GAAG,CAACS,GAAG,CAAC,CAACzD,CAAC,CAAC,GAAGoD,GAAG,CAACK,GAAG,CAAC;MACxB;IACF;IAEA,OAAOT,GAAG;EACZ,CAAC,CAAC;;EAGF,SAAS7B,MAAM,CAACuC,GAAG,EAAE;IACnB,IAAI/C,CAAC,GAAG+C,GAAG,CAACpE,MAAM;IAClB,IAAIqE,MAAM,GAAG,CAAC;IACd,IAAIC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IAElB,KAAK,IAAI7D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGY,CAAC,EAAEZ,CAAC,EAAE,EAAE;MAC1B,KAAK,IAAIC,CAAC,GAAGD,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGW,CAAC,EAAEX,CAAC,EAAE,EAAE;QAC9B,IAAIa,IAAI,CAACpC,GAAG,CAACkF,MAAM,CAAC,GAAG9C,IAAI,CAACpC,GAAG,CAACiF,GAAG,CAAC3D,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC,EAAE;UAC1C2D,MAAM,GAAG9C,IAAI,CAACpC,GAAG,CAACiF,GAAG,CAAC3D,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC;UAC5B4D,KAAK,GAAG,CAAC7D,CAAC,EAAEC,CAAC,CAAC;QAChB;MACF;IACF;IAEA,OAAO,CAAC4D,KAAK,EAAED,MAAM,CAAC;EACxB,CAAC,CAAC;;EAGF,SAAShC,SAAS,CAAC+B,GAAG,EAAE;IACtB,IAAI/C,CAAC,GAAG+C,GAAG,CAACpE,MAAM;IAClB,IAAIqE,MAAM,GAAG,CAAC;IACd,IAAIC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IAElB,KAAK,IAAI7D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGY,CAAC,EAAEZ,CAAC,EAAE,EAAE;MAC1B,KAAK,IAAIC,CAAC,GAAGD,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGW,CAAC,EAAEX,CAAC,EAAE,EAAE;QAC9B,IAAIvB,GAAG,CAACkF,MAAM,CAAC,GAAGlF,GAAG,CAACiF,GAAG,CAAC3D,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC,EAAE;UAChC2D,MAAM,GAAGlF,GAAG,CAACiF,GAAG,CAAC3D,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC;UACvB4D,KAAK,GAAG,CAAC7D,CAAC,EAAEC,CAAC,CAAC;QAChB;MACF;IACF;IAEA,OAAO,CAAC4D,KAAK,EAAED,MAAM,CAAC;EACxB,CAAC,CAAC;;EAGF,SAASjC,OAAO,CAACmC,CAAC,EAAEC,CAAC,EAAE;IACrB,IAAInD,CAAC,GAAGkD,CAAC,CAACvE,MAAM;IAChB,IAAIyE,EAAE,GAAG7E,KAAK,CAACyB,CAAC,CAAC;IACjB,IAAIqD,EAAE,GAAG9E,KAAK,CAACyB,CAAC,CAAC;IAEjB,KAAK,IAAIkC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlC,CAAC,EAAEkC,CAAC,EAAE,EAAE;MAC1BmB,EAAE,CAACnB,CAAC,CAAC,GAAG3D,KAAK,CAACyB,CAAC,CAAC;IAClB;IAEA,KAAK,IAAIZ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGY,CAAC,EAAEZ,CAAC,EAAE,EAAE;MAC1B,IAAIkE,KAAK,GAAG,CAAC;MACb,IAAIC,IAAI,GAAGL,CAAC,CAAC,CAAC,CAAC;MAEf,KAAK,IAAI7D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6D,CAAC,CAACvE,MAAM,EAAEU,CAAC,EAAE,EAAE;QACjC,IAAI6D,CAAC,CAAC7D,CAAC,CAAC,GAAGkE,IAAI,EAAE;UACfD,KAAK,GAAGjE,CAAC;UACTkE,IAAI,GAAGL,CAAC,CAACI,KAAK,CAAC;QACjB;MACF;MAEAF,EAAE,CAAChE,CAAC,CAAC,GAAG8D,CAAC,CAACM,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MAE7B,KAAK,IAAIG,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGzD,CAAC,EAAEyD,GAAG,EAAE,EAAE;QAChCJ,EAAE,CAACI,GAAG,CAAC,CAACrE,CAAC,CAAC,GAAG+D,CAAC,CAACM,GAAG,CAAC,CAACH,KAAK,CAAC;QAE1BH,CAAC,CAACM,GAAG,CAAC,CAACD,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MACzB;IACF;IAEA,OAAO,CAACrG,KAAK,CAACmG,EAAE,CAAC,EAAEnG,KAAK,CAACoG,EAAE,CAAC,CAAC;EAC/B;EACA;AACF;AACA;AACA;AACA;AACA;;EAGE,SAAS/C,WAAW,CAAC5B,IAAI,EAAEgF,KAAK,EAAE;IAChC;IACA,IAAIC,KAAK,GAAG,IAAIpF,KAAK,CAACG,IAAI,CAAC;IAE3B,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,IAAI,EAAEU,CAAC,EAAE,EAAE;MAC7BuE,KAAK,CAACvE,CAAC,CAAC,GAAGsE,KAAK;IAClB;IAEA,OAAOC,KAAK;EACd;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module"}