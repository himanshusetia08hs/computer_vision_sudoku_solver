{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { _FusedMatMul } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { batchMatMul } from './BatchMatMul';\nexport function _fusedMatMul(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    a,\n    b,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    transposeA,\n    transposeB,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  let current;\n  let addRes;\n  let activationRes;\n  const intermediates = [];\n  const matMulRes = batchMatMul({\n    inputs: {\n      a,\n      b\n    },\n    attrs: {\n      transposeA,\n      transposeB\n    },\n    backend\n  });\n  current = matMulRes;\n  if (bias) {\n    addRes = add({\n      inputs: {\n        a: current,\n        b: bias\n      },\n      backend\n    });\n    intermediates.push(current);\n    current = addRes;\n  }\n  if (activation) {\n    activationRes = applyActivation(backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n  return current;\n}\nexport const _fusedMatMulConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul\n};","map":{"version":3,"sources":["../../src/kernels/_FusedMatMul.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAY,QAAoF,uBAAuB;AAG/H,SAAQ,eAAe,QAAO,sBAAsB;AAEpD,SAAQ,GAAG,QAAO,OAAO;AACzB,SAAQ,WAAW,QAAO,eAAe;AAEzC,OAAM,SAAU,YAAY,CAAC,IAI5B,EAAA;EACC,MAAM;IAAC,MAAM;IAAE,OAAO;IAAE;EAAK,CAAC,GAAG,IAAI;EACrC,MAAM;IAAC,CAAC;IAAE,CAAC;IAAE,IAAI;IAAE;EAAsB,CAAC,GAAG,MAAM;EACnD,MAAM;IAAC,UAAU;IAAE,UAAU;IAAE,UAAU;IAAE;EAAc,CAAC,GAAG,KAAK;EAElE,IAAI,OAAO;EACX,IAAI,MAAM;EACV,IAAI,aAAa;EAEjB,MAAM,aAAa,GAAiB,EAAE;EAEtC,MAAM,SAAS,GACX,WAAW,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC;MAAE;IAAC,CAAC;IAAE,KAAK,EAAE;MAAC,UAAU;MAAE;IAAU,CAAC;IAAE;EAAO,CAAC,CAAC;EAC3E,OAAO,GAAG,SAAS;EAEnB,IAAI,IAAI,EAAE;IACR,MAAM,GAAG,GAAG,CAAC;MAAC,MAAM,EAAE;QAAC,CAAC,EAAE,OAAO;QAAE,CAAC,EAAE;MAAI,CAAC;MAAE;IAAO,CAAC,CAAe;IACpE,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC;IAC3B,OAAO,GAAG,MAAM;EACjB;EACD,IAAI,UAAU,EAAE;IACd,aAAa,GAAG,eAAe,CAC3B,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,sBAAsB,EAAE,cAAc,CAAC;IACzE,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC;IAC3B,OAAO,GAAG,aAAa;EACxB;EAED,KAAK,MAAM,CAAC,IAAI,aAAa,EAAE;IAC7B,OAAO,CAAC,6BAA6B,CAAC,CAAC,CAAC;EACzC;EAED,OAAO,OAAO;AAChB;AAEA,OAAO,MAAM,kBAAkB,GAAiB;EAC9C,UAAU,EAAE,YAAY;EACxB,WAAW,EAAE,KAAK;EAClB,UAAU,EAAE;CACb","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { _FusedMatMul } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { batchMatMul } from './BatchMatMul';\nexport function _fusedMatMul(args) {\n    const { inputs, backend, attrs } = args;\n    const { a, b, bias, preluActivationWeights } = inputs;\n    const { transposeA, transposeB, activation, leakyreluAlpha } = attrs;\n    let current;\n    let addRes;\n    let activationRes;\n    const intermediates = [];\n    const matMulRes = batchMatMul({ inputs: { a, b }, attrs: { transposeA, transposeB }, backend });\n    current = matMulRes;\n    if (bias) {\n        addRes = add({ inputs: { a: current, b: bias }, backend });\n        intermediates.push(current);\n        current = addRes;\n    }\n    if (activation) {\n        activationRes = applyActivation(backend, current, activation, preluActivationWeights, leakyreluAlpha);\n        intermediates.push(current);\n        current = activationRes;\n    }\n    for (const i of intermediates) {\n        backend.disposeIntermediateTensorInfo(i);\n    }\n    return current;\n}\nexport const _fusedMatMulConfig = {\n    kernelName: _FusedMatMul,\n    backendName: 'cpu',\n    kernelFunc: _fusedMatMul,\n};\n//# sourceMappingURL=_FusedMatMul.js.map"]},"metadata":{},"sourceType":"module"}