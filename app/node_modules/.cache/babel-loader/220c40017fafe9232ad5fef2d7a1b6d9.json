{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { randomMatrix } from './util/randomMatrix';\nimport { createRng } from './util/seededRNG';\nimport { isMatrix } from '../../utils/is';\nvar name = 'randomInt';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createRandomInt = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    on = _ref.on;\n  // seeded pseudo random number generator\n  var rng = createRng(config.randomSeed);\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n  /**\n   * Return a random integer number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.randomInt()                // generate a random integer between 0 and 1\n   *     math.randomInt(max)             // generate a random integer between 0 and max\n   *     math.randomInt(min, max)        // generate a random integer between min and max\n   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\n   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\n   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\n   *\n   * Examples:\n   *\n   *     math.randomInt(100)    // returns a random integer between 0 and 100\n   *     math.randomInt(30, 40) // returns a random integer between 30 and 40\n   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1\n   *\n   * See also:\n   *\n   *     random, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random integer value\n   */\n\n  return typed(name, {\n    '': function _() {\n      return _randomInt(0, 1);\n    },\n    number: function number(max) {\n      return _randomInt(0, max);\n    },\n    'number, number': function numberNumber(min, max) {\n      return _randomInt(min, max);\n    },\n    'Array | Matrix': function ArrayMatrix(size) {\n      return _randomIntMatrix(size, 0, 1);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(size, max) {\n      return _randomIntMatrix(size, 0, max);\n    },\n    'Array | Matrix, number, number': function ArrayMatrixNumberNumber(size, min, max) {\n      return _randomIntMatrix(size, min, max);\n    }\n  });\n  function _randomIntMatrix(size, min, max) {\n    var res = randomMatrix(size.valueOf(), function () {\n      return _randomInt(min, max);\n    });\n    return isMatrix(size) ? size.create(res) : res;\n  }\n  function _randomInt(min, max) {\n    return Math.floor(min + rng() * (max - min));\n  }\n});","map":{"version":3,"names":["factory","randomMatrix","createRng","isMatrix","name","dependencies","createRandomInt","_ref","typed","config","on","rng","randomSeed","curr","prev","_","_randomInt","number","max","numberNumber","min","ArrayMatrix","size","_randomIntMatrix","ArrayMatrixNumber","ArrayMatrixNumberNumber","res","valueOf","create","Math","floor"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/P/temp/app/node_modules/mathjs/es/function/probability/randomInt.js"],"sourcesContent":["import { factory } from '../../utils/factory';\nimport { randomMatrix } from './util/randomMatrix';\nimport { createRng } from './util/seededRNG';\nimport { isMatrix } from '../../utils/is';\nvar name = 'randomInt';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createRandomInt = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      on = _ref.on;\n  // seeded pseudo random number generator\n  var rng = createRng(config.randomSeed);\n\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n  /**\n   * Return a random integer number larger or equal to `min` and smaller than `max`\n   * using a uniform distribution.\n   *\n   * Syntax:\n   *\n   *     math.randomInt()                // generate a random integer between 0 and 1\n   *     math.randomInt(max)             // generate a random integer between 0 and max\n   *     math.randomInt(min, max)        // generate a random integer between min and max\n   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1\n   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max\n   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max\n   *\n   * Examples:\n   *\n   *     math.randomInt(100)    // returns a random integer between 0 and 100\n   *     math.randomInt(30, 40) // returns a random integer between 30 and 40\n   *     math.randomInt([2, 3]) // returns a 2x3 matrix with random integers between 0 and 1\n   *\n   * See also:\n   *\n   *     random, pickRandom\n   *\n   * @param {Array | Matrix} [size] If provided, an array or matrix with given\n   *                                size and filled with random values is returned\n   * @param {number} [min]  Minimum boundary for the random value, included\n   * @param {number} [max]  Maximum boundary for the random value, excluded\n   * @return {number | Array | Matrix} A random integer value\n   */\n\n\n  return typed(name, {\n    '': function _() {\n      return _randomInt(0, 1);\n    },\n    number: function number(max) {\n      return _randomInt(0, max);\n    },\n    'number, number': function numberNumber(min, max) {\n      return _randomInt(min, max);\n    },\n    'Array | Matrix': function ArrayMatrix(size) {\n      return _randomIntMatrix(size, 0, 1);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(size, max) {\n      return _randomIntMatrix(size, 0, max);\n    },\n    'Array | Matrix, number, number': function ArrayMatrixNumberNumber(size, min, max) {\n      return _randomIntMatrix(size, min, max);\n    }\n  });\n\n  function _randomIntMatrix(size, min, max) {\n    var res = randomMatrix(size.valueOf(), function () {\n      return _randomInt(min, max);\n    });\n    return isMatrix(size) ? size.create(res) : res;\n  }\n\n  function _randomInt(min, max) {\n    return Math.floor(min + rng() * (max - min));\n  }\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,IAAIC,IAAI,GAAG,WAAW;AACtB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC;AAC7C,OAAO,IAAIC,eAAe,GAAG,eAAeN,OAAO,CAACI,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACtF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,MAAM,GAAGF,IAAI,CAACE,MAAM;IACpBC,EAAE,GAAGH,IAAI,CAACG,EAAE;EAChB;EACA,IAAIC,GAAG,GAAGT,SAAS,CAACO,MAAM,CAACG,UAAU,CAAC;EAEtC,IAAIF,EAAE,EAAE;IACNA,EAAE,CAAC,QAAQ,EAAE,UAAUG,IAAI,EAAEC,IAAI,EAAE;MACjC,IAAID,IAAI,CAACD,UAAU,KAAKE,IAAI,CAACF,UAAU,EAAE;QACvCD,GAAG,GAAGT,SAAS,CAACW,IAAI,CAACD,UAAU,CAAC;MAClC;IACF,CAAC,CAAC;EACJ;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE,OAAOJ,KAAK,CAACJ,IAAI,EAAE;IACjB,EAAE,EAAE,SAASW,CAAC,GAAG;MACf,OAAOC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;IACzB,CAAC;IACDC,MAAM,EAAE,SAASA,MAAM,CAACC,GAAG,EAAE;MAC3B,OAAOF,UAAU,CAAC,CAAC,EAAEE,GAAG,CAAC;IAC3B,CAAC;IACD,gBAAgB,EAAE,SAASC,YAAY,CAACC,GAAG,EAAEF,GAAG,EAAE;MAChD,OAAOF,UAAU,CAACI,GAAG,EAAEF,GAAG,CAAC;IAC7B,CAAC;IACD,gBAAgB,EAAE,SAASG,WAAW,CAACC,IAAI,EAAE;MAC3C,OAAOC,gBAAgB,CAACD,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;IACrC,CAAC;IACD,wBAAwB,EAAE,SAASE,iBAAiB,CAACF,IAAI,EAAEJ,GAAG,EAAE;MAC9D,OAAOK,gBAAgB,CAACD,IAAI,EAAE,CAAC,EAAEJ,GAAG,CAAC;IACvC,CAAC;IACD,gCAAgC,EAAE,SAASO,uBAAuB,CAACH,IAAI,EAAEF,GAAG,EAAEF,GAAG,EAAE;MACjF,OAAOK,gBAAgB,CAACD,IAAI,EAAEF,GAAG,EAAEF,GAAG,CAAC;IACzC;EACF,CAAC,CAAC;EAEF,SAASK,gBAAgB,CAACD,IAAI,EAAEF,GAAG,EAAEF,GAAG,EAAE;IACxC,IAAIQ,GAAG,GAAGzB,YAAY,CAACqB,IAAI,CAACK,OAAO,EAAE,EAAE,YAAY;MACjD,OAAOX,UAAU,CAACI,GAAG,EAAEF,GAAG,CAAC;IAC7B,CAAC,CAAC;IACF,OAAOf,QAAQ,CAACmB,IAAI,CAAC,GAAGA,IAAI,CAACM,MAAM,CAACF,GAAG,CAAC,GAAGA,GAAG;EAChD;EAEA,SAASV,UAAU,CAACI,GAAG,EAAEF,GAAG,EAAE;IAC5B,OAAOW,IAAI,CAACC,KAAK,CAACV,GAAG,GAAGT,GAAG,EAAE,IAAIO,GAAG,GAAGE,GAAG,CAAC,CAAC;EAC9C;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module"}