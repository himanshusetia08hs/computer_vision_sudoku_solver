{"ast":null,"code":"import { isNode } from '../../utils/is';\nimport { map } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nvar name = 'ArrayNode';\nvar dependencies = ['Node'];\nexport var createArrayNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n\n  /**\n   * @constructor ArrayNode\n   * @extends {Node}\n   * Holds an 1-dimensional array with items\n   * @param {Node[]} [items]   1 dimensional array with items\n   */\n  function ArrayNode(items) {\n    if (!(this instanceof ArrayNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    this.items = items || []; // validate input\n\n    if (!Array.isArray(this.items) || !this.items.every(isNode)) {\n      throw new TypeError('Array containing Nodes expected');\n    }\n  }\n  ArrayNode.prototype = new Node();\n  ArrayNode.prototype.type = 'ArrayNode';\n  ArrayNode.prototype.isArrayNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ArrayNode.prototype._compile = function (math, argNames) {\n    var evalItems = map(this.items, function (item) {\n      return item._compile(math, argNames);\n    });\n    var asMatrix = math.config.matrix !== 'Array';\n    if (asMatrix) {\n      var matrix = math.matrix;\n      return function evalArrayNode(scope, args, context) {\n        return matrix(map(evalItems, function (evalItem) {\n          return evalItem(scope, args, context);\n        }));\n      };\n    } else {\n      return function evalArrayNode(scope, args, context) {\n        return map(evalItems, function (evalItem) {\n          return evalItem(scope, args, context);\n        });\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n  ArrayNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.items.length; i++) {\n      var node = this.items[i];\n      callback(node, 'items[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new ArrayNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {ArrayNode} Returns a transformed copy of the node\n   */\n\n  ArrayNode.prototype.map = function (callback) {\n    var items = [];\n    for (var i = 0; i < this.items.length; i++) {\n      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));\n    }\n    return new ArrayNode(items);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ArrayNode}\n   */\n\n  ArrayNode.prototype.clone = function () {\n    return new ArrayNode(this.items.slice(0));\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n  ArrayNode.prototype._toString = function (options) {\n    var items = this.items.map(function (node) {\n      return node.toString(options);\n    });\n    return '[' + items.join(', ') + ']';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n  ArrayNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ArrayNode',\n      items: this.items\n    };\n  };\n  /**\n   * Instantiate an ArrayNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ArrayNode\", items: [...]}`,\n   *                       where mathjs is optional\n   * @returns {ArrayNode}\n   */\n\n  ArrayNode.fromJSON = function (json) {\n    return new ArrayNode(json.items);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n  ArrayNode.prototype.toHTML = function (options) {\n    var items = this.items.map(function (node) {\n      return node.toHTML(options);\n    });\n    return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + items.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>';\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n  ArrayNode.prototype._toTex = function (options) {\n    var s = '\\\\begin{bmatrix}';\n    this.items.forEach(function (node) {\n      if (node.items) {\n        s += node.items.map(function (childNode) {\n          return childNode.toTex(options);\n        }).join('&');\n      } else {\n        s += node.toTex(options);\n      } // new line\n\n      s += '\\\\\\\\';\n    });\n    s += '\\\\end{bmatrix}';\n    return s;\n  };\n  return ArrayNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["isNode","map","factory","name","dependencies","createArrayNode","_ref","Node","ArrayNode","items","SyntaxError","Array","isArray","every","TypeError","prototype","type","isArrayNode","_compile","math","argNames","evalItems","item","asMatrix","config","matrix","evalArrayNode","scope","args","context","evalItem","forEach","callback","i","length","node","_ifNode","clone","slice","_toString","options","toString","join","toJSON","mathjs","fromJSON","json","toHTML","_toTex","s","childNode","toTex","isClass"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/P/temp/app/node_modules/mathjs/es/expression/node/ArrayNode.js"],"sourcesContent":["import { isNode } from '../../utils/is';\nimport { map } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nvar name = 'ArrayNode';\nvar dependencies = ['Node'];\nexport var createArrayNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var Node = _ref.Node;\n\n  /**\n   * @constructor ArrayNode\n   * @extends {Node}\n   * Holds an 1-dimensional array with items\n   * @param {Node[]} [items]   1 dimensional array with items\n   */\n  function ArrayNode(items) {\n    if (!(this instanceof ArrayNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this.items = items || []; // validate input\n\n    if (!Array.isArray(this.items) || !this.items.every(isNode)) {\n      throw new TypeError('Array containing Nodes expected');\n    }\n  }\n\n  ArrayNode.prototype = new Node();\n  ArrayNode.prototype.type = 'ArrayNode';\n  ArrayNode.prototype.isArrayNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  ArrayNode.prototype._compile = function (math, argNames) {\n    var evalItems = map(this.items, function (item) {\n      return item._compile(math, argNames);\n    });\n    var asMatrix = math.config.matrix !== 'Array';\n\n    if (asMatrix) {\n      var matrix = math.matrix;\n      return function evalArrayNode(scope, args, context) {\n        return matrix(map(evalItems, function (evalItem) {\n          return evalItem(scope, args, context);\n        }));\n      };\n    } else {\n      return function evalArrayNode(scope, args, context) {\n        return map(evalItems, function (evalItem) {\n          return evalItem(scope, args, context);\n        });\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  ArrayNode.prototype.forEach = function (callback) {\n    for (var i = 0; i < this.items.length; i++) {\n      var node = this.items[i];\n      callback(node, 'items[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new ArrayNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {ArrayNode} Returns a transformed copy of the node\n   */\n\n\n  ArrayNode.prototype.map = function (callback) {\n    var items = [];\n\n    for (var i = 0; i < this.items.length; i++) {\n      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));\n    }\n\n    return new ArrayNode(items);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {ArrayNode}\n   */\n\n\n  ArrayNode.prototype.clone = function () {\n    return new ArrayNode(this.items.slice(0));\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ArrayNode.prototype._toString = function (options) {\n    var items = this.items.map(function (node) {\n      return node.toString(options);\n    });\n    return '[' + items.join(', ') + ']';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  ArrayNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'ArrayNode',\n      items: this.items\n    };\n  };\n  /**\n   * Instantiate an ArrayNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"ArrayNode\", items: [...]}`,\n   *                       where mathjs is optional\n   * @returns {ArrayNode}\n   */\n\n\n  ArrayNode.fromJSON = function (json) {\n    return new ArrayNode(json.items);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n\n  ArrayNode.prototype.toHTML = function (options) {\n    var items = this.items.map(function (node) {\n      return node.toHTML(options);\n    });\n    return '<span class=\"math-parenthesis math-square-parenthesis\">[</span>' + items.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-parenthesis math-square-parenthesis\">]</span>';\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  ArrayNode.prototype._toTex = function (options) {\n    var s = '\\\\begin{bmatrix}';\n    this.items.forEach(function (node) {\n      if (node.items) {\n        s += node.items.map(function (childNode) {\n          return childNode.toTex(options);\n        }).join('&');\n      } else {\n        s += node.toTex(options);\n      } // new line\n\n\n      s += '\\\\\\\\';\n    });\n    s += '\\\\end{bmatrix}';\n    return s;\n  };\n\n  return ArrayNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}