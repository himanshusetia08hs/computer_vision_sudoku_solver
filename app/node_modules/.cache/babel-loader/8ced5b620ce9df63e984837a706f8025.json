{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Mean, util } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nimport { div } from './RealDiv';\nimport { sum } from './Sum';\nexport function mean(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar = backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n  const $x = cast({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      dtype: 'float32'\n    }\n  });\n  toDispose.push($x);\n  const res = div({\n    inputs: {\n      a: $x,\n      b: reduceSizeScalar\n    },\n    backend\n  });\n  toDispose.push(res);\n  const result = sum({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      axis,\n      keepDims\n    }\n  });\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\nexport const meanConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/Mean.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAY,EAA4B,IAAI,EAAqC,IAAI,QAAO,uBAAuB;AAG3H,SAAQ,IAAI,QAAO,QAAQ;AAC3B,SAAQ,GAAG,QAAO,WAAW;AAC7B,SAAQ,GAAG,QAAO,OAAO;AAEzB,OAAM,SAAU,IAAI,CAChB,IAAqE,EAAA;EAEvE,MAAM;IAAC,MAAM;IAAE,OAAO;IAAE;EAAK,CAAC,GAAG,IAAI;EACrC,MAAM;IAAC;EAAC,CAAC,GAAG,MAAM;EAClB,MAAM;IAAC,IAAI;IAAE;EAAQ,CAAC,GAAG,KAAK;EAE9B,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC;EAC/C,MAAM,MAAM,GAAG,YAAY,CAAC,yBAAyB,CAAC,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC;EACpE,MAAM,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC;EAC7B,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC;EAClD,MAAM,SAAS,GAAG,EAAE;EACpB,MAAM,gBAAgB,GAClB,OAAO,CAAC,cAAc,CAAC,EAAE,EAAE,SAAS,EAAE,IAAI,YAAY,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;EACzE,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC;EAEhC,MAAM,EAAE,GAAG,IAAI,CAAC;IAAC,MAAM,EAAE;MAAC;IAAC,CAAC;IAAE,OAAO;IAAE,KAAK,EAAE;MAAC,KAAK,EAAE;IAAS;EAAC,CAAC,CAAC;EAClE,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;EAElB,MAAM,GAAG,GACL,GAAG,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE,EAAE;MAAE,CAAC,EAAE;IAAgB,CAAC;IAAE;EAAO,CAAC,CAAe;EACtE,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC;EAEnB,MAAM,MAAM,GAAG,GAAG,CAAC;IAAC,MAAM,EAAE;MAAC,CAAC,EAAE;IAAG,CAAC;IAAE,OAAO;IAAE,KAAK,EAAE;MAAC,IAAI;MAAE;IAAQ;EAAC,CAAC,CAAC;EAExE,SAAS,CAAC,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,6BAA6B,CAAC,CAAC,CAAC,CAAC;EAEhE,OAAO,MAAM;AACf;AAEA,OAAO,MAAM,UAAU,GAAiB;EACtC,UAAU,EAAE,IAAI;EAChB,WAAW,EAAE,KAAK;EAClB,UAAU,EAAE;CACb","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {cast} from './Cast';\nimport {div} from './RealDiv';\nimport {sum} from './Sum';\n\nexport function mean(\n    args: {inputs: MeanInputs, backend: MathBackendCPU, attrs: MeanAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar =\n      backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n\n  const $x = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n  toDispose.push($x);\n\n  const res =\n      div({inputs: {a: $x, b: reduceSizeScalar}, backend}) as TensorInfo;\n  toDispose.push(res);\n\n  const result = sum({inputs: {x: res}, backend, attrs: {axis, keepDims}});\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}