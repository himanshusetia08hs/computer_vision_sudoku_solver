{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nexport function createUnaryKernelConfig(kernelName, outType) {\n  let wasmFunc;\n  function setupFunc(backend) {\n    wasmFunc = backend.wasm.cwrap(kernelName, null /* void */, ['number', 'number', 'number' // out_id\n    ]);\n  }\n\n  function kernelFunc(args) {\n    const {\n      backend,\n      inputs: {\n        x\n      }\n    } = args;\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    const out = backend.makeOutput(x.shape, outType || x.dtype);\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    // Short-circuit zero-sized tensors.\n    if (util.sizeFromShape(out.shape) === 0) {\n      return out;\n    }\n    wasmFunc(xId, CppDType[x.dtype], outId);\n    return out;\n  }\n  return {\n    kernelName,\n    backendName: 'wasm',\n    setupFunc,\n    kernelFunc\n  };\n}","map":{"version":3,"sources":["../../../../../../tfjs-backend-wasm/src/kernels/unary_kernel.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAyD,IAAI,QAAO,uBAAuB;AAI3F,SAAQ,QAAQ,QAAO,SAAS;AAEhC,OAAM,SAAU,uBAAuB,CACnC,UAAkB,EAAE,OAAkB,EAAA;EACxC,IAAI,QAA6D;EAEjE,SAAS,SAAS,CAAC,OAAoB,EAAA;IACrC,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,YAAY,CACzD,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;IAAA,CACZ,CAAC;EACJ;;EAEA,SAAS,UAAU,CAAC,IAAiD,EAAA;IAEnE,MAAM;MAAC,OAAO;MAAE,MAAM,EAAE;QAAC;MAAC;IAAC,CAAC,GAAG,IAAI;IACnC,MAAM,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE;IAC9C,MAAM,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,EAAE,OAAO,IAAI,CAAC,CAAC,KAAK,CAAC;IAC3D,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE;IAElD;IACA,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;MACvC,OAAO,GAAG;IACX;IAED,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC;IACvC,OAAO,GAAG;EACZ;EAEA,OAAO;IAAC,UAAU;IAAE,WAAW,EAAE,MAAM;IAAE,SAAS;IAAE;EAAU,CAAC;AACjE","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, TensorInfo, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {CppDType} from './types';\n\nexport function createUnaryKernelConfig(\n    kernelName: string, outType?: DataType): KernelConfig {\n  let wasmFunc: (xId: number, dtype: number, outId: number) => void;\n\n  function setupFunc(backend: BackendWasm): void {\n    wasmFunc = backend.wasm.cwrap(kernelName, null /* void */, [\n      'number',  // x_id\n      'number',  // dtype\n      'number',  // out_id\n    ]);\n  }\n\n  function kernelFunc(args: {backend: BackendWasm, inputs: UnaryInputs}):\n      TensorInfo {\n    const {backend, inputs: {x}} = args;\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    const out = backend.makeOutput(x.shape, outType || x.dtype);\n    const outId = backend.dataIdMap.get(out.dataId).id;\n\n    // Short-circuit zero-sized tensors.\n    if (util.sizeFromShape(out.shape) === 0) {\n      return out;\n    }\n\n    wasmFunc(xId, CppDType[x.dtype], outId);\n    return out;\n  }\n\n  return {kernelName, backendName: 'wasm', setupFunc, kernelFunc};\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}