{"ast":null,"code":"import { factory } from '../utils/factory';\nimport { deepMap } from '../utils/collection';\nvar name = 'number';\nvar dependencies = ['typed'];\nexport var createNumber = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2)                         // returns number 2\n   *    math.number('7.2')                     // returns number 7.2\n   *    math.number(true)                      // returns number 1\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n  var number = typed('number', {\n    '': function _() {\n      return 0;\n    },\n    number: function number(x) {\n      return x;\n    },\n    string: function string(x) {\n      if (x === 'NaN') return NaN;\n      var num = Number(x);\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\n      }\n      if (['0b', '0o', '0x'].includes(x.substring(0, 2))) {\n        if (num > Math.pow(2, 32) - 1) {\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        }\n        if (num & 0x80000000) {\n          num = -1 * ~(num - 1);\n        }\n      }\n      return num;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toNumber();\n    },\n    Fraction: function Fraction(x) {\n      return x.valueOf();\n    },\n    Unit: function Unit(x) {\n      throw new Error('Second argument with valueless unit expected');\n    },\n    \"null\": function _null(x) {\n      return 0;\n    },\n    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  }); // reviver function to parse a JSON object like:\n  //\n  //     {\"mathjs\":\"number\",\"value\":\"2.3\"}\n  //\n  // into a number 2.3\n\n  number.fromJSON = function (json) {\n    return parseFloat(json.value);\n  };\n  return number;\n});","map":{"version":3,"names":["factory","deepMap","name","dependencies","createNumber","_ref","typed","number","_","x","string","NaN","num","Number","isNaN","SyntaxError","includes","substring","Math","pow","concat","BigNumber","toNumber","Fraction","valueOf","Unit","Error","_null","UnitStringUnit","unit","valuelessUnit","ArrayMatrix","fromJSON","json","parseFloat","value"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/Project/temp/app/node_modules/mathjs/es/type/number.js"],"sourcesContent":["import { factory } from '../utils/factory';\nimport { deepMap } from '../utils/collection';\nvar name = 'number';\nvar dependencies = ['typed'];\nexport var createNumber = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2)                         // returns number 2\n   *    math.number('7.2')                     // returns number 7.2\n   *    math.number(true)                      // returns number 1\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n  var number = typed('number', {\n    '': function _() {\n      return 0;\n    },\n    number: function number(x) {\n      return x;\n    },\n    string: function string(x) {\n      if (x === 'NaN') return NaN;\n      var num = Number(x);\n\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\n      }\n\n      if (['0b', '0o', '0x'].includes(x.substring(0, 2))) {\n        if (num > Math.pow(2, 32) - 1) {\n          throw new SyntaxError(\"String \\\"\".concat(x, \"\\\" is out of range\"));\n        }\n\n        if (num & 0x80000000) {\n          num = -1 * ~(num - 1);\n        }\n      }\n\n      return num;\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toNumber();\n    },\n    Fraction: function Fraction(x) {\n      return x.valueOf();\n    },\n    Unit: function Unit(x) {\n      throw new Error('Second argument with valueless unit expected');\n    },\n    \"null\": function _null(x) {\n      return 0;\n    },\n    'Unit, string | Unit': function UnitStringUnit(unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  }); // reviver function to parse a JSON object like:\n  //\n  //     {\"mathjs\":\"number\",\"value\":\"2.3\"}\n  //\n  // into a number 2.3\n\n  number.fromJSON = function (json) {\n    return parseFloat(json.value);\n  };\n\n  return number;\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,OAAO,QAAQ,qBAAqB;AAC7C,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,YAAY,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACnF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIC,MAAM,GAAGD,KAAK,CAAC,QAAQ,EAAE;IAC3B,EAAE,EAAE,SAASE,CAAC,GAAG;MACf,OAAO,CAAC;IACV,CAAC;IACDD,MAAM,EAAE,SAASA,MAAM,CAACE,CAAC,EAAE;MACzB,OAAOA,CAAC;IACV,CAAC;IACDC,MAAM,EAAE,SAASA,MAAM,CAACD,CAAC,EAAE;MACzB,IAAIA,CAAC,KAAK,KAAK,EAAE,OAAOE,GAAG;MAC3B,IAAIC,GAAG,GAAGC,MAAM,CAACJ,CAAC,CAAC;MAEnB,IAAIK,KAAK,CAACF,GAAG,CAAC,EAAE;QACd,MAAM,IAAIG,WAAW,CAAC,UAAU,GAAGN,CAAC,GAAG,sBAAsB,CAAC;MAChE;MAEA,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAACO,QAAQ,CAACP,CAAC,CAACQ,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;QAClD,IAAIL,GAAG,GAAGM,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE;UAC7B,MAAM,IAAIJ,WAAW,CAAC,WAAW,CAACK,MAAM,CAACX,CAAC,EAAE,oBAAoB,CAAC,CAAC;QACpE;QAEA,IAAIG,GAAG,GAAG,UAAU,EAAE;UACpBA,GAAG,GAAG,CAAC,CAAC,GAAG,EAAEA,GAAG,GAAG,CAAC,CAAC;QACvB;MACF;MAEA,OAAOA,GAAG;IACZ,CAAC;IACDS,SAAS,EAAE,SAASA,SAAS,CAACZ,CAAC,EAAE;MAC/B,OAAOA,CAAC,CAACa,QAAQ,EAAE;IACrB,CAAC;IACDC,QAAQ,EAAE,SAASA,QAAQ,CAACd,CAAC,EAAE;MAC7B,OAAOA,CAAC,CAACe,OAAO,EAAE;IACpB,CAAC;IACDC,IAAI,EAAE,SAASA,IAAI,CAAChB,CAAC,EAAE;MACrB,MAAM,IAAIiB,KAAK,CAAC,8CAA8C,CAAC;IACjE,CAAC;IACD,MAAM,EAAE,SAASC,KAAK,CAAClB,CAAC,EAAE;MACxB,OAAO,CAAC;IACV,CAAC;IACD,qBAAqB,EAAE,SAASmB,cAAc,CAACC,IAAI,EAAEC,aAAa,EAAE;MAClE,OAAOD,IAAI,CAACP,QAAQ,CAACQ,aAAa,CAAC;IACrC,CAAC;IACD,gBAAgB,EAAE,SAASC,WAAW,CAACtB,CAAC,EAAE;MACxC,OAAOR,OAAO,CAACQ,CAAC,EAAE,IAAI,CAAC;IACzB;EACF,CAAC,CAAC,CAAC,CAAC;EACJ;EACA;EACA;EACA;;EAEAF,MAAM,CAACyB,QAAQ,GAAG,UAAUC,IAAI,EAAE;IAChC,OAAOC,UAAU,CAACD,IAAI,CAACE,KAAK,CAAC;EAC/B,CAAC;EAED,OAAO5B,MAAM;AACf,CAAC,CAAC"},"metadata":{},"sourceType":"module"}