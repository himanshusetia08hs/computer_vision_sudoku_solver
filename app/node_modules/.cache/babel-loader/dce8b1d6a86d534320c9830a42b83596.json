{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sigmoid, util } from '@tensorflow/tfjs-core';\nlet wasmFunc;\nfunction setup(backend) {\n  wasmFunc = backend.wasm.cwrap(Sigmoid, null /* void */, ['number', 'number']);\n}\nfunction sigmoid(args) {\n  const {\n    backend,\n    inputs: {\n      x\n    }\n  } = args;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const out = backend.makeOutput(x.shape, x.dtype);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  // Short-circuit zero-sized tensors.\n  if (util.sizeFromShape(out.shape) === 0) {\n    return out;\n  }\n  wasmFunc(xId, outId);\n  return out;\n}\nexport const sigmoidConfig = {\n  kernelName: 'Sigmoid',\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: sigmoid\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-wasm/src/kernels/Sigmoid.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,OAAO,EAA6B,IAAI,QAAO,uBAAuB;AAIxG,IAAI,QAA8C;AAElD,SAAS,KAAK,CAAC,OAAoB,EAAA;EACjC,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAC/E;AAEA,SAAS,OAAO,CAAC,IAAmD,EAAA;EAElE,MAAM;IAAC,OAAO;IAAE,MAAM,EAAE;MAAC;IAAC;EAAC,CAAC,GAAG,IAAI;EACnC,MAAM,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE;EAC9C,MAAM,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC;EAChD,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE;EAElD;EACA,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;IACvC,OAAO,GAAG;EACX;EAED,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC;EACpB,OAAO,GAAG;AACZ;AAEA,OAAO,MAAM,aAAa,GAAiB;EACzC,UAAU,EAAE,SAAS;EACrB,WAAW,EAAE,MAAM;EACnB,SAAS,EAAE,KAAK;EAChB,UAAU,EAAE;CACb","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sigmoid, SigmoidInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nlet wasmFunc: (xId: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmFunc = backend.wasm.cwrap(Sigmoid, null /* void */, ['number', 'number']);\n}\n\nfunction sigmoid(args: {backend: BackendWasm, inputs: SigmoidInputs}):\n    TensorInfo {\n  const {backend, inputs: {x}} = args;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const out = backend.makeOutput(x.shape, x.dtype);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  // Short-circuit zero-sized tensors.\n  if (util.sizeFromShape(out.shape) === 0) {\n    return out;\n  }\n\n  wasmFunc(xId, outId);\n  return out;\n}\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: 'Sigmoid',\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: sigmoid as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}