{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, FusedConv2D } from '@tensorflow/tfjs-core';\nimport { FusableActivation } from './types';\nlet wasmFusedConv2d;\nfunction setup(backend) {\n  wasmFusedConv2d = backend.wasm.cwrap(FusedConv2D, null /* void */, ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number']);\n}\nfunction fusedConv2d(args) {\n  const {\n    inputs,\n    attrs,\n    backend\n  } = args;\n  const {\n    x,\n    filter,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations,\n    dataFormat,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode);\n  const fusedActivation = FusableActivation[activation];\n  if (fusedActivation == null) {\n    throw new Error(`${activation} activation not yet supported for FusedConv2D ` + `in the wasm backend.`);\n  }\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const filterId = backend.dataIdMap.get(filter.dataId).id;\n  const outputChannels = convInfo.outChannels;\n  let biasId = 0;\n  if (bias != null) {\n    const biasData = backend.dataIdMap.get(bias.dataId);\n    if (biasData.shape.length !== 1) {\n      throw new Error(`FusedConv2D only supports rank-1 bias but got ` + `rank ${biasData.shape.length}.`);\n    }\n    if (biasData.shape[0] !== outputChannels) {\n      throw new Error(`FusedConv2D bias shape (${biasData.shape}) does not ` + `match the number of output channels (${outputChannels})`);\n    }\n    biasId = biasData.id;\n  }\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const inputChannels = convInfo.inChannels;\n  const isSamePad = convInfo.padInfo.type === 'SAME' ? 1 : 0;\n  const batchSize = convInfo.batchSize;\n  const inHeight = convInfo.inHeight;\n  const inWidth = convInfo.inWidth;\n  if (dataFormat !== 'NHWC') {\n    throw new Error(`wasm backend FusedConv2D does not support dataFormat:'` + `${dataFormat}'. Please use 'NHWC'.`);\n  }\n  const out = backend.makeOutput(convInfo.outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const preluActivationWeightsId = preluActivationWeights == null ? 0 : backend.dataIdMap.get(preluActivationWeights.dataId).id;\n  wasmFusedConv2d(xId, batchSize, inHeight, inWidth, filterId, filterHeight, filterWidth, biasId, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, fusedActivation, preluActivationWeightsId, leakyreluAlpha || 0, outId);\n  return out;\n}\nexport const fusedConv2DConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: fusedConv2d\n};","map":{"version":3,"sources":["../../src/kernels/FusedConv2D.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, FusedConv2D } from '@tensorflow/tfjs-core';\nimport { FusableActivation } from './types';\nlet wasmFusedConv2d;\nfunction setup(backend) {\n    wasmFusedConv2d = backend.wasm.cwrap(FusedConv2D, null /* void */, [\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n    ]);\n}\nfunction fusedConv2d(args) {\n    const { inputs, attrs, backend } = args;\n    const { x, filter, bias, preluActivationWeights } = inputs;\n    const { strides, pad, dilations, dataFormat, dimRoundingMode, activation, leakyreluAlpha } = attrs;\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode);\n    const fusedActivation = FusableActivation[activation];\n    if (fusedActivation == null) {\n        throw new Error(`${activation} activation not yet supported for FusedConv2D ` +\n            `in the wasm backend.`);\n    }\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    const filterId = backend.dataIdMap.get(filter.dataId).id;\n    const outputChannels = convInfo.outChannels;\n    let biasId = 0;\n    if (bias != null) {\n        const biasData = backend.dataIdMap.get(bias.dataId);\n        if (biasData.shape.length !== 1) {\n            throw new Error(`FusedConv2D only supports rank-1 bias but got ` +\n                `rank ${biasData.shape.length}.`);\n        }\n        if (biasData.shape[0] !== outputChannels) {\n            throw new Error(`FusedConv2D bias shape (${biasData.shape}) does not ` +\n                `match the number of output channels (${outputChannels})`);\n        }\n        biasId = biasData.id;\n    }\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const padTop = convInfo.padInfo.top;\n    const padRight = convInfo.padInfo.right;\n    const padBottom = convInfo.padInfo.bottom;\n    const padLeft = convInfo.padInfo.left;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const inputChannels = convInfo.inChannels;\n    const isSamePad = convInfo.padInfo.type === 'SAME' ? 1 : 0;\n    const batchSize = convInfo.batchSize;\n    const inHeight = convInfo.inHeight;\n    const inWidth = convInfo.inWidth;\n    if (dataFormat !== 'NHWC') {\n        throw new Error(`wasm backend FusedConv2D does not support dataFormat:'` +\n            `${dataFormat}'. Please use 'NHWC'.`);\n    }\n    const out = backend.makeOutput(convInfo.outShape, 'float32');\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    const preluActivationWeightsId = preluActivationWeights == null ?\n        0 :\n        backend.dataIdMap.get(preluActivationWeights.dataId).id;\n    wasmFusedConv2d(xId, batchSize, inHeight, inWidth, filterId, filterHeight, filterWidth, biasId, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, fusedActivation, preluActivationWeightsId, leakyreluAlpha || 0, outId);\n    return out;\n}\nexport const fusedConv2DConfig = {\n    kernelName: FusedConv2D,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: fusedConv2d\n};\n//# sourceMappingURL=FusedConv2D.js.map"]},"metadata":{},"sourceType":"module"}