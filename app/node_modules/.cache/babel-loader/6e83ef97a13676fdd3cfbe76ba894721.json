{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { KernelBackend } from './backends/backend';\nimport { Environment, setEnvironmentGlobal } from './environment';\nimport { getGlobalNamespace } from './global_util';\nimport { Add, Cast } from './kernel_names';\nimport { getGradient, getKernel, getKernelsForBackend } from './kernel_registry';\nimport { Profiler } from './profiler';\nimport { backpropagateGradients, getFilteredNodesXToY } from './tape';\nimport { setTensorTracker, Tensor, Variable } from './tensor';\nimport { getTensorsInContainer } from './tensor_util';\nimport * as util from './util';\nimport { bytesFromStringArray, makeOnesTypedArray, now, sizeFromShape } from './util';\nclass EngineState {\n  constructor() {\n    // Public since optimizers will use it.\n    this.registeredVariables = {};\n    this.nextTapeNodeId = 0;\n    this.numBytes = 0;\n    this.numTensors = 0;\n    this.numStringTensors = 0;\n    this.numDataBuffers = 0;\n    // Number of nested tf.grad() statements when computing higher-order\n    // gradients. E.g. `1` for first-order gradients and `2` for second-order\n    // gradients. Used to track if the tape should be removed after a backprop.\n    this.gradientDepth = 0;\n    // Number of nested kernel calls. When kernel depth is greater than 1, we turn\n    // off the tape.\n    this.kernelDepth = 0;\n    this.scopeStack = [];\n    /**\n     * Keeps track of the number of data moves during a kernel execution. We\n     * maintain a stack since kernels can call other kernels, recursively.\n     */\n    this.numDataMovesStack = [];\n    this.nextScopeId = 0;\n    this.tensorInfo = new WeakMap();\n    this.profiling = false;\n    this.activeProfile = {\n      newBytes: 0,\n      newTensors: 0,\n      peakBytes: 0,\n      kernels: [],\n      result: null,\n      get kernelNames() {\n        return Array.from(new Set(this.kernels.map(k => k.name)));\n      }\n    };\n  }\n  dispose() {\n    for (const variableName in this.registeredVariables) {\n      this.registeredVariables[variableName].dispose();\n    }\n  }\n}\nexport class Engine {\n  constructor(ENV) {\n    this.ENV = ENV;\n    this.registry = {};\n    this.registryFactory = {};\n    this.pendingBackendInitId = 0;\n    this.state = new EngineState();\n  }\n  async ready() {\n    if (this.pendingBackendInit != null) {\n      return this.pendingBackendInit.then(() => {});\n    }\n    if (this.backendInstance != null) {\n      return;\n    }\n    const sortedBackends = this.getSortedBackends();\n    for (let i = 0; i < sortedBackends.length; i++) {\n      const backendName = sortedBackends[i];\n      const success = await this.initializeBackend(backendName).success;\n      if (success) {\n        await this.setBackend(backendName);\n        return;\n      }\n    }\n    throw new Error(`Could not initialize any backends, all backend initializations ` + `failed.`);\n  }\n  get backend() {\n    if (this.pendingBackendInit != null) {\n      throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make ` + `sure to await tf.ready() or await tf.setBackend() before calling ` + `other methods`);\n    }\n    if (this.backendInstance == null) {\n      const {\n        name,\n        asyncInit\n      } = this.initializeBackendsAndReturnBest();\n      if (asyncInit) {\n        throw new Error(`The highest priority backend '${name}' has not yet been ` + `initialized. Make sure to await tf.ready() or ` + `await tf.setBackend() before calling other methods`);\n      }\n      this.setBackend(name);\n    }\n    return this.backendInstance;\n  }\n  backendNames() {\n    return Object.keys(this.registryFactory);\n  }\n  findBackend(backendName) {\n    if (!(backendName in this.registry)) {\n      // If the backend hasn't been initialized but we have a registry entry for\n      // it, initialize it and return it.\n      if (backendName in this.registryFactory) {\n        const {\n          asyncInit\n        } = this.initializeBackend(backendName);\n        if (asyncInit) {\n          // Backend is not ready yet.\n          return null;\n        }\n      } else {\n        return null;\n      }\n    }\n    return this.registry[backendName];\n  }\n  findBackendFactory(backendName) {\n    if (!(backendName in this.registryFactory)) {\n      return null;\n    }\n    return this.registryFactory[backendName].factory;\n  }\n  registerBackend(backendName, factory) {\n    let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    if (backendName in this.registryFactory) {\n      console.warn(`${backendName} backend was already registered. ` + `Reusing existing backend factory.`);\n      return false;\n    }\n    this.registryFactory[backendName] = {\n      factory,\n      priority\n    };\n    return true;\n  }\n  async setBackend(backendName) {\n    if (this.registryFactory[backendName] == null) {\n      throw new Error(`Backend name '${backendName}' not found in registry`);\n    }\n    this.backendName = backendName;\n    if (this.registry[backendName] == null) {\n      this.backendInstance = null;\n      const {\n        success,\n        asyncInit\n      } = this.initializeBackend(backendName);\n      const result = asyncInit ? await success : success;\n      if (!result) {\n        return false;\n      }\n    }\n    this.backendInstance = this.registry[backendName];\n    this.setupRegisteredKernels();\n    // Reset the profiler.\n    this.profiler = new Profiler(this.backendInstance);\n    return true;\n  }\n  setupRegisteredKernels() {\n    const kernels = getKernelsForBackend(this.backendName);\n    kernels.forEach(kernel => {\n      if (kernel.setupFunc != null) {\n        kernel.setupFunc(this.backendInstance);\n      }\n    });\n  }\n  disposeRegisteredKernels(backendName) {\n    const kernels = getKernelsForBackend(backendName);\n    kernels.forEach(kernel => {\n      if (kernel.disposeFunc != null) {\n        kernel.disposeFunc(this.registry[backendName]);\n      }\n    });\n  }\n  /**\n   * Initializes a backend by looking up the backend name in the factory\n   * registry and calling the factory method. Returns a boolean representing\n   * whether the initialization of the backend suceeded. Throws an error if\n   * there is no backend in the factory registry.\n   */\n  initializeBackend(backendName) {\n    const registryFactoryEntry = this.registryFactory[backendName];\n    if (registryFactoryEntry == null) {\n      throw new Error(`Cannot initialize backend ${backendName}, no registration found.`);\n    }\n    try {\n      const backend = registryFactoryEntry.factory();\n      /* Test if the factory returns a promise.\n      Done in a more liberal way than\n      previous 'Promise.resolve(backend)===backend'\n      as we needed to account for custom Promise\n      implementations (e.g. Angular) */\n      if (backend && !(backend instanceof KernelBackend) && typeof backend.then === 'function') {\n        const promiseId = ++this.pendingBackendInitId;\n        const success = backend.then(backendInstance => {\n          // Outdated promise. Another backend was set in the meantime.\n          if (promiseId < this.pendingBackendInitId) {\n            return false;\n          }\n          this.registry[backendName] = backendInstance;\n          this.pendingBackendInit = null;\n          return true;\n        }).catch(err => {\n          // Outdated promise. Another backend was set in the meantime.\n          if (promiseId < this.pendingBackendInitId) {\n            return false;\n          }\n          this.pendingBackendInit = null;\n          console.warn(`Initialization of backend ${backendName} failed`);\n          console.warn(err.stack || err.message);\n          return false;\n        });\n        this.pendingBackendInit = success;\n        return {\n          success,\n          asyncInit: true\n        };\n      } else {\n        this.registry[backendName] = backend;\n        return {\n          success: true,\n          asyncInit: false\n        };\n      }\n    } catch (err) {\n      console.warn(`Initialization of backend ${backendName} failed`);\n      console.warn(err.stack || err.message);\n      return {\n        success: false,\n        asyncInit: false\n      };\n    }\n  }\n  removeBackend(backendName) {\n    if (!(backendName in this.registryFactory)) {\n      throw new Error(`${backendName} backend not found in registry`);\n    }\n    if (this.backendName === backendName && this.pendingBackendInit != null) {\n      // There is a pending promise of the backend we want to remove. Make it\n      // obsolete.\n      this.pendingBackendInitId++;\n    }\n    if (backendName in this.registry) {\n      this.disposeRegisteredKernels(backendName);\n      this.registry[backendName].dispose();\n      delete this.registry[backendName];\n    }\n    delete this.registryFactory[backendName];\n    // Unset the backend if it is active.\n    if (this.backendName === backendName) {\n      this.pendingBackendInit = null;\n      this.backendName = null;\n      this.backendInstance = null;\n    }\n  }\n  getSortedBackends() {\n    if (Object.keys(this.registryFactory).length === 0) {\n      throw new Error('No backend found in registry.');\n    }\n    return Object.keys(this.registryFactory).sort((a, b) => {\n      // Highest priority comes first.\n      return this.registryFactory[b].priority - this.registryFactory[a].priority;\n    });\n  }\n  initializeBackendsAndReturnBest() {\n    const sortedBackends = this.getSortedBackends();\n    for (let i = 0; i < sortedBackends.length; i++) {\n      const backendName = sortedBackends[i];\n      const {\n        success,\n        asyncInit\n      } = this.initializeBackend(backendName);\n      if (asyncInit || success) {\n        return {\n          name: backendName,\n          asyncInit\n        };\n      }\n    }\n    throw new Error(`Could not initialize any backends, all backend initializations ` + `failed.`);\n  }\n  moveData(backend, dataId) {\n    const info = this.state.tensorInfo.get(dataId);\n    const srcBackend = info.backend;\n    const values = this.readSync(dataId);\n    // Delete the tensor from the old backend and move it to the new\n    // backend.\n    srcBackend.disposeData(dataId);\n    info.backend = backend;\n    backend.move(dataId, values, info.shape, info.dtype);\n    if (this.shouldCheckForMemLeaks()) {\n      // Track the number of moves during a kernel execution to correctly\n      // detect memory leaks.\n      this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n    }\n  }\n  tidy(nameOrFn, fn) {\n    let name = null;\n    if (fn == null) {\n      // Called with only 1 argument.\n      if (typeof nameOrFn !== 'function') {\n        throw new Error('Please provide a function to tidy()');\n      }\n      fn = nameOrFn;\n    } else {\n      // Called with 2 arguments.\n      if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n        throw new Error('When calling with two arguments, the first argument ' + 'to tidy() must be a string');\n      }\n      if (typeof fn !== 'function') {\n        throw new Error('When calling with two arguments, the 2nd argument ' + 'to tidy() must be a function');\n      }\n      name = nameOrFn;\n      // TODO(nsthorat,smilkov): Do operation logging and performance\n      // profiling.\n    }\n\n    let result;\n    return this.scopedRun(() => this.startScope(name), () => this.endScope(result), () => {\n      result = fn();\n      if (result instanceof Promise) {\n        console.error('Cannot return a Promise inside of tidy.');\n      }\n      return result;\n    });\n  }\n  scopedRun(start, end, f) {\n    start();\n    try {\n      const res = f();\n      end();\n      return res;\n    } catch (ex) {\n      end();\n      throw ex;\n    }\n  }\n  nextTensorId() {\n    return Engine.nextTensorId++;\n  }\n  nextVariableId() {\n    return Engine.nextVariableId++;\n  }\n  /**\n   * This method is called instead of the public-facing tensor.clone() when\n   * saving a tensor for backwards pass. It makes sure to add the clone\n   * operation to the tape regardless of being called inside a kernel\n   * execution.\n   *\n   * This method will go away once all kernels are modularized since we won't\n   * need to turn off the tape inside runKernel().\n   */\n  clone(x) {\n    const y = this.makeTensorFromDataId(x.dataId, x.shape, x.dtype);\n    const inputs = {\n      x\n    };\n    const grad = dy => ({\n      x: () => {\n        const dtype = 'float32';\n        const gradInputs = {\n          x: dy\n        };\n        const attrs = {\n          dtype\n        };\n        return ENGINE.runKernelFunc(backend => backend.cast(dy, dtype), gradInputs, null /* grad */, Cast, attrs);\n      }\n    });\n    const saved = [];\n    this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});\n    return y;\n  }\n  /**\n   * Execute a kernel with the given name and return the output tensor.\n   *\n   * @param kernelName The name of the kernel to execute.\n   * @param inputs A map of input names to tensors.\n   * @param attrs A map of attribute names to their values. An attribute is a\n   *     primitive (non-tensor) input to the kernel.\n   * @param inputsToSave A list of tensors, inputs to save for the backprop\n   *     computation.\n   * @param outputsToSave A list of booleans, specifying which output to save\n   *     for the backprop computation. These are booleans since the output\n   * tensors are not visible to the user.\n   */\n  runKernel(kernelName, inputs, attrs, inputsToSave, outputsToSave) {\n    const forwardFunc = null;\n    const backwardsFunc = null;\n    // Call runKernel as a stop-gap until we modularize all kernels.\n    // Once we modularize all kernels, we will remove the existing\n    // `runKernelFunc`.\n    return this.runKernelFunc(forwardFunc, inputs, backwardsFunc, kernelName, attrs, inputsToSave, outputsToSave);\n  }\n  shouldCheckForMemLeaks() {\n    return this.ENV.getBool('IS_TEST');\n  }\n  checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {\n    const numDataIdsAfter = this.backend.numDataIds();\n    // Count the number of data ids associated with the result of the kernel.\n    let numOutputDataIds = 0;\n    outInfos.forEach(info => {\n      // Complex numbers allocate 3 data ids, one for 'real', one for\n      // 'imaginary', and one for the container that holds the former two.\n      numOutputDataIds += info.dtype === 'complex64' ? 3 : 1;\n    });\n    // Account for the number of moves during kernel execution. A \"data move\"\n    // can happen in the middle of a kernel execution, placing a new (key,value)\n    // pair in the data storage. Since data moves have net zero effect (we\n    // always remove the data from the old backend), we have to cancel them out\n    // when detecting memory leaks.\n    const numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];\n    const dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;\n    if (dataIdsLeaked > 0) {\n      throw new Error(`Backend '${this.backendName}' has an internal memory leak ` + `(${dataIdsLeaked} data ids) after running '${kernelName}'`);\n    }\n  }\n  /**\n   * @deprecated Use `runKernel` for newly added kernels. Keep using this method\n   *     only for kernels that are not yet fully modularized.\n   */\n  runKernelFunc(forwardFunc, inputs, backwardsFunc, kernelName, attrs, inputsToSave, outputsToSave) {\n    let outputs;\n    let saved = [];\n    const isTapeOn = this.isTapeOn();\n    if (kernelName == null) {\n      kernelName = this.state.activeScope != null ? this.state.activeScope.name : '';\n    }\n    const startingBytecount = this.state.numBytes;\n    const startingNumTensors = this.state.numTensors;\n    if (this.shouldCheckForMemLeaks()) {\n      this.state.numDataMovesStack.push(0);\n    }\n    let kernelFunc;\n    if (this.backendName == null) {\n      // backend has not been initialized yet (backend initialization is lazy\n      // can be deferred until an op/ kernel is run).\n      // The below getter has side effects that will try to initialize the\n      // backend and set properties like this.backendName\n      // tslint:disable-next-line: no-unused-expression\n      this.backend;\n    }\n    const kernel = getKernel(kernelName, this.backendName);\n    let out;\n    if (kernel != null) {\n      kernelFunc = () => {\n        const numDataIdsBefore = this.backend.numDataIds();\n        out = kernel.kernelFunc({\n          inputs,\n          attrs,\n          backend: this.backend\n        });\n        const outInfos = Array.isArray(out) ? out : [out];\n        if (this.shouldCheckForMemLeaks()) {\n          this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);\n        }\n        const outTensors = outInfos.map(outInfo => {\n          // todo (yassogba) remove this option (Tensor) when node backend\n          // methods have been modularized and they all return tensorInfo.\n          // TensorInfos do not have a rank attribute.\n          if (outInfo.rank != null) {\n            return outInfo;\n          }\n          const {\n            dataId,\n            shape,\n            dtype\n          } = outInfo;\n          return this.makeTensorFromDataId(dataId, shape, dtype);\n        });\n        // Save the inputs and outputs.\n        // Do not save unless we are recording to the tape. Otherwise it would\n        // cause a mem leak since we would never run backprop, which disposes\n        // the kept tensors.\n        if (isTapeOn) {\n          let tensorsToSave = this.getTensorsForGradient(kernelName, inputs, outTensors);\n          if (tensorsToSave == null) {\n            // Fallback for ops that call runKernelFunc and pass in\n            // inputsToSave and outputsToSave. Currently this is the set of ops\n            // with kernel support in the WASM backend. Once those ops and\n            // respective gradients are modularised we can remove this path.\n            if (outputsToSave == null) {\n              outputsToSave = [];\n            }\n            const outsToSave = outTensors.filter((_, i) => outputsToSave[i]);\n            tensorsToSave = (inputsToSave || []).slice().concat(outsToSave);\n          }\n          saved = this.saveTensorsForBackwardMode(tensorsToSave);\n        }\n        return outTensors;\n      };\n    } else {\n      if (forwardFunc == null) {\n        throw new Error(`Error running ${kernelName}: Neither modular kernel nor forward func passed`);\n      }\n      const saveFunc = tensors => {\n        // Do not save unless we are recording to the tape. Otherwise it would\n        // cause a mem leak since we would never run backprop, which disposes\n        // the kept tensors.\n        if (!isTapeOn) {\n          return;\n        }\n        saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n      };\n      kernelFunc = () => {\n        const numDataIdsBefore = this.backend.numDataIds();\n        out = this.tidy(() => forwardFunc(this.backend, saveFunc));\n        const outs = Array.isArray(out) ? out : [out];\n        if (this.shouldCheckForMemLeaks()) {\n          this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outs);\n        }\n        return outs;\n      };\n    }\n    // Stop recording to a tape when running a kernel.\n    let kernelProfile;\n    this.scopedRun(() => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {\n      if (!this.ENV.getBool('DEBUG') && !this.state.profiling) {\n        outputs = kernelFunc();\n      } else {\n        kernelProfile = this.profiler.profileKernel(kernelName, inputs, () => kernelFunc());\n        if (this.ENV.getBool('DEBUG')) {\n          this.profiler.logKernelProfile(kernelProfile);\n        }\n        outputs = kernelProfile.outputs;\n      }\n    });\n    if (isTapeOn) {\n      this.addTapeNode(kernelName, inputs, outputs, backwardsFunc, saved, attrs);\n    }\n    if (this.state.profiling) {\n      this.state.activeProfile.kernels.push({\n        name: kernelName,\n        bytesAdded: this.state.numBytes - startingBytecount,\n        totalBytesSnapshot: this.state.numBytes,\n        tensorsAdded: this.state.numTensors - startingNumTensors,\n        totalTensorsSnapshot: this.state.numTensors,\n        inputShapes: Object.keys(inputs).map(key => inputs[key] != null ? inputs[key].shape : null),\n        outputShapes: outputs.map(item => item.shape),\n        kernelTimeMs: kernelProfile.timeMs,\n        extraInfo: kernelProfile.extraInfo\n      });\n    }\n    return Array.isArray(out) ? outputs : outputs[0];\n  }\n  /**\n   * Saves tensors used in forward mode for use in backward mode.\n   *\n   * @param tensors the list of tensors to save.\n   */\n  saveTensorsForBackwardMode(tensors) {\n    const saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n    return saved;\n  }\n  /**\n   * Returns a list of tensors to save for a given gradient calculation.\n   *\n   * Returns undefined if their is no registered gradient for this kernel in the\n   * gradient registry.\n   *\n   * @param kernelName name of kernel to look up gradient for.\n   * @param inputs a map of input tensors.\n   * @param outputs an array of output tensors from forward mode of kernel.\n   */\n  getTensorsForGradient(kernelName, inputs, outputs) {\n    const gradConfig = getGradient(kernelName);\n    if (gradConfig != null) {\n      const inputsToSave = gradConfig.inputsToSave || [];\n      const outputsToSave = gradConfig.outputsToSave || [];\n      // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs\n      // specified in inputsToSave will be saved.\n      let inputTensorsToSave;\n      if (gradConfig.saveAllInputs) {\n        util.assert(Array.isArray(inputs), () => 'saveAllInputs is true, expected inputs to be an array.');\n        inputTensorsToSave = Object.keys(inputs).map(key => inputs[key]);\n      } else {\n        inputTensorsToSave = inputsToSave.map(inputName => inputs[inputName]);\n      }\n      const outputTensorsToSave = outputs.filter((_, i) => outputsToSave[i]);\n      return inputTensorsToSave.concat(outputTensorsToSave);\n    }\n    // TODO(yassogba) throw exception here once all runkernelFunc calls with\n    // inputsToSave/outputsToSave are removed\n    return null;\n  }\n  /**\n   * Internal method used by public APIs for tensor creation. Makes a new\n   * tensor with the provided shape, dtype and values. It always\n   * creates a new data id and writes the values to the underlying backend.\n   */\n  makeTensor(values, shape, dtype, backend) {\n    if (values == null) {\n      throw new Error('Values passed to engine.makeTensor() are null');\n    }\n    dtype = dtype || 'float32';\n    backend = backend || this.backend;\n    let backendVals = values;\n    if (dtype === 'string' && util.isString(values[0])) {\n      backendVals = values.map(d => util.encodeString(d));\n    }\n    const dataId = backend.write(backendVals, shape, dtype);\n    const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n    this.incRef(t, backend);\n    // Count bytes for string tensors.\n    if (dtype === 'string') {\n      const info = this.state.tensorInfo.get(dataId);\n      const newBytes = bytesFromStringArray(backendVals);\n      this.state.numBytes += newBytes - info.bytes;\n      info.bytes = newBytes;\n    }\n    return t;\n  }\n  /**\n   * Internal method used by backends. Makes a new tensor\n   * that is a wrapper around an existing data id. It doesn't create\n   * a new data id, only increments the ref count used in memory tracking.\n   */\n  makeTensorFromDataId(dataId, shape, dtype, backend) {\n    dtype = dtype || 'float32';\n    const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n    this.incRef(t, backend);\n    return t;\n  }\n  makeVariable(initialValue) {\n    let trainable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let name = arguments.length > 2 ? arguments[2] : undefined;\n    let dtype = arguments.length > 3 ? arguments[3] : undefined;\n    name = name || this.nextVariableId().toString();\n    if (dtype != null && dtype !== initialValue.dtype) {\n      initialValue = initialValue.cast(dtype);\n    }\n    const v = new Variable(initialValue, trainable, name, this.nextTensorId());\n    if (this.state.registeredVariables[v.name] != null) {\n      throw new Error(`Variable with name ${v.name} was already registered`);\n    }\n    this.state.registeredVariables[v.name] = v;\n    this.incRef(v, this.backend);\n    return v;\n  }\n  incRef(a, backend) {\n    const refCount = this.state.tensorInfo.has(a.dataId) ? this.state.tensorInfo.get(a.dataId).refCount : 0;\n    this.state.numTensors++;\n    if (a.dtype === 'string') {\n      this.state.numStringTensors++;\n    }\n    if (refCount === 0) {\n      this.state.numDataBuffers++;\n      // Bytes for complex numbers are counted by their components. Bytes for\n      // string tensors are counted when writing values.\n      let bytes = 0;\n      if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n        bytes = a.size * util.bytesPerElement(a.dtype);\n      }\n      this.state.tensorInfo.set(a.dataId, {\n        backend: backend || this.backend,\n        dtype: a.dtype,\n        shape: a.shape,\n        bytes,\n        refCount: 0\n      });\n      this.state.numBytes += bytes;\n    }\n    this.state.tensorInfo.get(a.dataId).refCount++;\n    if (!(a instanceof Variable)) {\n      this.track(a);\n    }\n  }\n  disposeTensor(a) {\n    if (!this.state.tensorInfo.has(a.dataId)) {\n      return;\n    }\n    this.state.numTensors--;\n    if (a.dtype === 'string') {\n      this.state.numStringTensors--;\n    }\n    const info = this.state.tensorInfo.get(a.dataId);\n    const refCount = info.refCount;\n    if (refCount <= 1) {\n      // Don't count bytes for complex numbers as they are counted by their\n      // components.\n      if (a.dtype !== 'complex64') {\n        this.state.numBytes -= info.bytes;\n      }\n      this.state.numDataBuffers--;\n      info.backend.disposeData(a.dataId);\n      this.state.tensorInfo.delete(a.dataId);\n    } else {\n      // Notify the backend to descrease the ref count for complex tensor\n      // components. This method is only implemented in WebGL right now. When\n      // there are multiple references, complex tensor cannot dispose the\n      // components if ref count is not in sync with engine.\n      info.backend.decComplexRef(a.dataId);\n      this.state.tensorInfo.get(a.dataId).refCount--;\n    }\n    // TODO(nsthorat): Construct an error and save the stack trace for\n    // debugging when in debug mode. Creating a stack trace is too expensive\n    // to do unconditionally.\n  }\n\n  disposeVariables() {\n    for (const varName in this.state.registeredVariables) {\n      const v = this.state.registeredVariables[varName];\n      this.disposeVariable(v);\n    }\n  }\n  disposeVariable(v) {\n    this.disposeTensor(v);\n    if (this.state.registeredVariables[v.name] != null) {\n      delete this.state.registeredVariables[v.name];\n    }\n  }\n  memory() {\n    const info = this.backend.memory();\n    info.numTensors = this.state.numTensors;\n    info.numDataBuffers = this.state.numDataBuffers;\n    info.numBytes = this.state.numBytes;\n    if (this.state.numStringTensors > 0) {\n      info.unreliable = true;\n      if (info.reasons == null) {\n        info.reasons = [];\n      }\n      info.reasons.push('Memory usage by string tensors is approximate ' + '(2 bytes per character)');\n    }\n    return info;\n  }\n  async profile(query) {\n    this.state.profiling = true;\n    const startBytes = this.state.numBytes;\n    const startNumTensors = this.state.numTensors;\n    this.state.activeProfile.kernels = [];\n    this.state.activeProfile.result = await query();\n    this.state.profiling = false;\n    this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));\n    this.state.activeProfile.newBytes = this.state.numBytes - startBytes;\n    this.state.activeProfile.newTensors = this.state.numTensors - startNumTensors;\n    for (const kernel of this.state.activeProfile.kernels) {\n      kernel.kernelTimeMs = await kernel.kernelTimeMs;\n      kernel.extraInfo = await kernel.extraInfo;\n    }\n    return this.state.activeProfile;\n  }\n  isTapeOn() {\n    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;\n  }\n  addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {\n    const tapeNode = {\n      id: this.state.nextTapeNodeId++,\n      kernelName,\n      inputs,\n      outputs,\n      saved\n    };\n    const gradConfig = getGradient(kernelName);\n    if (gradConfig != null) {\n      gradientsFunc = gradConfig.gradFunc;\n    }\n    if (gradientsFunc != null) {\n      tapeNode.gradient = dys => {\n        // TODO(smilkov): To optimize back-prop, pass dys that are not used in\n        // the backprop graph to the user as null instead of zeros\n        dys = dys.map((dy, i) => {\n          if (dy == null) {\n            const output = outputs[i];\n            const vals = util.makeZerosTypedArray(output.size, output.dtype);\n            return this.makeTensor(vals, output.shape, output.dtype);\n          }\n          return dy;\n        });\n        // Grad functions of ops with single outputs expect a dy, while ops\n        // with multiple outputs expect dys (array of dy).\n        return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);\n      };\n    }\n    this.state.activeTape.push(tapeNode);\n  }\n  keep(result) {\n    result.kept = true;\n    return result;\n  }\n  startTape() {\n    if (this.state.gradientDepth === 0) {\n      this.state.activeTape = [];\n    }\n    this.state.gradientDepth++;\n  }\n  endTape() {\n    this.state.gradientDepth--;\n  }\n  /**\n   * Start a scope. Use this with endScope() to achieve the same functionality\n   * as scope() without the need for a function closure.\n   */\n  startScope(name) {\n    const scopeInfo = {\n      track: [],\n      name: 'unnamed scope',\n      id: this.state.nextScopeId++\n    };\n    if (name) {\n      scopeInfo.name = name;\n    }\n    this.state.scopeStack.push(scopeInfo);\n    this.state.activeScope = scopeInfo;\n  }\n  /**\n   * End a scope. Use this with startScope() to achieve the same functionality\n   * as scope() without the need for a function closure.\n   */\n  endScope(result) {\n    const tensorsToTrackInParent = getTensorsInContainer(result);\n    const tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map(t => t.id));\n    // Dispose the arrays tracked in this scope.\n    for (let i = 0; i < this.state.activeScope.track.length; i++) {\n      const tensor = this.state.activeScope.track[i];\n      if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {\n        tensor.dispose();\n      }\n    }\n    const oldScope = this.state.scopeStack.pop();\n    this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1];\n    // Track the current result in the parent scope.\n    tensorsToTrackInParent.forEach(tensor => {\n      // Only track the tensor if was allocated in the inner scope and is not\n      // globally kept.\n      if (!tensor.kept && tensor.scopeId === oldScope.id) {\n        this.track(tensor);\n      }\n    });\n  }\n  /**\n   * Returns gradients of `f` with respect to each of the `xs`. The gradients\n   * returned are of the same length as `xs`, but some might be null if `f`\n   * was not a function of that `x`. It also takes optional dy to multiply the\n   * gradient, which defaults to `1`.\n   */\n  gradients(f, xs, dy) {\n    let allowNoGradients = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    util.assert(xs.length > 0, () => 'gradients() received an empty list of xs.');\n    if (dy != null && dy.dtype !== 'float32') {\n      throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);\n    }\n    const y = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy('forward', f));\n    util.assert(y instanceof Tensor, () => 'The result y returned by f() must be a tensor.');\n    // Filter out the nodes that don't connect x => y.\n    const filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);\n    if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n      throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' + 'that the f you passed encloses all operations that lead from x ' + 'to y.');\n    }\n    return this.tidy('backward', () => {\n      const accumulatedGradientMap = {};\n      accumulatedGradientMap[y.id] = dy == null ? ones(y.shape) : dy;\n      // Backprop gradients through the filtered nodes.\n      backpropagateGradients(accumulatedGradientMap, filteredTape,\n      // Pass the tidy function to avoid circular dep with `tape.ts`.\n      f => this.tidy(f),\n      // Pass an add function to avoide a circular dep with `tape.ts`.\n      add);\n      const grads = xs.map(x => accumulatedGradientMap[x.id]);\n      if (this.state.gradientDepth === 0) {\n        // This means that we are not computing higher-order gradients\n        // and can clean up the tape.\n        this.state.activeTape.forEach(node => {\n          for (const tensor of node.saved) {\n            tensor.dispose();\n          }\n        });\n        this.state.activeTape = null;\n      }\n      return {\n        value: y,\n        grads\n      };\n    });\n  }\n  customGrad(f) {\n    var _this = this;\n    util.assert(util.isFunction(f), () => 'The f passed in customGrad(f) must be a function.');\n    return function () {\n      for (var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++) {\n        inputs[_key] = arguments[_key];\n      }\n      util.assert(inputs.every(t => t instanceof Tensor), () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' + 'tensors');\n      let res;\n      const inputMap = {};\n      inputs.forEach((input, i) => {\n        inputMap[i] = input;\n      });\n      return _this.runKernelFunc((_, save) => {\n        res = f(...[...inputs, save]);\n        util.assert(res.value instanceof Tensor, () => 'The function f passed in customGrad(f) must return an ' + 'object where `obj.value` is a tensor');\n        util.assert(util.isFunction(res.gradFunc), () => 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function.');\n        return res.value;\n      }, inputMap, (dy, saved) => {\n        const gradRes = res.gradFunc(dy, saved);\n        const grads = Array.isArray(gradRes) ? gradRes : [gradRes];\n        util.assert(grads.length === inputs.length, () => 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function that returns ' + 'the same number of tensors as inputs passed to f(...).');\n        util.assert(grads.every(t => t instanceof Tensor), () => 'The function f passed in customGrad(f) must return an ' + 'object where `obj.gradFunc` is a function that returns ' + 'a list of only tensors.');\n        const gradMap = {};\n        grads.forEach((grad, i) => {\n          gradMap[i] = () => grad;\n        });\n        return gradMap;\n      });\n    };\n  }\n  readSync(dataId) {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.readSync(dataId);\n  }\n  read(dataId) {\n    // Route the read to the correct backend.\n    const info = this.state.tensorInfo.get(dataId);\n    return info.backend.read(dataId);\n  }\n  async time(query) {\n    const start = now();\n    const timingInfo = await this.backend.time(query);\n    timingInfo.wallMs = now() - start;\n    return timingInfo;\n  }\n  /**\n   * Tracks a Tensor in the current scope to be automatically cleaned up\n   * when the current scope ends, and returns the value.\n   *\n   * @param result The Tensor to track in the current scope.\n   */\n  track(result) {\n    if (this.state.activeScope != null) {\n      result.scopeId = this.state.activeScope.id;\n      this.state.activeScope.track.push(result);\n    }\n    return result;\n  }\n  get registeredVariables() {\n    return this.state.registeredVariables;\n  }\n  /**\n   * Resets the engine state. Removes all backends but does not remove\n   * registered backend factories.\n   */\n  reset() {\n    // Make any pending promise obsolete.\n    this.pendingBackendInitId++;\n    this.state.dispose();\n    this.ENV.reset();\n    this.state = new EngineState();\n    for (const backendName in this.registry) {\n      this.disposeRegisteredKernels(backendName);\n      this.registry[backendName].dispose();\n      delete this.registry[backendName];\n    }\n    this.backendName = null;\n    this.backendInstance = null;\n    this.pendingBackendInit = null;\n  }\n}\nEngine.nextTensorId = 0;\nEngine.nextVariableId = 0;\nfunction ones(shape) {\n  const values = makeOnesTypedArray(sizeFromShape(shape), 'float32');\n  return ENGINE.makeTensor(values, shape, 'float32');\n}\nexport function getOrMakeEngine() {\n  const ns = getGlobalNamespace();\n  if (ns._tfengine == null) {\n    const environment = new Environment(ns);\n    ns._tfengine = new Engine(environment);\n  }\n  setEnvironmentGlobal(ns._tfengine.ENV);\n  // Tell the current tensor interface that the global engine is responsible\n  // for tracking.\n  setTensorTracker(() => ns._tfengine);\n  return ns._tfengine;\n}\nexport const ENGINE = getOrMakeEngine();\n/**\n * A implementation of the add op for use within engine and tape.\n *\n * This allows us to avoid a circular dependency between add.ts and engine.\n * It is exported to be available in tape tests.\n */\nexport function add(a, b) {\n  // We duplicate Add here to avoid a circular dependency with add.ts.\n  const inputs = {\n    a,\n    b\n  };\n  return ENGINE.runKernel(Add, inputs);\n}","map":{"version":3,"sources":["../src/engine.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAsC,aAAa,QAAO,oBAAoB;AAC9E,SAAQ,WAAW,EAAE,oBAAoB,QAAO,eAAe;AAC/D,SAAQ,kBAAkB,QAAO,eAAe;AAChD,SAAQ,GAAG,EAAE,IAAI,QAAO,gBAAgB;AACxC,SAAQ,WAAW,EAAE,SAAS,EAAE,oBAAoB,QAA2C,mBAAmB;AAClH,SAAuB,QAAQ,QAAO,YAAY;AAClD,SAAQ,sBAAsB,EAAE,oBAAoB,QAAiB,QAAQ;AAC7E,SAAgB,gBAAgB,EAAE,MAAM,EAAiB,QAAQ,QAAO,UAAU;AAElF,SAAQ,qBAAqB,QAAO,eAAe;AAEnD,OAAO,KAAK,IAAI,MAAM,QAAQ;AAC9B,SAAQ,oBAAoB,EAAE,kBAAkB,EAAE,GAAG,EAAE,aAAa,QAAO,QAAQ;AAuDnF,MAAM,WAAW,CAAA;EAAjB,WAAA,GAAA;IACE;IACA,IAAA,CAAA,mBAAmB,GAAqB,CAAA,CAAE;IAE1C,IAAA,CAAA,cAAc,GAAG,CAAC;IAClB,IAAA,CAAA,QAAQ,GAAG,CAAC;IACZ,IAAA,CAAA,UAAU,GAAG,CAAC;IACd,IAAA,CAAA,gBAAgB,GAAG,CAAC;IACpB,IAAA,CAAA,cAAc,GAAG,CAAC;IAGlB;IACA;IACA;IACA,IAAA,CAAA,aAAa,GAAG,CAAC;IACjB;IACA;IACA,IAAA,CAAA,WAAW,GAAG,CAAC;IAIf,IAAA,CAAA,UAAU,GAAiB,EAAE;IAC7B;;;AAGG;IACH,IAAA,CAAA,iBAAiB,GAAa,EAAE;IAChC,IAAA,CAAA,WAAW,GAAG,CAAC;IAEf,IAAA,CAAA,UAAU,GAAG,IAAI,OAAO,EAMpB;IAEJ,IAAA,CAAA,SAAS,GAAG,KAAK;IACjB,IAAA,CAAA,aAAa,GAAgB;MAC3B,QAAQ,EAAE,CAAC;MACX,UAAU,EAAE,CAAC;MACb,SAAS,EAAE,CAAC;MACZ,OAAO,EAAE,EAAE;MACX,MAAM,EAAE,IAAI;MACZ,IAAI,WAAW,GAAA;QACb,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;MAC3D;KACD;EAOH;EALE,OAAO,GAAA;IACL,KAAK,MAAM,YAAY,IAAI,IAAI,CAAC,mBAAmB,EAAE;MACnD,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,OAAO,EAAE;IACjD;EACH;AACD;AAED,OAAM,MAAO,MAAM,CAAA;EAgBjB,WAAA,CAAmB,GAAgB,EAAA;IAAhB,IAAA,CAAA,GAAG,GAAH,GAAG;IAbtB,IAAA,CAAA,QAAQ,GAAkC,CAAA,CAAE;IAC5C,IAAA,CAAA,eAAe,GAKX,CAAA,CAAE;IAKE,IAAA,CAAA,oBAAoB,GAAG,CAAC;IAG9B,IAAI,CAAC,KAAK,GAAG,IAAI,WAAW,EAAE;EAChC;EAEA,MAAM,KAAK,GAAA;IACT,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,EAAE;MACnC,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAK,CAAE,CAAC,CAAC;IAC9C;IACD,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,EAAE;MAChC;IACD;IACD,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,EAAE;IAE/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;MAC9C,MAAM,WAAW,GAAG,cAAc,CAAC,CAAC,CAAC;MACrC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC,OAAO;MACjE,IAAI,OAAO,EAAE;QACX,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;QAClC;MACD;IACF;IAED,MAAM,IAAI,KAAK,CACX,iEAAiE,GACjE,SAAS,CAAC;EAChB;EAEA,IAAI,OAAO,GAAA;IACT,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,EAAE;MACnC,MAAM,IAAI,KAAK,CACX,YAAY,IAAI,CAAC,WAAW,uCAAuC,GACnE,mEAAmE,GACnE,eAAe,CAAC;IACrB;IACD,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,EAAE;MAChC,MAAM;QAAC,IAAI;QAAE;MAAS,CAAC,GAAG,IAAI,CAAC,+BAA+B,EAAE;MAChE,IAAI,SAAS,EAAE;QACb,MAAM,IAAI,KAAK,CACX,iCAAiC,IAAI,qBAAqB,GAC1D,gDAAgD,GAChD,oDAAoD,CAAC;MAC1D;MACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;IACtB;IACD,OAAO,IAAI,CAAC,eAAe;EAC7B;EAEA,YAAY,GAAA;IACV,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC;EAC1C;EAEA,WAAW,CAAC,WAAmB,EAAA;IAC7B,IAAI,EAAE,WAAW,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;MACnC;MACA;MACA,IAAI,WAAW,IAAI,IAAI,CAAC,eAAe,EAAE;QACvC,MAAM;UAAC;QAAS,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC;QACvD,IAAI,SAAS,EAAE;UACb;UACA,OAAO,IAAI;QACZ;OACF,MAAM;QACL,OAAO,IAAI;MACZ;IACF;IACD,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;EACnC;EAEA,kBAAkB,CAAC,WAAmB,EAAA;IAEpC,IAAI,EAAE,WAAW,IAAI,IAAI,CAAC,eAAe,CAAC,EAAE;MAC1C,OAAO,IAAI;IACZ;IACD,OAAO,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,OAAO;EAClD;EAEA,eAAe,CACX,WAAmB,EACnB,OAAqD,EACzC;IAAA,IAAZ,QAAQ,uEAAG,CAAC;IACd,IAAI,WAAW,IAAI,IAAI,CAAC,eAAe,EAAE;MACvC,OAAO,CAAC,IAAI,CACR,GAAG,WAAW,mCAAmC,GACjD,mCAAmC,CAAC;MACxC,OAAO,KAAK;IACb;IACD,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,GAAG;MAAC,OAAO;MAAE;IAAQ,CAAC;IACvD,OAAO,IAAI;EACb;EAEA,MAAM,UAAU,CAAC,WAAmB,EAAA;IAClC,IAAI,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,IAAI,EAAE;MAC7C,MAAM,IAAI,KAAK,CAAC,iBAAiB,WAAW,yBAAyB,CAAC;IACvE;IACD,IAAI,CAAC,WAAW,GAAG,WAAW;IAC9B,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,IAAI,EAAE;MACtC,IAAI,CAAC,eAAe,GAAG,IAAI;MAC3B,MAAM;QAAC,OAAO;QAAE;MAAS,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC;MAChE,MAAM,MAAM,GAAG,SAAS,GAAG,MAAM,OAAO,GAAG,OAAO;MAClD,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,KAAK;MACb;IACF;IACD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;IACjD,IAAI,CAAC,sBAAsB,EAAE;IAC7B;IACA,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC;IAElD,OAAO,IAAI;EACb;EAEQ,sBAAsB,GAAA;IAC5B,MAAM,OAAO,GAAG,oBAAoB,CAAC,IAAI,CAAC,WAAW,CAAC;IACtD,OAAO,CAAC,OAAO,CAAC,MAAM,IAAG;MACvB,IAAI,MAAM,CAAC,SAAS,IAAI,IAAI,EAAE;QAC5B,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC;MACvC;IACH,CAAC,CAAC;EACJ;EAEQ,wBAAwB,CAAC,WAAmB,EAAA;IAClD,MAAM,OAAO,GAAG,oBAAoB,CAAC,WAAW,CAAC;IACjD,OAAO,CAAC,OAAO,CAAC,MAAM,IAAG;MACvB,IAAI,MAAM,CAAC,WAAW,IAAI,IAAI,EAAE;QAC9B,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;MAC/C;IACH,CAAC,CAAC;EACJ;EAEA;;;;;AAKG;EACK,iBAAiB,CAAC,WAAmB,EAAA;IAE3C,MAAM,oBAAoB,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC;IAC9D,IAAI,oBAAoB,IAAI,IAAI,EAAE;MAChC,MAAM,IAAI,KAAK,CACX,6BAA6B,WAAW,0BAA0B,CAAC;IACxE;IAED,IAAI;MACF,MAAM,OAAO,GAAG,oBAAoB,CAAC,OAAO,EAAE;MAC9C;;;;AAIiC;MACjC,IAAI,OAAO,IAAI,EAAE,OAAO,YAAY,aAAa,CAAC,IAC9C,OAAO,OAAO,CAAC,IAAI,KAAK,UAAU,EAAE;QACtC,MAAM,SAAS,GAAG,EAAE,IAAI,CAAC,oBAAoB;QAC7C,MAAM,OAAO,GACT,OAAO,CACF,IAAI,CAAC,eAAe,IAAG;UACtB;UACA,IAAI,SAAS,GAAG,IAAI,CAAC,oBAAoB,EAAE;YACzC,OAAO,KAAK;UACb;UACD,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,eAAe;UAC5C,IAAI,CAAC,kBAAkB,GAAG,IAAI;UAC9B,OAAO,IAAI;QACb,CAAC,CAAC,CACD,KAAK,CAAC,GAAG,IAAG;UACX;UACA,IAAI,SAAS,GAAG,IAAI,CAAC,oBAAoB,EAAE;YACzC,OAAO,KAAK;UACb;UACD,IAAI,CAAC,kBAAkB,GAAG,IAAI;UAC9B,OAAO,CAAC,IAAI,CACR,6BAA6B,WAAW,SAAS,CAAC;UACtD,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,OAAO,CAAC;UACtC,OAAO,KAAK;QACd,CAAC,CAAC;QACV,IAAI,CAAC,kBAAkB,GAAG,OAAO;QACjC,OAAO;UAAC,OAAO;UAAE,SAAS,EAAE;QAAI,CAAC;OAClC,MAAM;QACL,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,OAAwB;QACrD,OAAO;UAAC,OAAO,EAAE,IAAI;UAAE,SAAS,EAAE;QAAK,CAAC;MACzC;KACF,CAAC,OAAO,GAAG,EAAE;MACZ,OAAO,CAAC,IAAI,CAAC,6BAA6B,WAAW,SAAS,CAAC;MAC/D,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,OAAO,CAAC;MACtC,OAAO;QAAC,OAAO,EAAE,KAAK;QAAE,SAAS,EAAE;MAAK,CAAC;IAC1C;EACH;EAEA,aAAa,CAAC,WAAmB,EAAA;IAC/B,IAAI,EAAE,WAAW,IAAI,IAAI,CAAC,eAAe,CAAC,EAAE;MAC1C,MAAM,IAAI,KAAK,CAAC,GAAG,WAAW,gCAAgC,CAAC;IAChE;IACD,IAAI,IAAI,CAAC,WAAW,KAAK,WAAW,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,EAAE;MACvE;MACA;MACA,IAAI,CAAC,oBAAoB,EAAE;IAC5B;IAED,IAAI,WAAW,IAAI,IAAI,CAAC,QAAQ,EAAE;MAChC,IAAI,CAAC,wBAAwB,CAAC,WAAW,CAAC;MAC1C,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE;MACpC,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;IAClC;IAED,OAAO,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC;IAExC;IACA,IAAI,IAAI,CAAC,WAAW,KAAK,WAAW,EAAE;MACpC,IAAI,CAAC,kBAAkB,GAAG,IAAI;MAC9B,IAAI,CAAC,WAAW,GAAG,IAAI;MACvB,IAAI,CAAC,eAAe,GAAG,IAAI;IAC5B;EACH;EAEQ,iBAAiB,GAAA;IACvB,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;MAClD,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC;IACjD;IACD,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAS,EAAE,CAAS,KAAI;MACrE;MACA,OAAO,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,QAAQ,GACnC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,QAAQ;IACtC,CAAC,CAAC;EACJ;EAEQ,+BAA+B,GAAA;IAErC,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,EAAE;IAE/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;MAC9C,MAAM,WAAW,GAAG,cAAc,CAAC,CAAC,CAAC;MACrC,MAAM;QAAC,OAAO;QAAE;MAAS,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC;MAChE,IAAI,SAAS,IAAI,OAAO,EAAE;QACxB,OAAO;UAAC,IAAI,EAAE,WAAW;UAAE;QAAS,CAAC;MACtC;IACF;IACD,MAAM,IAAI,KAAK,CACX,iEAAiE,GACjE,SAAS,CAAC;EAChB;EAEA,QAAQ,CAAC,OAAsB,EAAE,MAAc,EAAA;IAC7C,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;IAC9C,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO;IAC/B,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;IACpC;IACA;IACA,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC;IAC9B,IAAI,CAAC,OAAO,GAAG,OAAO;IACtB,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC;IACpD,IAAI,IAAI,CAAC,sBAAsB,EAAE,EAAE;MACjC;MACA;MACA,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;IACxE;EACH;EAEA,IAAI,CAA4B,QAA2B,EAAE,EAAe,EAAA;IAE1E,IAAI,IAAI,GAAW,IAAI;IACvB,IAAI,EAAE,IAAI,IAAI,EAAE;MACd;MACA,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;QAClC,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC;MACvD;MACD,EAAE,GAAG,QAAQ;KACd,MAAM;MACL;MACA,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,EAAE,QAAQ,YAAY,MAAM,CAAC,EAAE;QACjE,MAAM,IAAI,KAAK,CACX,sDAAsD,GACtD,4BAA4B,CAAC;MAClC;MACD,IAAI,OAAO,EAAE,KAAK,UAAU,EAAE;QAC5B,MAAM,IAAI,KAAK,CACX,oDAAoD,GACpD,8BAA8B,CAAC;MACpC;MACD,IAAI,GAAG,QAAkB;MACzB;MACA;IACD;;IACD,IAAI,MAAS;IACb,OAAO,IAAI,CAAC,SAAS,CACjB,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,MAAK;MAC7D,MAAM,GAAG,EAAE,EAAE;MACb,IAAI,MAAM,YAAY,OAAO,EAAE;QAC7B,OAAO,CAAC,KAAK,CAAC,yCAAyC,CAAC;MACzD;MACD,OAAO,MAAM;IACf,CAAC,CAAC;EACR;EAEQ,SAAS,CAAI,KAAiB,EAAE,GAAe,EAAE,CAAU,EAAA;IACjE,KAAK,EAAE;IACP,IAAI;MACF,MAAM,GAAG,GAAG,CAAC,EAAE;MACf,GAAG,EAAE;MACL,OAAO,GAAG;KACX,CAAC,OAAO,EAAE,EAAE;MACX,GAAG,EAAE;MACL,MAAM,EAAE;IACT;EACH;EAGQ,YAAY,GAAA;IAClB,OAAO,MAAM,CAAC,YAAY,EAAE;EAC9B;EAGQ,cAAc,GAAA;IACpB,OAAO,MAAM,CAAC,cAAc,EAAE;EAChC;EAEA;;;;;;;;AAQG;EACK,KAAK,CAAC,CAAS,EAAA;IACrB,MAAM,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC;IAC/D,MAAM,MAAM,GAAG;MAAC;IAAC,CAAC;IAClB,MAAM,IAAI,GAAI,EAAU,KAAM;MAC5B,CAAC,EAAE,MAAK;QACN,MAAM,KAAK,GAAG,SAAS;QACvB,MAAM,UAAU,GAAG;UAAC,CAAC,EAAE;QAAE,CAAC;QAC1B,MAAM,KAAK,GAAG;UAAC;QAAK,CAAC;QAErB,OAAO,MAAM,CAAC,aAAa,CACvB,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,EAClC,UAAkC,EAAE,IAAI,CAAC,YAAY,IAAI,EACzD,KAA2B,CAAC;MAClC;KACD,CAAC;IACF,MAAM,KAAK,GAAa,EAAE;IAC1B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAA,CAAE,CAAC;IAC3E,OAAO,CAAC;EACV;EAEA;;;;;;;;;;;;AAYG;EACH,SAAS,CACL,UAAkB,EAAE,MAAsB,EAAE,KAAoB,EAChE,YAAuB,EAAE,aAAyB,EAAA;IACpD,MAAM,WAAW,GAAS,IAAI;IAC9B,MAAM,aAAa,GAAS,IAAI;IAChC;IACA;IACA;IACA,OAAO,IAAI,CAAC,aAAa,CACrB,WAAW,EAAE,MAAM,EAAE,aAAa,EAAE,UAAU,EAAE,KAAK,EAAE,YAAY,EACnE,aAAa,CAAC;EACpB;EAEQ,sBAAsB,GAAA;IAC5B,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC;EACpC;EAEQ,qBAAqB,CACzB,UAAkB,EAAE,gBAAwB,EAC5C,QAAsB,EAAA;IACxB,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;IAEjD;IACA,IAAI,gBAAgB,GAAG,CAAC;IACxB,QAAQ,CAAC,OAAO,CAAC,IAAI,IAAG;MACtB;MACA;MACA,gBAAgB,IAAK,IAAI,CAAC,KAAK,KAAK,WAAW,GAAG,CAAC,GAAG,CAAE;IAC1D,CAAC,CAAC;IAEF;IACA;IACA;IACA;IACA;IACA,MAAM,QAAQ,GACV,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;IACzE,MAAM,aAAa,GACf,eAAe,GAAG,gBAAgB,GAAG,gBAAgB,GAAG,QAAQ;IACpE,IAAI,aAAa,GAAG,CAAC,EAAE;MACrB,MAAM,IAAI,KAAK,CACX,YAAY,IAAI,CAAC,WAAW,gCAAgC,GAC5D,IAAI,aAAa,6BAA6B,UAAU,GAAG,CAAC;IACjE;EACH;EAEA;;;AAGG;EACH,aAAa,CACT,WAA2B,EAAE,MAAS,EACtC,aAAwE,EACxE,UAAmB,EAAE,KAAoB,EAAE,YAAuB,EAClE,aAAyB,EAAA;IAC3B,IAAI,OAAiB;IACrB,IAAI,KAAK,GAAa,EAAE;IACxB,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE;IAChC,IAAI,UAAU,IAAI,IAAI,EAAE;MACtB,UAAU,GACN,IAAI,CAAC,KAAK,CAAC,WAAW,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,GAAG,EAAE;IACtE;IAED,MAAM,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ;IAC7C,MAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU;IAEhD,IAAI,IAAI,CAAC,sBAAsB,EAAE,EAAE;MACjC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;IACrC;IAED,IAAI,UAA0B;IAC9B,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,EAAE;MAC5B;MACA;MACA;MACA;MACA;MACA,IAAI,CAAC,OAAO;IACb;IACD,MAAM,MAAM,GAAG,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC;IACtD,IAAI,GAA4B;IAChC,IAAI,MAAM,IAAI,IAAI,EAAE;MAClB,UAAU,GAAG,MAAK;QAChB,MAAM,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;QAClD,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC;UAAC,MAAM;UAAE,KAAK;UAAE,OAAO,EAAE,IAAI,CAAC;QAAO,CAAC,CAAC;QAC/D,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;QACjD,IAAI,IAAI,CAAC,sBAAsB,EAAE,EAAE;UACjC,IAAI,CAAC,qBAAqB,CAAC,UAAU,EAAE,gBAAgB,EAAE,QAAQ,CAAC;QACnE;QAED,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAE,OAA0B,IAAI;UAC7D;UACA;UACA;UACA,IAAK,OAAkB,CAAC,IAAI,IAAI,IAAI,EAAE;YACpC,OAAO,OAAiB;UACzB;UACD,MAAM;YAAC,MAAM;YAAE,KAAK;YAAE;UAAK,CAAC,GAAG,OAAqB;UACpD,OAAO,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC;QACxD,CAAC,CAAC;QAEF;QACA;QACA;QACA;QACA,IAAI,QAAQ,EAAE;UACZ,IAAI,aAAa,GACb,IAAI,CAAC,qBAAqB,CAAC,UAAU,EAAE,MAAM,EAAE,UAAU,CAAC;UAC9D,IAAI,aAAa,IAAI,IAAI,EAAE;YACzB;YACA;YACA;YACA;YACA,IAAI,aAAa,IAAI,IAAI,EAAE;cACzB,aAAa,GAAG,EAAE;YACnB;YACD,MAAM,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,aAAa,CAAC,CAAC,CAAC,CAAC;YAChE,aAAa,GAAG,CAAC,YAAY,IAAI,EAAE,EAAE,KAAK,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC;UAChE;UACD,KAAK,GAAG,IAAI,CAAC,0BAA0B,CAAC,aAAa,CAAC;QACvD;QACD,OAAO,UAAU;MACnB,CAAC;KACF,MAAM;MACL,IAAI,WAAW,IAAI,IAAI,EAAE;QACvB,MAAM,IAAI,KAAK,CAAC,iBACZ,UAAU,kDAAkD,CAAC;MAClE;MACD,MAAM,QAAQ,GAAkB,OAAO,IAAI;QACzC;QACA;QACA;QACA,IAAI,CAAC,QAAQ,EAAE;UACb;QACD;QACD,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;MAC9D,CAAC;MAED,UAAU,GAAG,MAAK;QAChB,MAAM,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;QAClD,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAC1D,MAAM,IAAI,GAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAc;QAC3D,IAAI,IAAI,CAAC,sBAAsB,EAAE,EAAE;UACjC,IAAI,CAAC,qBAAqB,CAAC,UAAU,EAAE,gBAAgB,EAAE,IAAI,CAAC;QAC/D;QACD,OAAO,IAAI;MACb,CAAC;IACF;IAED;IACA,IAAI,aAA4B;IAChC,IAAI,CAAC,SAAS,CACV,MAAM,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,MAAM,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,MAAK;MACnE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;QACvD,OAAO,GAAG,UAAU,EAAE;OACvB,MAAM;QACL,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CACvC,UAAU,EAAE,MAAM,EAAE,MAAM,UAAU,EAAE,CAAC;QAC3C,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;UAC7B,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,aAAa,CAAC;QAC9C;QACD,OAAO,GAAG,aAAa,CAAC,OAAO;MAChC;IACH,CAAC,CAAC;IAEN,IAAI,QAAQ,EAAE;MACZ,IAAI,CAAC,WAAW,CACZ,UAAU,EAAE,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,KAAK,CAAC;IAC9D;IAED,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;MACxB,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC;QACpC,IAAI,EAAE,UAAU;QAChB,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,iBAAiB;QACnD,kBAAkB,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ;QACvC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,kBAAkB;QACxD,oBAAoB,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU;QAC3C,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAChC,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;QAC1D,YAAY,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC;QAC7C,YAAY,EAAE,aAAa,CAAC,MAAM;QAClC,SAAS,EAAE,aAAa,CAAC;OAC1B,CAAC;IACH;IACD,OAAQ,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC;EACnD;EAEA;;;;AAIG;EACK,0BAA0B,CAAC,OAAiB,EAAA;IAClD,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;IAClE,OAAO,KAAK;EACd;EAEA;;;;;;;;;AASG;EACK,qBAAqB,CACzB,UAAkB,EAAE,MAAsB,EAC1C,OAAiB,EAAA;IACnB,MAAM,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC;IAC1C,IAAI,UAAU,IAAI,IAAI,EAAE;MACtB,MAAM,YAAY,GAAa,UAAU,CAAC,YAAY,IAAI,EAAE;MAC5D,MAAM,aAAa,GAAc,UAAU,CAAC,aAAa,IAAI,EAAE;MAE/D;MACA;MACA,IAAI,kBAA4B;MAChC,IAAI,UAAU,CAAC,aAAa,EAAE;QAC5B,IAAI,CAAC,MAAM,CACP,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EACrB,MAAM,wDAAwD,CAAC;QAEnE,kBAAkB,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAE,GAAG,IAAK,MAAM,CAAC,GAAG,CAAC,CAAC;OACnE,MAAM;QACL,kBAAkB,GAAG,YAAY,CAAC,GAAG,CAAE,SAAS,IAAK,MAAM,CAAC,SAAS,CAAC,CAAC;MACxE;MAED,MAAM,mBAAmB,GACrB,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,aAAa,CAAC,CAAC,CAAC,CAAC;MAE9C,OAAO,kBAAkB,CAAC,MAAM,CAAC,mBAAmB,CAAC;IACtD;IACD;IACA;IACA,OAAO,IAAI;EACb;EAEA;;;;AAIG;EACH,UAAU,CACN,MAAkB,EAAE,KAAe,EAAE,KAAe,EACpD,OAAuB,EAAA;IACzB,IAAI,MAAM,IAAI,IAAI,EAAE;MAClB,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC;IACjE;IACD,KAAK,GAAG,KAAK,IAAI,SAAS;IAC1B,OAAO,GAAG,OAAO,IAAI,IAAI,CAAC,OAAO;IACjC,IAAI,WAAW,GAAG,MAAuB;IACzC,IAAI,KAAK,KAAK,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;MAClD,WAAW,GAAI,MAAmB,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IAClE;IACD,MAAM,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,EAAE,KAAK,CAAC;IACvD,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC;IAC/D,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC;IAEvB;IACA,IAAI,KAAK,KAAK,QAAQ,EAAE;MACtB,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;MAC9C,MAAM,QAAQ,GAAG,oBAAoB,CAAC,WAA2B,CAAC;MAClE,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK;MAC5C,IAAI,CAAC,KAAK,GAAG,QAAQ;IACtB;IACD,OAAO,CAAC;EACV;EAEA;;;;AAIG;EACH,oBAAoB,CAChB,MAAc,EAAE,KAAe,EAAE,KAAe,EAChD,OAAuB,EAAA;IACzB,KAAK,GAAG,KAAK,IAAI,SAAS;IAC1B,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC;IAC/D,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC;IACvB,OAAO,CAAC;EACV;EAEA,YAAY,CACR,YAAoB,EACJ;IAAA,IADM,SAAS,uEAAG,IAAI;IAAA,IAAE,IAAa;IAAA,IACrD,KAAgB;IAClB,IAAI,GAAG,IAAI,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC,QAAQ,EAAE;IAC/C,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,KAAK,YAAY,CAAC,KAAK,EAAE;MACjD,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC;IACxC;IACD,MAAM,CAAC,GAAG,IAAI,QAAQ,CAAC,YAAY,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC;IAC1E,IAAI,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE;MAClD,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC,IAAI,yBAAyB,CAAC;IACvE;IACD,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;IAC1C,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC;IAC5B,OAAO,CAAC;EACV;EAEA,MAAM,CAAC,CAAS,EAAE,OAAsB,EAAA;IACtC,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,GAChD,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,QAAQ,GAC5C,CAAC;IACL,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;IACvB,IAAI,CAAC,CAAC,KAAK,KAAK,QAAQ,EAAE;MACxB,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE;IAC9B;IACD,IAAI,QAAQ,KAAK,CAAC,EAAE;MAClB,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;MAE3B;MACA;MACA,IAAI,KAAK,GAAG,CAAC;MACb,IAAI,CAAC,CAAC,KAAK,KAAK,WAAW,IAAI,CAAC,CAAC,KAAK,KAAK,QAAQ,EAAE;QACnD,KAAK,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,KAAK,CAAC;MAC/C;MACD,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE;QAClC,OAAO,EAAE,OAAO,IAAI,IAAI,CAAC,OAAO;QAChC,KAAK,EAAE,CAAC,CAAC,KAAK;QACd,KAAK,EAAE,CAAC,CAAC,KAAK;QACd,KAAK;QACL,QAAQ,EAAE;OACX,CAAC;MACF,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,KAAK;IAC7B;IAED,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE;IAE9C,IAAI,EAAE,CAAC,YAAY,QAAQ,CAAC,EAAE;MAC5B,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACd;EACH;EAEA,aAAa,CAAC,CAAS,EAAA;IACrB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE;MACxC;IACD;IAED,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;IACvB,IAAI,CAAC,CAAC,KAAK,KAAK,QAAQ,EAAE;MACxB,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE;IAC9B;IACD,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC;IAChD,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ;IAE9B,IAAI,QAAQ,IAAI,CAAC,EAAE;MACjB;MACA;MACA,IAAI,CAAC,CAAC,KAAK,KAAK,WAAW,EAAE;QAC3B,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK;MAClC;MACD,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;MAE3B,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC;MAClC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;KACvC,MAAM;MACL;MACA;MACA;MACA;MACA,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC;MACpC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE;IAC/C;IACD;IACA;IACA;EACF;;EAEA,gBAAgB,GAAA;IACd,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE;MACpD,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,OAAO,CAAC;MACjD,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;IACxB;EACH;EAEA,eAAe,CAAC,CAAW,EAAA;IACzB,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;IACrB,IAAI,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE;MAClD,OAAO,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC;IAC9C;EACH;EAEA,MAAM,GAAA;IACJ,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAgB;IAChD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU;IACvC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc;IAC/C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ;IACnC,IAAI,IAAI,CAAC,KAAK,CAAC,gBAAgB,GAAG,CAAC,EAAE;MACnC,IAAI,CAAC,UAAU,GAAG,IAAI;MACtB,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,EAAE;QACxB,IAAI,CAAC,OAAO,GAAG,EAAE;MAClB;MACD,IAAI,CAAC,OAAO,CAAC,IAAI,CACb,gDAAgD,GAChD,yBAAyB,CAAC;IAC/B;IACD,OAAO,IAAI;EACb;EAEA,MAAM,OAAO,CAAC,KAAyD,EAAA;IAErE,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI;IAE3B,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ;IACtC,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU;IAE7C,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,GAAG,EAAE;IACrC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,GAAG,MAAM,KAAK,EAAE;IAE/C,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,KAAK;IAE5B,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,CACzC,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,kBAAkB,CAAC,CAAC;IACvE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,UAAU;IACpE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,UAAU,GAC/B,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,eAAe;IAC3C,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,EAAE;MACrD,MAAM,CAAC,YAAY,GAAG,MAAM,MAAM,CAAC,YAAY;MAC/C,MAAM,CAAC,SAAS,GAAG,MAAM,MAAM,CAAC,SAAS;IAC1C;IACD,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa;EACjC;EAEA,QAAQ,GAAA;IACN,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,KAAK,CAAC;EACrE;EAEQ,WAAW,CACf,UAAkB,EAAE,MAAsB,EAAE,OAAiB,EAC7D,aAAuB,EAAE,KAAe,EAAE,KAAmB,EAAA;IAC/D,MAAM,QAAQ,GACV;MAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;MAAE,UAAU;MAAE,MAAM;MAAE,OAAO;MAAE;IAAK,CAAC;IAEzE,MAAM,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC;IAC1C,IAAI,UAAU,IAAI,IAAI,EAAE;MACtB,aAAa,GAAG,UAAU,CAAC,QAAQ;IACpC;IACD,IAAI,aAAa,IAAI,IAAI,EAAE;MACzB,QAAQ,CAAC,QAAQ,GAAI,GAAa,IAAI;QACpC;QACA;QACA,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,KAAI;UACtB,IAAI,EAAE,IAAI,IAAI,EAAE;YACd,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC;YACzB,MAAM,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC;YAChE,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC;UACzD;UACD,OAAO,EAAE;QACX,CAAC,CAAC;QACF;QACA;QACA,OAAO,aAAa,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC;MACnE,CAAC;IACF;IACD,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;EACtC;EAEA,IAAI,CAAmB,MAAS,EAAA;IAC9B,MAAM,CAAC,IAAI,GAAG,IAAI;IAClB,OAAO,MAAM;EACf;EAEQ,SAAS,GAAA;IACf,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,KAAK,CAAC,EAAE;MAClC,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,EAAE;IAC3B;IACD,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;EAC5B;EAEQ,OAAO,GAAA;IACb,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;EAC5B;EAEA;;;AAGG;EACH,UAAU,CAAC,IAAa,EAAA;IACtB,MAAM,SAAS,GAAe;MAC5B,KAAK,EAAE,EAAE;MACT,IAAI,EAAE,eAAe;MACrB,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW;KAC3B;IACD,IAAI,IAAI,EAAE;MACR,SAAS,CAAC,IAAI,GAAG,IAAI;IACtB;IACD,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC;IACrC,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,SAAS;EACpC;EAEA;;;AAGG;EACH,QAAQ,CAAC,MAAwB,EAAA;IAC/B,MAAM,sBAAsB,GAAG,qBAAqB,CAAC,MAAM,CAAC;IAC5D,MAAM,yBAAyB,GAC3B,IAAI,GAAG,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;IAElD;IACA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;MAC5D,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;MAC9C,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE;QAC7D,MAAM,CAAC,OAAO,EAAE;MACjB;IACF;IAED,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,EAAE;IAC5C,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,GACvD,IAAI,GACJ,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;IAE3D;IACA,sBAAsB,CAAC,OAAO,CAAC,MAAM,IAAG;MACtC;MACA;MACA,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,OAAO,KAAK,QAAQ,CAAC,EAAE,EAAE;QAClD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;MACnB;IACH,CAAC,CAAC;EACJ;EAEA;;;;;AAKG;EACH,SAAS,CACL,CAAU,EAAE,EAAY,EAAE,EAAM,EACR;IAAA,IAAxB,gBAAgB,uEAAG,KAAK;IAC1B,IAAI,CAAC,MAAM,CACP,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,2CAA2C,CAAC;IACrE,IAAI,EAAE,IAAI,IAAI,IAAI,EAAE,CAAC,KAAK,KAAK,SAAS,EAAE;MACxC,MAAM,IAAI,KAAK,CAAC,0CAA0C,EAAE,CAAC,KAAK,GAAG,CAAC;IACvE;IAED,MAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CACpB,MAAM,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM,IAAI,CAAC,OAAO,EAAE,EAC5C,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;IAElC,IAAI,CAAC,MAAM,CACP,CAAC,YAAY,MAAM,EACnB,MAAM,gDAAgD,CAAC;IAC3D;IACA,MAAM,YAAY,GAAG,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE,EAAE,CAAC,CAAC;IACvE,IAAI,CAAC,gBAAgB,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE;MACnE,MAAM,IAAI,KAAK,CACX,iEAAiE,GACjE,iEAAiE,GACjE,OAAO,CAAC;IACb;IAED,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,MAAK;MAChC,MAAM,sBAAsB,GAAiC,CAAA,CAAE;MAC/D,sBAAsB,CAAC,CAAC,CAAC,EAAE,CAAC,GAAI,EAAE,IAAI,IAAI,GAAI,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE;MAEhE;MACA,sBAAsB,CAClB,sBAAsB,EAAE,YAAY;MACpC;MACA,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAoB,CAAC;MACpC;MACA,GAAG,CAAC;MACR,MAAM,KAAK,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,sBAAsB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;MAEvD,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,KAAK,CAAC,EAAE;QAClC;QACA;QACA,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,IAAG;UACnC,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,KAAK,EAAE;YAC/B,MAAM,CAAC,OAAO,EAAE;UACjB;QACH,CAAC,CAAC;QACF,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,IAAI;MAC7B;MACD,OAAO;QAAC,KAAK,EAAE,CAAC;QAAE;MAAK,CAAC;IAC1B,CAAC,CAAC;EACJ;EAEA,UAAU,CAAmB,CAAwB,EAAA;IAAA;IAEnD,IAAI,CAAC,MAAM,CACP,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAClB,MAAM,mDAAmD,CAAC;IAC9D,OAAO,YAA2B;MAAA,kCAAvB,MAAgB;QAAhB,MAAgB;MAAA;MACzB,IAAI,CAAC,MAAM,CACP,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,YAAY,MAAM,CAAC,EACtC,MAAM,2DAA2D,GAC7D,SAAS,CAAC;MAElB,IAAI,GAGH;MACD,MAAM,QAAQ,GAAmB,CAAA,CAAE;MACnC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,CAAC,KAAI;QAC1B,QAAQ,CAAC,CAAC,CAAC,GAAG,KAAK;MACrB,CAAC,CAAC;MACF,OAAO,KAAI,CAAC,aAAa,CACrB,CAAC,CAAC,EAAE,IAAI,KAAI;QACV,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,EAAE,IAAI,CAAC,CAAC;QAC7B,IAAI,CAAC,MAAM,CACP,GAAG,CAAC,KAAK,YAAY,MAAM,EAC3B,MAAM,wDAAwD,GAC1D,sCAAsC,CAAC;QAC/C,IAAI,CAAC,MAAM,CACP,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,EAC7B,MAAM,wDAAwD,GAC1D,4CAA4C,CAAC;QACrD,OAAO,GAAG,CAAC,KAAK;MAClB,CAAC,EACD,QAAQ,EACR,CAAC,EAAK,EAAE,KAAe,KAAI;QACzB,MAAM,OAAO,GAAG,GAAG,CAAC,QAAQ,CAAC,EAAE,EAAE,KAAK,CAAC;QACvC,MAAM,KAAK,GACP,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,OAAO,GAAG,CAAC,OAAO,CAAC;QAChD,IAAI,CAAC,MAAM,CACP,KAAK,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,EAC9B,MAAM,wDAAwD,GAC1D,yDAAyD,GACzD,wDAAwD,CAAC;QACjE,IAAI,CAAC,MAAM,CACP,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,YAAY,MAAM,CAAC,EACrC,MAAM,wDAAwD,GAC1D,yDAAyD,GACzD,yBAAyB,CAAC;QAClC,MAAM,OAAO,GAAkC,CAAA,CAAE;QACjD,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,KAAI;UACxB,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM,IAAI;QACzB,CAAC,CAAC;QACF,OAAO,OAAO;MAChB,CAAC,CAAC;IACR,CAAC;EACH;EAEA,QAAQ,CAAC,MAAc,EAAA;IACrB;IACA,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;IAC9C,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC;EACtC;EACA,IAAI,CAAC,MAAc,EAAA;IACjB;IACA,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;IAC9C,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;EAClC;EAEA,MAAM,IAAI,CAAC,KAAiB,EAAA;IAC1B,MAAM,KAAK,GAAG,GAAG,EAAE;IACnB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAe;IAC/D,UAAU,CAAC,MAAM,GAAG,GAAG,EAAE,GAAG,KAAK;IACjC,OAAO,UAAU;EACnB;EAEA;;;;;AAKG;EACK,KAAK,CAAmB,MAAS,EAAA;IACvC,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,IAAI,IAAI,EAAE;MAClC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE;MAC1C,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;IAC1C;IAED,OAAO,MAAM;EACf;EAEA,IAAI,mBAAmB,GAAA;IACrB,OAAO,IAAI,CAAC,KAAK,CAAC,mBAAmB;EACvC;EAEA;;;AAGG;EACH,KAAK,GAAA;IACH;IACA,IAAI,CAAC,oBAAoB,EAAE;IAE3B,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;IACpB,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE;IAChB,IAAI,CAAC,KAAK,GAAG,IAAI,WAAW,EAAE;IAE9B,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,QAAQ,EAAE;MACvC,IAAI,CAAC,wBAAwB,CAAC,WAAW,CAAC;MAC1C,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE;MACpC,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;IAClC;IACD,IAAI,CAAC,WAAW,GAAG,IAAI;IACvB,IAAI,CAAC,eAAe,GAAG,IAAI;IAC3B,IAAI,CAAC,kBAAkB,GAAG,IAAI;EAChC;;AAzuBe,MAAA,CAAA,YAAY,GAAG,CAAC;AAKhB,MAAA,CAAA,cAAc,GAAG,CAAC;AAuuBnC,SAAS,IAAI,CAAC,KAAe,EAAA;EAC3B,MAAM,MAAM,GAAG,kBAAkB,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,SAAS,CAAC;EAClE,OAAO,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,KAAK,EAAE,SAAS,CAAC;AACpD;AAEA,OAAM,SAAU,eAAe,GAAA;EAC7B,MAAM,EAAE,GAAG,kBAAkB,EAA+B;EAC5D,IAAI,EAAE,CAAC,SAAS,IAAI,IAAI,EAAE;IACxB,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,EAAE,CAAC;IACvC,EAAE,CAAC,SAAS,GAAG,IAAI,MAAM,CAAC,WAAW,CAAC;EACvC;EACD,oBAAoB,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC;EAEtC;EACA;EACA,gBAAgB,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC;EACpC,OAAO,EAAE,CAAC,SAAS;AACrB;AAEA,OAAO,MAAM,MAAM,GAAG,eAAe,EAAE;AAEvC;;;;;AAKG;AACH,OAAM,SAAU,GAAG,CAAC,CAAS,EAAE,CAAS,EAAA;EACtC;EACA,MAAM,MAAM,GAAG;IAAC,CAAC;IAAE;EAAC,CAAC;EACrB,OAAO,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,MAA8B,CAAC;AAC9D","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { KernelBackend } from './backends/backend';\nimport { Environment, setEnvironmentGlobal } from './environment';\nimport { getGlobalNamespace } from './global_util';\nimport { Add, Cast } from './kernel_names';\nimport { getGradient, getKernel, getKernelsForBackend } from './kernel_registry';\nimport { Profiler } from './profiler';\nimport { backpropagateGradients, getFilteredNodesXToY } from './tape';\nimport { setTensorTracker, Tensor, Variable } from './tensor';\nimport { getTensorsInContainer } from './tensor_util';\nimport * as util from './util';\nimport { bytesFromStringArray, makeOnesTypedArray, now, sizeFromShape } from './util';\nclass EngineState {\n    constructor() {\n        // Public since optimizers will use it.\n        this.registeredVariables = {};\n        this.nextTapeNodeId = 0;\n        this.numBytes = 0;\n        this.numTensors = 0;\n        this.numStringTensors = 0;\n        this.numDataBuffers = 0;\n        // Number of nested tf.grad() statements when computing higher-order\n        // gradients. E.g. `1` for first-order gradients and `2` for second-order\n        // gradients. Used to track if the tape should be removed after a backprop.\n        this.gradientDepth = 0;\n        // Number of nested kernel calls. When kernel depth is greater than 1, we turn\n        // off the tape.\n        this.kernelDepth = 0;\n        this.scopeStack = [];\n        /**\n         * Keeps track of the number of data moves during a kernel execution. We\n         * maintain a stack since kernels can call other kernels, recursively.\n         */\n        this.numDataMovesStack = [];\n        this.nextScopeId = 0;\n        this.tensorInfo = new WeakMap();\n        this.profiling = false;\n        this.activeProfile = {\n            newBytes: 0,\n            newTensors: 0,\n            peakBytes: 0,\n            kernels: [],\n            result: null,\n            get kernelNames() {\n                return Array.from(new Set(this.kernels.map(k => k.name)));\n            }\n        };\n    }\n    dispose() {\n        for (const variableName in this.registeredVariables) {\n            this.registeredVariables[variableName].dispose();\n        }\n    }\n}\nexport class Engine {\n    constructor(ENV) {\n        this.ENV = ENV;\n        this.registry = {};\n        this.registryFactory = {};\n        this.pendingBackendInitId = 0;\n        this.state = new EngineState();\n    }\n    async ready() {\n        if (this.pendingBackendInit != null) {\n            return this.pendingBackendInit.then(() => { });\n        }\n        if (this.backendInstance != null) {\n            return;\n        }\n        const sortedBackends = this.getSortedBackends();\n        for (let i = 0; i < sortedBackends.length; i++) {\n            const backendName = sortedBackends[i];\n            const success = await this.initializeBackend(backendName).success;\n            if (success) {\n                await this.setBackend(backendName);\n                return;\n            }\n        }\n        throw new Error(`Could not initialize any backends, all backend initializations ` +\n            `failed.`);\n    }\n    get backend() {\n        if (this.pendingBackendInit != null) {\n            throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make ` +\n                `sure to await tf.ready() or await tf.setBackend() before calling ` +\n                `other methods`);\n        }\n        if (this.backendInstance == null) {\n            const { name, asyncInit } = this.initializeBackendsAndReturnBest();\n            if (asyncInit) {\n                throw new Error(`The highest priority backend '${name}' has not yet been ` +\n                    `initialized. Make sure to await tf.ready() or ` +\n                    `await tf.setBackend() before calling other methods`);\n            }\n            this.setBackend(name);\n        }\n        return this.backendInstance;\n    }\n    backendNames() {\n        return Object.keys(this.registryFactory);\n    }\n    findBackend(backendName) {\n        if (!(backendName in this.registry)) {\n            // If the backend hasn't been initialized but we have a registry entry for\n            // it, initialize it and return it.\n            if (backendName in this.registryFactory) {\n                const { asyncInit } = this.initializeBackend(backendName);\n                if (asyncInit) {\n                    // Backend is not ready yet.\n                    return null;\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        return this.registry[backendName];\n    }\n    findBackendFactory(backendName) {\n        if (!(backendName in this.registryFactory)) {\n            return null;\n        }\n        return this.registryFactory[backendName].factory;\n    }\n    registerBackend(backendName, factory, priority = 1) {\n        if (backendName in this.registryFactory) {\n            console.warn(`${backendName} backend was already registered. ` +\n                `Reusing existing backend factory.`);\n            return false;\n        }\n        this.registryFactory[backendName] = { factory, priority };\n        return true;\n    }\n    async setBackend(backendName) {\n        if (this.registryFactory[backendName] == null) {\n            throw new Error(`Backend name '${backendName}' not found in registry`);\n        }\n        this.backendName = backendName;\n        if (this.registry[backendName] == null) {\n            this.backendInstance = null;\n            const { success, asyncInit } = this.initializeBackend(backendName);\n            const result = asyncInit ? await success : success;\n            if (!result) {\n                return false;\n            }\n        }\n        this.backendInstance = this.registry[backendName];\n        this.setupRegisteredKernels();\n        // Reset the profiler.\n        this.profiler = new Profiler(this.backendInstance);\n        return true;\n    }\n    setupRegisteredKernels() {\n        const kernels = getKernelsForBackend(this.backendName);\n        kernels.forEach(kernel => {\n            if (kernel.setupFunc != null) {\n                kernel.setupFunc(this.backendInstance);\n            }\n        });\n    }\n    disposeRegisteredKernels(backendName) {\n        const kernels = getKernelsForBackend(backendName);\n        kernels.forEach(kernel => {\n            if (kernel.disposeFunc != null) {\n                kernel.disposeFunc(this.registry[backendName]);\n            }\n        });\n    }\n    /**\n     * Initializes a backend by looking up the backend name in the factory\n     * registry and calling the factory method. Returns a boolean representing\n     * whether the initialization of the backend suceeded. Throws an error if\n     * there is no backend in the factory registry.\n     */\n    initializeBackend(backendName) {\n        const registryFactoryEntry = this.registryFactory[backendName];\n        if (registryFactoryEntry == null) {\n            throw new Error(`Cannot initialize backend ${backendName}, no registration found.`);\n        }\n        try {\n            const backend = registryFactoryEntry.factory();\n            /* Test if the factory returns a promise.\n            Done in a more liberal way than\n            previous 'Promise.resolve(backend)===backend'\n            as we needed to account for custom Promise\n            implementations (e.g. Angular) */\n            if (backend && !(backend instanceof KernelBackend) &&\n                typeof backend.then === 'function') {\n                const promiseId = ++this.pendingBackendInitId;\n                const success = backend\n                    .then(backendInstance => {\n                    // Outdated promise. Another backend was set in the meantime.\n                    if (promiseId < this.pendingBackendInitId) {\n                        return false;\n                    }\n                    this.registry[backendName] = backendInstance;\n                    this.pendingBackendInit = null;\n                    return true;\n                })\n                    .catch(err => {\n                    // Outdated promise. Another backend was set in the meantime.\n                    if (promiseId < this.pendingBackendInitId) {\n                        return false;\n                    }\n                    this.pendingBackendInit = null;\n                    console.warn(`Initialization of backend ${backendName} failed`);\n                    console.warn(err.stack || err.message);\n                    return false;\n                });\n                this.pendingBackendInit = success;\n                return { success, asyncInit: true };\n            }\n            else {\n                this.registry[backendName] = backend;\n                return { success: true, asyncInit: false };\n            }\n        }\n        catch (err) {\n            console.warn(`Initialization of backend ${backendName} failed`);\n            console.warn(err.stack || err.message);\n            return { success: false, asyncInit: false };\n        }\n    }\n    removeBackend(backendName) {\n        if (!(backendName in this.registryFactory)) {\n            throw new Error(`${backendName} backend not found in registry`);\n        }\n        if (this.backendName === backendName && this.pendingBackendInit != null) {\n            // There is a pending promise of the backend we want to remove. Make it\n            // obsolete.\n            this.pendingBackendInitId++;\n        }\n        if (backendName in this.registry) {\n            this.disposeRegisteredKernels(backendName);\n            this.registry[backendName].dispose();\n            delete this.registry[backendName];\n        }\n        delete this.registryFactory[backendName];\n        // Unset the backend if it is active.\n        if (this.backendName === backendName) {\n            this.pendingBackendInit = null;\n            this.backendName = null;\n            this.backendInstance = null;\n        }\n    }\n    getSortedBackends() {\n        if (Object.keys(this.registryFactory).length === 0) {\n            throw new Error('No backend found in registry.');\n        }\n        return Object.keys(this.registryFactory).sort((a, b) => {\n            // Highest priority comes first.\n            return this.registryFactory[b].priority -\n                this.registryFactory[a].priority;\n        });\n    }\n    initializeBackendsAndReturnBest() {\n        const sortedBackends = this.getSortedBackends();\n        for (let i = 0; i < sortedBackends.length; i++) {\n            const backendName = sortedBackends[i];\n            const { success, asyncInit } = this.initializeBackend(backendName);\n            if (asyncInit || success) {\n                return { name: backendName, asyncInit };\n            }\n        }\n        throw new Error(`Could not initialize any backends, all backend initializations ` +\n            `failed.`);\n    }\n    moveData(backend, dataId) {\n        const info = this.state.tensorInfo.get(dataId);\n        const srcBackend = info.backend;\n        const values = this.readSync(dataId);\n        // Delete the tensor from the old backend and move it to the new\n        // backend.\n        srcBackend.disposeData(dataId);\n        info.backend = backend;\n        backend.move(dataId, values, info.shape, info.dtype);\n        if (this.shouldCheckForMemLeaks()) {\n            // Track the number of moves during a kernel execution to correctly\n            // detect memory leaks.\n            this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n        }\n    }\n    tidy(nameOrFn, fn) {\n        let name = null;\n        if (fn == null) {\n            // Called with only 1 argument.\n            if (typeof nameOrFn !== 'function') {\n                throw new Error('Please provide a function to tidy()');\n            }\n            fn = nameOrFn;\n        }\n        else {\n            // Called with 2 arguments.\n            if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n                throw new Error('When calling with two arguments, the first argument ' +\n                    'to tidy() must be a string');\n            }\n            if (typeof fn !== 'function') {\n                throw new Error('When calling with two arguments, the 2nd argument ' +\n                    'to tidy() must be a function');\n            }\n            name = nameOrFn;\n            // TODO(nsthorat,smilkov): Do operation logging and performance\n            // profiling.\n        }\n        let result;\n        return this.scopedRun(() => this.startScope(name), () => this.endScope(result), () => {\n            result = fn();\n            if (result instanceof Promise) {\n                console.error('Cannot return a Promise inside of tidy.');\n            }\n            return result;\n        });\n    }\n    scopedRun(start, end, f) {\n        start();\n        try {\n            const res = f();\n            end();\n            return res;\n        }\n        catch (ex) {\n            end();\n            throw ex;\n        }\n    }\n    nextTensorId() {\n        return Engine.nextTensorId++;\n    }\n    nextVariableId() {\n        return Engine.nextVariableId++;\n    }\n    /**\n     * This method is called instead of the public-facing tensor.clone() when\n     * saving a tensor for backwards pass. It makes sure to add the clone\n     * operation to the tape regardless of being called inside a kernel\n     * execution.\n     *\n     * This method will go away once all kernels are modularized since we won't\n     * need to turn off the tape inside runKernel().\n     */\n    clone(x) {\n        const y = this.makeTensorFromDataId(x.dataId, x.shape, x.dtype);\n        const inputs = { x };\n        const grad = (dy) => ({\n            x: () => {\n                const dtype = 'float32';\n                const gradInputs = { x: dy };\n                const attrs = { dtype };\n                return ENGINE.runKernelFunc(backend => backend.cast(dy, dtype), gradInputs, null /* grad */, Cast, attrs);\n            }\n        });\n        const saved = [];\n        this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});\n        return y;\n    }\n    /**\n     * Execute a kernel with the given name and return the output tensor.\n     *\n     * @param kernelName The name of the kernel to execute.\n     * @param inputs A map of input names to tensors.\n     * @param attrs A map of attribute names to their values. An attribute is a\n     *     primitive (non-tensor) input to the kernel.\n     * @param inputsToSave A list of tensors, inputs to save for the backprop\n     *     computation.\n     * @param outputsToSave A list of booleans, specifying which output to save\n     *     for the backprop computation. These are booleans since the output\n     * tensors are not visible to the user.\n     */\n    runKernel(kernelName, inputs, attrs, inputsToSave, outputsToSave) {\n        const forwardFunc = null;\n        const backwardsFunc = null;\n        // Call runKernel as a stop-gap until we modularize all kernels.\n        // Once we modularize all kernels, we will remove the existing\n        // `runKernelFunc`.\n        return this.runKernelFunc(forwardFunc, inputs, backwardsFunc, kernelName, attrs, inputsToSave, outputsToSave);\n    }\n    shouldCheckForMemLeaks() {\n        return this.ENV.getBool('IS_TEST');\n    }\n    checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {\n        const numDataIdsAfter = this.backend.numDataIds();\n        // Count the number of data ids associated with the result of the kernel.\n        let numOutputDataIds = 0;\n        outInfos.forEach(info => {\n            // Complex numbers allocate 3 data ids, one for 'real', one for\n            // 'imaginary', and one for the container that holds the former two.\n            numOutputDataIds += (info.dtype === 'complex64' ? 3 : 1);\n        });\n        // Account for the number of moves during kernel execution. A \"data move\"\n        // can happen in the middle of a kernel execution, placing a new (key,value)\n        // pair in the data storage. Since data moves have net zero effect (we\n        // always remove the data from the old backend), we have to cancel them out\n        // when detecting memory leaks.\n        const numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];\n        const dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;\n        if (dataIdsLeaked > 0) {\n            throw new Error(`Backend '${this.backendName}' has an internal memory leak ` +\n                `(${dataIdsLeaked} data ids) after running '${kernelName}'`);\n        }\n    }\n    /**\n     * @deprecated Use `runKernel` for newly added kernels. Keep using this method\n     *     only for kernels that are not yet fully modularized.\n     */\n    runKernelFunc(forwardFunc, inputs, backwardsFunc, kernelName, attrs, inputsToSave, outputsToSave) {\n        let outputs;\n        let saved = [];\n        const isTapeOn = this.isTapeOn();\n        if (kernelName == null) {\n            kernelName =\n                this.state.activeScope != null ? this.state.activeScope.name : '';\n        }\n        const startingBytecount = this.state.numBytes;\n        const startingNumTensors = this.state.numTensors;\n        if (this.shouldCheckForMemLeaks()) {\n            this.state.numDataMovesStack.push(0);\n        }\n        let kernelFunc;\n        if (this.backendName == null) {\n            // backend has not been initialized yet (backend initialization is lazy\n            // can be deferred until an op/ kernel is run).\n            // The below getter has side effects that will try to initialize the\n            // backend and set properties like this.backendName\n            // tslint:disable-next-line: no-unused-expression\n            this.backend;\n        }\n        const kernel = getKernel(kernelName, this.backendName);\n        let out;\n        if (kernel != null) {\n            kernelFunc = () => {\n                const numDataIdsBefore = this.backend.numDataIds();\n                out = kernel.kernelFunc({ inputs, attrs, backend: this.backend });\n                const outInfos = Array.isArray(out) ? out : [out];\n                if (this.shouldCheckForMemLeaks()) {\n                    this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);\n                }\n                const outTensors = outInfos.map((outInfo) => {\n                    // todo (yassogba) remove this option (Tensor) when node backend\n                    // methods have been modularized and they all return tensorInfo.\n                    // TensorInfos do not have a rank attribute.\n                    if (outInfo.rank != null) {\n                        return outInfo;\n                    }\n                    const { dataId, shape, dtype } = outInfo;\n                    return this.makeTensorFromDataId(dataId, shape, dtype);\n                });\n                // Save the inputs and outputs.\n                // Do not save unless we are recording to the tape. Otherwise it would\n                // cause a mem leak since we would never run backprop, which disposes\n                // the kept tensors.\n                if (isTapeOn) {\n                    let tensorsToSave = this.getTensorsForGradient(kernelName, inputs, outTensors);\n                    if (tensorsToSave == null) {\n                        // Fallback for ops that call runKernelFunc and pass in\n                        // inputsToSave and outputsToSave. Currently this is the set of ops\n                        // with kernel support in the WASM backend. Once those ops and\n                        // respective gradients are modularised we can remove this path.\n                        if (outputsToSave == null) {\n                            outputsToSave = [];\n                        }\n                        const outsToSave = outTensors.filter((_, i) => outputsToSave[i]);\n                        tensorsToSave = (inputsToSave || []).slice().concat(outsToSave);\n                    }\n                    saved = this.saveTensorsForBackwardMode(tensorsToSave);\n                }\n                return outTensors;\n            };\n        }\n        else {\n            if (forwardFunc == null) {\n                throw new Error(`Error running ${kernelName}: Neither modular kernel nor forward func passed`);\n            }\n            const saveFunc = (tensors) => {\n                // Do not save unless we are recording to the tape. Otherwise it would\n                // cause a mem leak since we would never run backprop, which disposes\n                // the kept tensors.\n                if (!isTapeOn) {\n                    return;\n                }\n                saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n            };\n            kernelFunc = () => {\n                const numDataIdsBefore = this.backend.numDataIds();\n                out = this.tidy(() => forwardFunc(this.backend, saveFunc));\n                const outs = (Array.isArray(out) ? out : [out]);\n                if (this.shouldCheckForMemLeaks()) {\n                    this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outs);\n                }\n                return outs;\n            };\n        }\n        // Stop recording to a tape when running a kernel.\n        let kernelProfile;\n        this.scopedRun(() => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {\n            if (!this.ENV.getBool('DEBUG') && !this.state.profiling) {\n                outputs = kernelFunc();\n            }\n            else {\n                kernelProfile = this.profiler.profileKernel(kernelName, inputs, () => kernelFunc());\n                if (this.ENV.getBool('DEBUG')) {\n                    this.profiler.logKernelProfile(kernelProfile);\n                }\n                outputs = kernelProfile.outputs;\n            }\n        });\n        if (isTapeOn) {\n            this.addTapeNode(kernelName, inputs, outputs, backwardsFunc, saved, attrs);\n        }\n        if (this.state.profiling) {\n            this.state.activeProfile.kernels.push({\n                name: kernelName,\n                bytesAdded: this.state.numBytes - startingBytecount,\n                totalBytesSnapshot: this.state.numBytes,\n                tensorsAdded: this.state.numTensors - startingNumTensors,\n                totalTensorsSnapshot: this.state.numTensors,\n                inputShapes: Object.keys(inputs).map(key => inputs[key] != null ? inputs[key].shape : null),\n                outputShapes: outputs.map(item => item.shape),\n                kernelTimeMs: kernelProfile.timeMs,\n                extraInfo: kernelProfile.extraInfo\n            });\n        }\n        return (Array.isArray(out) ? outputs : outputs[0]);\n    }\n    /**\n     * Saves tensors used in forward mode for use in backward mode.\n     *\n     * @param tensors the list of tensors to save.\n     */\n    saveTensorsForBackwardMode(tensors) {\n        const saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n        return saved;\n    }\n    /**\n     * Returns a list of tensors to save for a given gradient calculation.\n     *\n     * Returns undefined if their is no registered gradient for this kernel in the\n     * gradient registry.\n     *\n     * @param kernelName name of kernel to look up gradient for.\n     * @param inputs a map of input tensors.\n     * @param outputs an array of output tensors from forward mode of kernel.\n     */\n    getTensorsForGradient(kernelName, inputs, outputs) {\n        const gradConfig = getGradient(kernelName);\n        if (gradConfig != null) {\n            const inputsToSave = gradConfig.inputsToSave || [];\n            const outputsToSave = gradConfig.outputsToSave || [];\n            // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs\n            // specified in inputsToSave will be saved.\n            let inputTensorsToSave;\n            if (gradConfig.saveAllInputs) {\n                util.assert(Array.isArray(inputs), () => 'saveAllInputs is true, expected inputs to be an array.');\n                inputTensorsToSave = Object.keys(inputs).map((key) => inputs[key]);\n            }\n            else {\n                inputTensorsToSave = inputsToSave.map((inputName) => inputs[inputName]);\n            }\n            const outputTensorsToSave = outputs.filter((_, i) => outputsToSave[i]);\n            return inputTensorsToSave.concat(outputTensorsToSave);\n        }\n        // TODO(yassogba) throw exception here once all runkernelFunc calls with\n        // inputsToSave/outputsToSave are removed\n        return null;\n    }\n    /**\n     * Internal method used by public APIs for tensor creation. Makes a new\n     * tensor with the provided shape, dtype and values. It always\n     * creates a new data id and writes the values to the underlying backend.\n     */\n    makeTensor(values, shape, dtype, backend) {\n        if (values == null) {\n            throw new Error('Values passed to engine.makeTensor() are null');\n        }\n        dtype = dtype || 'float32';\n        backend = backend || this.backend;\n        let backendVals = values;\n        if (dtype === 'string' && util.isString(values[0])) {\n            backendVals = values.map(d => util.encodeString(d));\n        }\n        const dataId = backend.write(backendVals, shape, dtype);\n        const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n        this.incRef(t, backend);\n        // Count bytes for string tensors.\n        if (dtype === 'string') {\n            const info = this.state.tensorInfo.get(dataId);\n            const newBytes = bytesFromStringArray(backendVals);\n            this.state.numBytes += newBytes - info.bytes;\n            info.bytes = newBytes;\n        }\n        return t;\n    }\n    /**\n     * Internal method used by backends. Makes a new tensor\n     * that is a wrapper around an existing data id. It doesn't create\n     * a new data id, only increments the ref count used in memory tracking.\n     */\n    makeTensorFromDataId(dataId, shape, dtype, backend) {\n        dtype = dtype || 'float32';\n        const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n        this.incRef(t, backend);\n        return t;\n    }\n    makeVariable(initialValue, trainable = true, name, dtype) {\n        name = name || this.nextVariableId().toString();\n        if (dtype != null && dtype !== initialValue.dtype) {\n            initialValue = initialValue.cast(dtype);\n        }\n        const v = new Variable(initialValue, trainable, name, this.nextTensorId());\n        if (this.state.registeredVariables[v.name] != null) {\n            throw new Error(`Variable with name ${v.name} was already registered`);\n        }\n        this.state.registeredVariables[v.name] = v;\n        this.incRef(v, this.backend);\n        return v;\n    }\n    incRef(a, backend) {\n        const refCount = this.state.tensorInfo.has(a.dataId) ?\n            this.state.tensorInfo.get(a.dataId).refCount :\n            0;\n        this.state.numTensors++;\n        if (a.dtype === 'string') {\n            this.state.numStringTensors++;\n        }\n        if (refCount === 0) {\n            this.state.numDataBuffers++;\n            // Bytes for complex numbers are counted by their components. Bytes for\n            // string tensors are counted when writing values.\n            let bytes = 0;\n            if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n                bytes = a.size * util.bytesPerElement(a.dtype);\n            }\n            this.state.tensorInfo.set(a.dataId, {\n                backend: backend || this.backend,\n                dtype: a.dtype,\n                shape: a.shape,\n                bytes,\n                refCount: 0\n            });\n            this.state.numBytes += bytes;\n        }\n        this.state.tensorInfo.get(a.dataId).refCount++;\n        if (!(a instanceof Variable)) {\n            this.track(a);\n        }\n    }\n    disposeTensor(a) {\n        if (!this.state.tensorInfo.has(a.dataId)) {\n            return;\n        }\n        this.state.numTensors--;\n        if (a.dtype === 'string') {\n            this.state.numStringTensors--;\n        }\n        const info = this.state.tensorInfo.get(a.dataId);\n        const refCount = info.refCount;\n        if (refCount <= 1) {\n            // Don't count bytes for complex numbers as they are counted by their\n            // components.\n            if (a.dtype !== 'complex64') {\n                this.state.numBytes -= info.bytes;\n            }\n            this.state.numDataBuffers--;\n            info.backend.disposeData(a.dataId);\n            this.state.tensorInfo.delete(a.dataId);\n        }\n        else {\n            // Notify the backend to descrease the ref count for complex tensor\n            // components. This method is only implemented in WebGL right now. When\n            // there are multiple references, complex tensor cannot dispose the\n            // components if ref count is not in sync with engine.\n            info.backend.decComplexRef(a.dataId);\n            this.state.tensorInfo.get(a.dataId).refCount--;\n        }\n        // TODO(nsthorat): Construct an error and save the stack trace for\n        // debugging when in debug mode. Creating a stack trace is too expensive\n        // to do unconditionally.\n    }\n    disposeVariables() {\n        for (const varName in this.state.registeredVariables) {\n            const v = this.state.registeredVariables[varName];\n            this.disposeVariable(v);\n        }\n    }\n    disposeVariable(v) {\n        this.disposeTensor(v);\n        if (this.state.registeredVariables[v.name] != null) {\n            delete this.state.registeredVariables[v.name];\n        }\n    }\n    memory() {\n        const info = this.backend.memory();\n        info.numTensors = this.state.numTensors;\n        info.numDataBuffers = this.state.numDataBuffers;\n        info.numBytes = this.state.numBytes;\n        if (this.state.numStringTensors > 0) {\n            info.unreliable = true;\n            if (info.reasons == null) {\n                info.reasons = [];\n            }\n            info.reasons.push('Memory usage by string tensors is approximate ' +\n                '(2 bytes per character)');\n        }\n        return info;\n    }\n    async profile(query) {\n        this.state.profiling = true;\n        const startBytes = this.state.numBytes;\n        const startNumTensors = this.state.numTensors;\n        this.state.activeProfile.kernels = [];\n        this.state.activeProfile.result = await query();\n        this.state.profiling = false;\n        this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));\n        this.state.activeProfile.newBytes = this.state.numBytes - startBytes;\n        this.state.activeProfile.newTensors =\n            this.state.numTensors - startNumTensors;\n        for (const kernel of this.state.activeProfile.kernels) {\n            kernel.kernelTimeMs = await kernel.kernelTimeMs;\n            kernel.extraInfo = await kernel.extraInfo;\n        }\n        return this.state.activeProfile;\n    }\n    isTapeOn() {\n        return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;\n    }\n    addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {\n        const tapeNode = { id: this.state.nextTapeNodeId++, kernelName, inputs, outputs, saved };\n        const gradConfig = getGradient(kernelName);\n        if (gradConfig != null) {\n            gradientsFunc = gradConfig.gradFunc;\n        }\n        if (gradientsFunc != null) {\n            tapeNode.gradient = (dys) => {\n                // TODO(smilkov): To optimize back-prop, pass dys that are not used in\n                // the backprop graph to the user as null instead of zeros\n                dys = dys.map((dy, i) => {\n                    if (dy == null) {\n                        const output = outputs[i];\n                        const vals = util.makeZerosTypedArray(output.size, output.dtype);\n                        return this.makeTensor(vals, output.shape, output.dtype);\n                    }\n                    return dy;\n                });\n                // Grad functions of ops with single outputs expect a dy, while ops\n                // with multiple outputs expect dys (array of dy).\n                return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);\n            };\n        }\n        this.state.activeTape.push(tapeNode);\n    }\n    keep(result) {\n        result.kept = true;\n        return result;\n    }\n    startTape() {\n        if (this.state.gradientDepth === 0) {\n            this.state.activeTape = [];\n        }\n        this.state.gradientDepth++;\n    }\n    endTape() {\n        this.state.gradientDepth--;\n    }\n    /**\n     * Start a scope. Use this with endScope() to achieve the same functionality\n     * as scope() without the need for a function closure.\n     */\n    startScope(name) {\n        const scopeInfo = {\n            track: [],\n            name: 'unnamed scope',\n            id: this.state.nextScopeId++\n        };\n        if (name) {\n            scopeInfo.name = name;\n        }\n        this.state.scopeStack.push(scopeInfo);\n        this.state.activeScope = scopeInfo;\n    }\n    /**\n     * End a scope. Use this with startScope() to achieve the same functionality\n     * as scope() without the need for a function closure.\n     */\n    endScope(result) {\n        const tensorsToTrackInParent = getTensorsInContainer(result);\n        const tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map(t => t.id));\n        // Dispose the arrays tracked in this scope.\n        for (let i = 0; i < this.state.activeScope.track.length; i++) {\n            const tensor = this.state.activeScope.track[i];\n            if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {\n                tensor.dispose();\n            }\n        }\n        const oldScope = this.state.scopeStack.pop();\n        this.state.activeScope = this.state.scopeStack.length === 0 ?\n            null :\n            this.state.scopeStack[this.state.scopeStack.length - 1];\n        // Track the current result in the parent scope.\n        tensorsToTrackInParent.forEach(tensor => {\n            // Only track the tensor if was allocated in the inner scope and is not\n            // globally kept.\n            if (!tensor.kept && tensor.scopeId === oldScope.id) {\n                this.track(tensor);\n            }\n        });\n    }\n    /**\n     * Returns gradients of `f` with respect to each of the `xs`. The gradients\n     * returned are of the same length as `xs`, but some might be null if `f`\n     * was not a function of that `x`. It also takes optional dy to multiply the\n     * gradient, which defaults to `1`.\n     */\n    gradients(f, xs, dy, allowNoGradients = false) {\n        util.assert(xs.length > 0, () => 'gradients() received an empty list of xs.');\n        if (dy != null && dy.dtype !== 'float32') {\n            throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);\n        }\n        const y = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy('forward', f));\n        util.assert(y instanceof Tensor, () => 'The result y returned by f() must be a tensor.');\n        // Filter out the nodes that don't connect x => y.\n        const filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);\n        if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n            throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' +\n                'that the f you passed encloses all operations that lead from x ' +\n                'to y.');\n        }\n        return this.tidy('backward', () => {\n            const accumulatedGradientMap = {};\n            accumulatedGradientMap[y.id] = (dy == null) ? ones(y.shape) : dy;\n            // Backprop gradients through the filtered nodes.\n            backpropagateGradients(accumulatedGradientMap, filteredTape, \n            // Pass the tidy function to avoid circular dep with `tape.ts`.\n            f => this.tidy(f), \n            // Pass an add function to avoide a circular dep with `tape.ts`.\n            add);\n            const grads = xs.map(x => accumulatedGradientMap[x.id]);\n            if (this.state.gradientDepth === 0) {\n                // This means that we are not computing higher-order gradients\n                // and can clean up the tape.\n                this.state.activeTape.forEach(node => {\n                    for (const tensor of node.saved) {\n                        tensor.dispose();\n                    }\n                });\n                this.state.activeTape = null;\n            }\n            return { value: y, grads };\n        });\n    }\n    customGrad(f) {\n        util.assert(util.isFunction(f), () => 'The f passed in customGrad(f) must be a function.');\n        return (...inputs) => {\n            util.assert(inputs.every(t => t instanceof Tensor), () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' +\n                'tensors');\n            let res;\n            const inputMap = {};\n            inputs.forEach((input, i) => {\n                inputMap[i] = input;\n            });\n            return this.runKernelFunc((_, save) => {\n                res = f(...[...inputs, save]);\n                util.assert(res.value instanceof Tensor, () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.value` is a tensor');\n                util.assert(util.isFunction(res.gradFunc), () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function.');\n                return res.value;\n            }, inputMap, (dy, saved) => {\n                const gradRes = res.gradFunc(dy, saved);\n                const grads = Array.isArray(gradRes) ? gradRes : [gradRes];\n                util.assert(grads.length === inputs.length, () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function that returns ' +\n                    'the same number of tensors as inputs passed to f(...).');\n                util.assert(grads.every(t => t instanceof Tensor), () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function that returns ' +\n                    'a list of only tensors.');\n                const gradMap = {};\n                grads.forEach((grad, i) => {\n                    gradMap[i] = () => grad;\n                });\n                return gradMap;\n            });\n        };\n    }\n    readSync(dataId) {\n        // Route the read to the correct backend.\n        const info = this.state.tensorInfo.get(dataId);\n        return info.backend.readSync(dataId);\n    }\n    read(dataId) {\n        // Route the read to the correct backend.\n        const info = this.state.tensorInfo.get(dataId);\n        return info.backend.read(dataId);\n    }\n    async time(query) {\n        const start = now();\n        const timingInfo = await this.backend.time(query);\n        timingInfo.wallMs = now() - start;\n        return timingInfo;\n    }\n    /**\n     * Tracks a Tensor in the current scope to be automatically cleaned up\n     * when the current scope ends, and returns the value.\n     *\n     * @param result The Tensor to track in the current scope.\n     */\n    track(result) {\n        if (this.state.activeScope != null) {\n            result.scopeId = this.state.activeScope.id;\n            this.state.activeScope.track.push(result);\n        }\n        return result;\n    }\n    get registeredVariables() {\n        return this.state.registeredVariables;\n    }\n    /**\n     * Resets the engine state. Removes all backends but does not remove\n     * registered backend factories.\n     */\n    reset() {\n        // Make any pending promise obsolete.\n        this.pendingBackendInitId++;\n        this.state.dispose();\n        this.ENV.reset();\n        this.state = new EngineState();\n        for (const backendName in this.registry) {\n            this.disposeRegisteredKernels(backendName);\n            this.registry[backendName].dispose();\n            delete this.registry[backendName];\n        }\n        this.backendName = null;\n        this.backendInstance = null;\n        this.pendingBackendInit = null;\n    }\n}\nEngine.nextTensorId = 0;\nEngine.nextVariableId = 0;\nfunction ones(shape) {\n    const values = makeOnesTypedArray(sizeFromShape(shape), 'float32');\n    return ENGINE.makeTensor(values, shape, 'float32');\n}\nexport function getOrMakeEngine() {\n    const ns = getGlobalNamespace();\n    if (ns._tfengine == null) {\n        const environment = new Environment(ns);\n        ns._tfengine = new Engine(environment);\n    }\n    setEnvironmentGlobal(ns._tfengine.ENV);\n    // Tell the current tensor interface that the global engine is responsible\n    // for tracking.\n    setTensorTracker(() => ns._tfengine);\n    return ns._tfengine;\n}\nexport const ENGINE = getOrMakeEngine();\n/**\n * A implementation of the add op for use within engine and tape.\n *\n * This allows us to avoid a circular dependency between add.ts and engine.\n * It is exported to be available in tape tests.\n */\nexport function add(a, b) {\n    // We duplicate Add here to avoid a circular dependency with add.ts.\n    const inputs = { a, b };\n    return ENGINE.runKernel(Add, inputs);\n}\n//# sourceMappingURL=engine.js.map"]},"metadata":{},"sourceType":"module"}