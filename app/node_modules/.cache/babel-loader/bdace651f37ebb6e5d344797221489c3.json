{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { Max } from '@tensorflow/tfjs-core';\nimport { permuteAxesAndTranspose } from './kernel_utils';\nlet wasmMax;\nfunction setup(backend) {\n  wasmMax = backend.wasm.cwrap(Max, null /*void*/, ['number, number, number']);\n}\nfunction max(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    reductionIndices: axis,\n    keepDims\n  } = attrs;\n  const {\n    x\n  } = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  let inputId = xId;\n  let input = x;\n  const {\n    transposed,\n    axes,\n    originalAxes,\n    inputWasTransposed\n  } = permuteAxesAndTranspose(x, axis, backend);\n  if (inputWasTransposed) {\n    const transposedId = backend.dataIdMap.get(transposed.dataId).id;\n    input = transposed;\n    inputId = transposedId;\n  }\n  const inputRank = input.shape.length;\n  backend_util.assertAxesAreInnerMostDims('max', axes, inputRank);\n  const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(input.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const out = backend.makeOutput(outShape, x.dtype);\n  if (util.sizeFromShape(input.shape) !== 0) {\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmMax(inputId, reduceSize, outId);\n  }\n  if (inputWasTransposed) {\n    // dispose of the transposed tensor.\n    backend.disposeData(transposed.dataId);\n  }\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(out.shape, originalAxes);\n    out.shape = newShape;\n  }\n  return out;\n}\nexport const maxConfig = {\n  kernelName: Max,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: max\n};","map":{"version":3,"sources":["../../src/kernels/Max.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAY,EAAwC,IAAI,QAAO,uBAAuB;AAC9F,SAAQ,GAAG,QAA4B,uBAAuB;AAI9D,SAAQ,uBAAuB,QAAO,gBAAgB;AAEtD,IAAI,OAAiE;AAErE,SAAS,KAAK,CAAC,OAAoB,EAAA;EACjC,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,wBAAwB,CAAC,CAAC;AAC9E;AAEA,SAAS,GAAG,CAAC,IAAgE,EAAA;EAE3E,MAAM;IAAC,OAAO;IAAE,MAAM;IAAE;EAAK,CAAC,GAAG,IAAI;EACrC,MAAM;IAAC,gBAAgB,EAAE,IAAI;IAAE;EAAQ,CAAC,GAAG,KAAK;EAChD,MAAM;IAAC;EAAC,CAAC,GAAG,MAAM;EAClB,MAAM,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE;EAC9C,IAAI,OAAO,GAAG,GAAG;EACjB,IAAI,KAAK,GAAG,CAAC;EAEb,MAAM;IAAC,UAAU;IAAE,IAAI;IAAE,YAAY;IAAE;EAAkB,CAAC,GACtD,uBAAuB,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC;EAE7C,IAAI,kBAAkB,EAAE;IACtB,MAAM,YAAY,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE;IAChE,KAAK,GAAG,UAAU;IAClB,OAAO,GAAG,YAAY;EACvB;EAED,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM;EACpC,YAAY,CAAC,0BAA0B,CAAC,KAAK,EAAE,IAAI,EAAE,SAAS,CAAC;EAC/D,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GACzB,YAAY,CAAC,yBAAyB,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC;EAC7D,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC;EAElD,MAAM,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC;EACjD,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;IACzC,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE;IAClD,OAAO,CAAC,OAAO,EAAE,UAAU,EAAE,KAAK,CAAC;EACpC;EAED,IAAI,kBAAkB,EAAE;IACtB;IACA,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC;EACvC;EAED,IAAI,QAAQ,EAAE;IACZ;IACA,MAAM,QAAQ,GAAG,YAAY,CAAC,oBAAoB,CAAC,GAAG,CAAC,KAAK,EAAE,YAAY,CAAC;IAC3E,GAAG,CAAC,KAAK,GAAG,QAAQ;EACrB;EAED,OAAO,GAAG;AACZ;AAEA,OAAO,MAAM,SAAS,GAAiB;EACrC,UAAU,EAAE,GAAG;EACf,WAAW,EAAE,MAAM;EACnB,SAAS,EAAE,KAAK;EAChB,UAAU,EAAE;CACb","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { Max } from '@tensorflow/tfjs-core';\nimport { permuteAxesAndTranspose } from './kernel_utils';\nlet wasmMax;\nfunction setup(backend) {\n    wasmMax = backend.wasm.cwrap(Max, null /*void*/, ['number, number, number']);\n}\nfunction max(args) {\n    const { backend, inputs, attrs } = args;\n    const { reductionIndices: axis, keepDims } = attrs;\n    const { x } = inputs;\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    let inputId = xId;\n    let input = x;\n    const { transposed, axes, originalAxes, inputWasTransposed } = permuteAxesAndTranspose(x, axis, backend);\n    if (inputWasTransposed) {\n        const transposedId = backend.dataIdMap.get(transposed.dataId).id;\n        input = transposed;\n        inputId = transposedId;\n    }\n    const inputRank = input.shape.length;\n    backend_util.assertAxesAreInnerMostDims('max', axes, inputRank);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(input.shape, axes);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const out = backend.makeOutput(outShape, x.dtype);\n    if (util.sizeFromShape(input.shape) !== 0) {\n        const outId = backend.dataIdMap.get(out.dataId).id;\n        wasmMax(inputId, reduceSize, outId);\n    }\n    if (inputWasTransposed) {\n        // dispose of the transposed tensor.\n        backend.disposeData(transposed.dataId);\n    }\n    if (keepDims) {\n        // reshape\n        const newShape = backend_util.expandShapeToKeepDim(out.shape, originalAxes);\n        out.shape = newShape;\n    }\n    return out;\n}\nexport const maxConfig = {\n    kernelName: Max,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: max\n};\n//# sourceMappingURL=Max.js.map"]},"metadata":{},"sourceType":"module"}