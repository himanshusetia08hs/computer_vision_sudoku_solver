{"ast":null,"code":"import { getCoordsDataType } from './shader_compiler';\nexport class CumSumProgram {\n  constructor(shape, exclusive, reverse) {\n    this.variableNames = ['x'];\n    this.outputShape = shape;\n    const rank = shape.length;\n    const val = exclusive ? '0.0' : `getX(${getCoords(rank, 'coords')})`;\n    const length = shape[shape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cumsum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (exclusive) {\n      condition = reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = reverse ? 'end + pow2' : 'end - pow2';\n    }\n    this.userCode = `\n      uniform float index;\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords')};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords')} = idx;\n          val += getX(${getCoords(rank, 'coords')});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n  getCustomSetupFunc(index) {\n    return (gpgpu, webGLProgram) => {\n      if (this.index == null) {\n        this.index = gpgpu.getUniformLocation(webGLProgram, 'index');\n      }\n      gpgpu.gl.uniform1f(this.index, index);\n    };\n  }\n}\nfunction getCoords(rank, name) {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\nfunction getFinalCoord(rank, name) {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}","map":{"version":3,"sources":["../src/cumsum_gpu.ts"],"names":[],"mappings":"AAkBA,SAAQ,iBAAiB,QAAO,mBAAmB;AAEnD,OAAM,MAAO,aAAa,CAAA;EAQxB,WAAA,CAAY,KAAe,EAAE,SAAkB,EAAE,OAAgB,EAAA;IAPjE,IAAA,CAAA,aAAa,GAAG,CAAC,GAAG,CAAC;IAQnB,IAAI,CAAC,WAAW,GAAG,KAAK;IACxB,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM;IACzB,MAAM,GAAG,GAAG,SAAS,GAAG,KAAK,GAAG,QAAQ,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,GAAG;IACpE,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IACtC,IAAI,SAAS,GAAG,EAAE;IAClB,IAAI,SAAS,GAAG,EAAE;IAClB;IACA;IACA;IACA,IAAI,SAAS,EAAE;MACb,SAAS,GAAG,OAAO,GAAG,UAAU,MAAM,GAAG,CAAC,EAAE,GAAG,UAAU;MACzD,SAAS,GAAG,OAAO,GAAG,SAAS,GAAG,SAAS;KAC5C,MAAM;MACL,SAAS,GAAG,OAAO,GAAG,gBAAgB,MAAM,EAAE,GAAG,aAAa;MAC9D,SAAS,GAAI,OAAO,GAAG,YAAY,GAAG,YAAa;IACpD;IAED,IAAI,CAAC,QAAQ,GAAG;;;UAGV,iBAAiB,CAAC,IAAI,CAAC;oBACb,aAAa,CAAC,IAAI,EAAE,QAAQ,CAAC;sBAC3B,GAAG;;cAEX,SAAS;sBACD,SAAS;YACnB,aAAa,CAAC,IAAI,EAAE,QAAQ,CAAC;wBACjB,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC;;;;KAI5C;EACH;EAEA,kBAAkB,CAAC,KAAa,EAAA;IAC9B,OAAO,CAAC,KAAmB,EAAE,YAA0B,KAAI;MACzD,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;QACtB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,kBAAkB,CAAC,YAAY,EAAE,OAAO,CAAC;MAC7D;MACD,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC;IACvC,CAAC;EACH;AACD;AAED,SAAS,SAAS,CAAC,IAAY,EAAE,IAAY,EAAA;EAC3C,IAAI,IAAI,KAAK,CAAC,EAAE;IACd,OAAO,GAAG,IAAI,EAAE;GACjB,MAAM,IAAI,IAAI,KAAK,CAAC,EAAE;IACrB,OAAO,GAAG,IAAI,OAAO,IAAI,IAAI;GAC9B,MAAM,IAAI,IAAI,KAAK,CAAC,EAAE;IACrB,OAAO,GAAG,IAAI,OAAO,IAAI,OAAO,IAAI,IAAI;GACzC,MAAM,IAAI,IAAI,KAAK,CAAC,EAAE;IACrB,OAAO,GAAG,IAAI,OAAO,IAAI,OAAO,IAAI,OAAO,IAAI,IAAI;GACpD,MAAM;IACL,MAAM,KAAK,CAAC,2BAA2B,IAAI,uBAAuB,CAAC;EACpE;AACH;AAEA,SAAS,aAAa,CAAC,IAAY,EAAE,IAAY,EAAA;EAC/C,IAAI,IAAI,KAAK,CAAC,EAAE;IACd,OAAO,GAAG,IAAI,EAAE;GACjB,MAAM,IAAI,IAAI,KAAK,CAAC,EAAE;IACrB,OAAO,GAAG,IAAI,IAAI;GACnB,MAAM,IAAI,IAAI,KAAK,CAAC,EAAE;IACrB,OAAO,GAAG,IAAI,IAAI;GACnB,MAAM,IAAI,IAAI,KAAK,CAAC,EAAE;IACrB,OAAO,GAAG,IAAI,IAAI;GACnB,MAAM;IACL,MAAM,KAAK,CAAC,2BAA2B,IAAI,uBAAuB,CAAC;EACpE;AACH","sourceRoot":"","sourcesContent":["import { getCoordsDataType } from './shader_compiler';\nexport class CumSumProgram {\n    constructor(shape, exclusive, reverse) {\n        this.variableNames = ['x'];\n        this.outputShape = shape;\n        const rank = shape.length;\n        const val = exclusive ? '0.0' : `getX(${getCoords(rank, 'coords')})`;\n        const length = shape[shape.length - 1];\n        let condition = '';\n        let idxString = '';\n        // When exclusive is set, the cumsum op becomes roll op that copies the\n        // value from the previous index based on the direction specified by the\n        // reverse flag.\n        if (exclusive) {\n            condition = reverse ? `end != ${length - 1}` : 'end != 0';\n            idxString = reverse ? 'end + 1' : 'end - 1';\n        }\n        else {\n            condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n            idxString = (reverse ? 'end + pow2' : 'end - pow2');\n        }\n        this.userCode = `\n      uniform float index;\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords')};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords')} = idx;\n          val += getX(${getCoords(rank, 'coords')});\n        }\n        setOutput(val);\n      }\n    `;\n    }\n    getCustomSetupFunc(index) {\n        return (gpgpu, webGLProgram) => {\n            if (this.index == null) {\n                this.index = gpgpu.getUniformLocation(webGLProgram, 'index');\n            }\n            gpgpu.gl.uniform1f(this.index, index);\n        };\n    }\n}\nfunction getCoords(rank, name) {\n    if (rank === 1) {\n        return `${name}`;\n    }\n    else if (rank === 2) {\n        return `${name}.x, ${name}.y`;\n    }\n    else if (rank === 3) {\n        return `${name}.x, ${name}.y, ${name}.z`;\n    }\n    else if (rank === 4) {\n        return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n    }\n    else {\n        throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n    }\n}\nfunction getFinalCoord(rank, name) {\n    if (rank === 1) {\n        return `${name}`;\n    }\n    else if (rank === 2) {\n        return `${name}.y`;\n    }\n    else if (rank === 3) {\n        return `${name}.z`;\n    }\n    else if (rank === 4) {\n        return `${name}.w`;\n    }\n    else {\n        throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n    }\n}\n//# sourceMappingURL=cumsum_gpu.js.map"]},"metadata":{},"sourceType":"module"}