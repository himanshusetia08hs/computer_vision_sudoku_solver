{"ast":null,"code":"import * as tf from \"@tensorflow/tfjs\";\nimport { setWasmPath } from \"@tensorflow/tfjs-backend-wasm\";\nsetWasmPath(`${process.env.PUBLIC_URL}/tfjs-backend-wasm.wasm`);\nconst MODEL_URL = `${process.env.PUBLIC_URL}/tfjs_model/model_l1l2.json`;\nconst CLASSES = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst IMAGE_SIZE = 20;\nlet _model = undefined;\nlet modelLoadingPromise = undefined;\nasync function loadModel() {\n  if (_model) {\n    return _model;\n  }\n  if (modelLoadingPromise) {\n    return modelLoadingPromise;\n  }\n  modelLoadingPromise = new Promise(async (resolve, reject) => {\n    await tf.setBackend(\"wasm\");\n    _model = await tf.loadLayersModel(MODEL_URL);\n    resolve(_model);\n  });\n}\nloadModel().then(() => console.log(\"Model Loaded\", console.error));\nexport async function getClasses(logits) {\n  const logitsArray = await logits.array();\n  const classes = logitsArray.map(values => {\n    let maxProb = 0;\n    let maxIndex = 0;\n    values.forEach((value, index) => {\n      if (value > maxProb) {\n        maxProb = value;\n        maxIndex = index;\n      }\n    });\n    return CLASSES[maxIndex];\n  });\n  return classes;\n}\n\n/**\n * Apply our neural network to the extracted images\n * @param boxes A set of puzzle boxes containing images\n */\nexport default async function fillInPrediction(boxes) {\n  const model = await loadModel();\n  const logits = tf.tidy(() => {\n    // convert the images into tensors and process them in the same way we did during training\n    // if you change the code in the training then update the code here\n    const images = boxes.map(box => {\n      const img = tf.browser.fromPixels(box.numberImage.toImageData(), 1).resizeBilinear([IMAGE_SIZE, IMAGE_SIZE]).toFloat();\n      const mean = img.mean();\n      const std = tf.moments(img).variance.sqrt();\n      const normalized = img.sub(mean).div(std);\n      const batched = normalized.reshape([1, IMAGE_SIZE, IMAGE_SIZE, 1]);\n      return batched;\n    });\n    // concatentate all the images for processing all at once\n    const input = tf.concat(images);\n    // Make the predictions\n    return model.predict(input, {\n      batchSize: boxes.length\n    });\n  });\n  // Convert logits to probabilities and class names.\n  const classes = await getClasses(logits);\n  // fill in the boxes with the results\n  classes.forEach((className, index) => boxes[index].contents = className);\n}","map":{"version":3,"names":["tf","setWasmPath","process","env","PUBLIC_URL","MODEL_URL","CLASSES","IMAGE_SIZE","_model","undefined","modelLoadingPromise","loadModel","Promise","resolve","reject","setBackend","loadLayersModel","then","console","log","error","getClasses","logits","logitsArray","array","classes","map","values","maxProb","maxIndex","forEach","value","index","fillInPrediction","boxes","model","tidy","images","box","img","browser","fromPixels","numberImage","toImageData","resizeBilinear","toFloat","mean","std","moments","variance","sqrt","normalized","sub","div","batched","reshape","input","concat","predict","batchSize","length","className","contents"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/Project/temp/app/src/augmentedReality/imageRecognition/tensorflow.ts"],"sourcesContent":["import * as tf from \"@tensorflow/tfjs\";\nimport { setWasmPath } from \"@tensorflow/tfjs-backend-wasm\";\nimport { PuzzleBox } from \"../imageProcessing/extractBoxes\";\n\nsetWasmPath(`${process.env.PUBLIC_URL}/tfjs-backend-wasm.wasm`);\nconst MODEL_URL = `${process.env.PUBLIC_URL}/tfjs_model/model_l1l2.json`;\n\nconst CLASSES = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst IMAGE_SIZE = 20;\nlet _model: tf.LayersModel = undefined;\nlet modelLoadingPromise: Promise<tf.LayersModel> = undefined;\n\nasync function loadModel() {\n  if (_model) {\n    return _model;\n  }\n  if (modelLoadingPromise) {\n    return modelLoadingPromise;\n  }\n  modelLoadingPromise = new Promise(async (resolve, reject) => {\n    await tf.setBackend(\"wasm\");\n    _model = await tf.loadLayersModel(MODEL_URL);\n    resolve(_model);\n  });\n}\nloadModel().then(() => console.log(\"Model Loaded\", console.error));\n\nexport async function getClasses(logits: tf.Tensor<tf.Rank>) {\n  const logitsArray = (await logits.array()) as number[][];\n  const classes = logitsArray.map((values) => {\n    let maxProb = 0;\n    let maxIndex = 0;\n    values.forEach((value, index) => {\n      if (value > maxProb) {\n        maxProb = value;\n        maxIndex = index;\n      }\n    });\n    return CLASSES[maxIndex];\n  });\n  return classes;\n}\n\n/**\n * Apply our neural network to the extracted images\n * @param boxes A set of puzzle boxes containing images\n */\nexport default async function fillInPrediction(boxes: PuzzleBox[]) {\n  const model = await loadModel();\n  const logits = tf.tidy(() => {\n    // convert the images into tensors and process them in the same way we did during training\n    // if you change the code in the training then update the code here\n    const images = boxes.map((box) => {\n      const img = tf.browser\n        .fromPixels(box.numberImage.toImageData(), 1)\n        .resizeBilinear([IMAGE_SIZE, IMAGE_SIZE])\n        .toFloat();\n      const mean = img.mean();\n      const std = tf.moments(img).variance.sqrt();\n      const normalized = img.sub(mean).div(std);\n      const batched = normalized.reshape([1, IMAGE_SIZE, IMAGE_SIZE, 1]);\n      return batched;\n    });\n    // concatentate all the images for processing all at once\n    const input = tf.concat(images);\n    // Make the predictions\n    return model.predict(input, {\n      batchSize: boxes.length,\n    });\n  });\n  // Convert logits to probabilities and class names.\n  const classes = await getClasses(logits as tf.Tensor<tf.Rank>);\n  // fill in the boxes with the results\n  classes.forEach((className, index) => (boxes[index].contents = className));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}