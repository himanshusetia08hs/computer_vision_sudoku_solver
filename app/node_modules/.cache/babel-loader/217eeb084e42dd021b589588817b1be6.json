{"ast":null,"code":"import Image from \"./Image\";\nexport default function extractSquareFromRegion(source, size, tranform) {\n  const {\n    a,\n    b,\n    c,\n    d,\n    e,\n    f,\n    g,\n    h\n  } = tranform;\n  const result = Image.withSize(size, size);\n  for (let y = 0; y < size; y++) {\n    const sxPre1 = b * y + c;\n    const sxPre2 = h * y + 1;\n    const syPre1 = e * y + f;\n    const syPre2 = h * y + 1;\n    for (let x = 0; x < size; x++) {\n      const sx = Math.floor((a * x + sxPre1) / (g * x + sxPre2));\n      const sy = Math.floor((d * x + syPre1) / (g * x + syPre2));\n      // TODO - should we interpolate this value?\n      result.bytes[y * size + x] = source.bytes[sy * source.width + sx];\n    }\n  }\n  return result;\n}","map":{"version":3,"names":["Image","extractSquareFromRegion","source","size","tranform","a","b","c","d","e","f","g","h","result","withSize","y","sxPre1","sxPre2","syPre1","syPre2","x","sx","Math","floor","sy","bytes","width"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/P/temp/app/src/setiaSudokuSolver/imageProcessing/applyHomographicTransform.ts"],"sourcesContent":["import Image from \"./Image\";\nimport { Transform } from \"./findHomographicTransform\";\n\nexport default function extractSquareFromRegion(\n  source: Image,\n  size: number,\n  tranform: Transform\n) {\n  const { a, b, c, d, e, f, g, h } = tranform;\n\n  const result = Image.withSize(size, size);\n  for (let y = 0; y < size; y++) {\n    const sxPre1 = b * y + c;\n    const sxPre2 = h * y + 1;\n    const syPre1 = e * y + f;\n    const syPre2 = h * y + 1;\n\n    for (let x = 0; x < size; x++) {\n      const sx = Math.floor((a * x + sxPre1) / (g * x + sxPre2));\n      const sy = Math.floor((d * x + syPre1) / (g * x + syPre2));\n      // TODO - should we interpolate this value?\n      result.bytes[y * size + x] = source.bytes[sy * source.width + sx];\n    }\n  }\n  return result;\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,SAAS;AAG3B,eAAe,SAASC,uBAAuB,CAC7CC,MAAa,EACbC,IAAY,EACZC,QAAmB,EACnB;EACA,MAAM;IAAEC,CAAC;IAAEC,CAAC;IAAEC,CAAC;IAAEC,CAAC;IAAEC,CAAC;IAAEC,CAAC;IAAEC,CAAC;IAAEC;EAAE,CAAC,GAAGR,QAAQ;EAE3C,MAAMS,MAAM,GAAGb,KAAK,CAACc,QAAQ,CAACX,IAAI,EAAEA,IAAI,CAAC;EACzC,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,IAAI,EAAEY,CAAC,EAAE,EAAE;IAC7B,MAAMC,MAAM,GAAGV,CAAC,GAAGS,CAAC,GAAGR,CAAC;IACxB,MAAMU,MAAM,GAAGL,CAAC,GAAGG,CAAC,GAAG,CAAC;IACxB,MAAMG,MAAM,GAAGT,CAAC,GAAGM,CAAC,GAAGL,CAAC;IACxB,MAAMS,MAAM,GAAGP,CAAC,GAAGG,CAAC,GAAG,CAAC;IAExB,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,IAAI,EAAEiB,CAAC,EAAE,EAAE;MAC7B,MAAMC,EAAE,GAAGC,IAAI,CAACC,KAAK,CAAC,CAAClB,CAAC,GAAGe,CAAC,GAAGJ,MAAM,KAAKL,CAAC,GAAGS,CAAC,GAAGH,MAAM,CAAC,CAAC;MAC1D,MAAMO,EAAE,GAAGF,IAAI,CAACC,KAAK,CAAC,CAACf,CAAC,GAAGY,CAAC,GAAGF,MAAM,KAAKP,CAAC,GAAGS,CAAC,GAAGD,MAAM,CAAC,CAAC;MAC1D;MACAN,MAAM,CAACY,KAAK,CAACV,CAAC,GAAGZ,IAAI,GAAGiB,CAAC,CAAC,GAAGlB,MAAM,CAACuB,KAAK,CAACD,EAAE,GAAGtB,MAAM,CAACwB,KAAK,GAAGL,EAAE,CAAC;IACnE;EACF;EACA,OAAOR,MAAM;AACf"},"metadata":{},"sourceType":"module"}