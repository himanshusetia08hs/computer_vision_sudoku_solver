{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool3D, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { pool3d } from '../utils/pool_utils';\nexport function avgPool3D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode,\n    dataFormat,\n    dilations\n  } = attrs;\n  assertNotComplex(x, 'avgPool3d');\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1, 1];\n  }\n  const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, $dilations, pad, dimRoundingMode, dataFormat);\n  const xValues = backend.data.get(x.dataId).values;\n  const outBuf = pool3d(xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\nexport const avgPool3DConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'cpu',\n  kernelFunc: avgPool3D\n};","map":{"version":3,"sources":["../../src/kernels/AvgPool3D.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,SAAS,EAAmC,YAAY,EAAoD,IAAI,QAAO,uBAAuB;AAGtJ,SAAQ,gBAAgB,QAAO,aAAa;AAC5C,SAAQ,MAAM,QAAO,qBAAqB;AAE1C,OAAM,SAAU,SAAS,CAAC,IAIzB,EAAA;EACC,MAAM;IAAC,MAAM;IAAE,OAAO;IAAE;EAAK,CAAC,GAAG,IAAI;EACrC,MAAM;IAAC;EAAC,CAAC,GAAG,MAAM;EAClB,MAAM;IAAC,UAAU;IAAE,OAAO;IAAE,GAAG;IAAE,eAAe;IAAE,UAAU;IAAE;EAAS,CAAC,GACpE,KAAK;EAET,gBAAgB,CAAC,CAAC,EAAE,WAAW,CAAC;EAEhC,IAAI,UAAU,GAAG,SAAS;EAC1B,IAAI,UAAU,IAAI,IAAI,EAAE;IACtB,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACvB;EAED,MAAM,QAAQ,GAAG,YAAY,CAAC,iBAAiB,CAC3C,CAAC,CAAC,KAAiD,EAAE,UAAU,EAAE,OAAO,EACxE,UAAU,EAAE,GAAG,EAAE,eAAe,EAAE,UAAU,CAAC;EAEjD,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAoB;EAC/D,MAAM,MAAM,GAAG,MAAM,CACjB,OAAO,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,KAAK,CAAC;EAE7E,OAAO,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,EAAE,MAAM,CAAC,MAAM,CAAC;AACvE;AAEA,OAAO,MAAM,eAAe,GAAiB;EAC3C,UAAU,EAAE,SAAS;EACrB,WAAW,EAAE,KAAK;EAClB,UAAU,EAAE;CACb","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool3D, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { pool3d } from '../utils/pool_utils';\nexport function avgPool3D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { filterSize, strides, pad, dimRoundingMode, dataFormat, dilations } = attrs;\n    assertNotComplex(x, 'avgPool3d');\n    let $dilations = dilations;\n    if ($dilations == null) {\n        $dilations = [1, 1, 1];\n    }\n    const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, $dilations, pad, dimRoundingMode, dataFormat);\n    const xValues = backend.data.get(x.dataId).values;\n    const outBuf = pool3d(xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n    return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\nexport const avgPool3DConfig = {\n    kernelName: AvgPool3D,\n    backendName: 'cpu',\n    kernelFunc: avgPool3D\n};\n//# sourceMappingURL=AvgPool3D.js.map"]},"metadata":{},"sourceType":"module"}