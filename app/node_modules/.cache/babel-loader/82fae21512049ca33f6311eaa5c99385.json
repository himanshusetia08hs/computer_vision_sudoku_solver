{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeNearestNeighbor, util } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nlet wasmResizeNearestNeighbor;\nfunction setup(backend) {\n  wasmResizeNearestNeighbor = backend.wasm.cwrap(ResizeNearestNeighbor, null /*void*/, ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number' // outId\n  ]);\n}\n\nfunction resizeNearestNeighbor(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    images\n  } = inputs;\n  const {\n    alignCorners,\n    halfPixelCenters,\n    size\n  } = attrs;\n  const [newHeight, newWidth] = size;\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const outShape = [batch, newHeight, newWidth, numChannels];\n  const out = backend.makeOutput(outShape, 'float32');\n  if (util.sizeFromShape(images.shape) === 0) {\n    return out;\n  }\n  let xData = backend.dataIdMap.get(images.dataId);\n  let castedData;\n  if (xData.dtype !== 'float32') {\n    castedData = cast({\n      backend,\n      inputs: {\n        x: images\n      },\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    xData = backend.dataIdMap.get(castedData.dataId);\n  }\n  const xId = xData.id;\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmResizeNearestNeighbor(xId, batch, oldHeight, oldWidth, numChannels, newHeight, newWidth, alignCorners ? 1 : 0, halfPixelCenters ? 1 : 0, outId);\n  if (castedData != null) {\n    backend.disposeData(castedData.dataId);\n  }\n  return out;\n}\nexport const resizeNearestNeighborConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: resizeNearestNeighbor\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-wasm/src/kernels/ResizeNearestNeighbor.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAGE,qBAAqB,EAIrB,IAAI,QACC,uBAAuB;AAI9B,SAAS,IAAI,QAAQ,QAAQ;AAE7B,IAAI,yBAWK;AAET,SAAS,KAAK,CAAC,OAAoB,EAAA;EACjC,yBAAyB,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAC5C,qBAAqB,EACrB,IAAI,CAAC,UACL,CACE,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAE;EAAA,CACX,CACF;AACH;;AAEA,SAAS,qBAAqB,CAAC,IAI9B,EAAA;EACC,MAAM;IAAE,OAAO;IAAE,MAAM;IAAE;EAAK,CAAE,GAAG,IAAI;EACvC,MAAM;IAAE;EAAM,CAAE,GAAG,MAAM;EACzB,MAAM;IAAE,YAAY;IAAE,gBAAgB;IAAE;EAAI,CAAE,GAAG,KAAK;EAEtD,MAAM,CAAC,SAAS,EAAE,QAAQ,CAAC,GAAG,IAAI;EAElC,MAAM,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,CAAC,GAAG,MAAM,CAAC,KAAK;EAC9D,MAAM,QAAQ,GAAG,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,CAAC;EAE1D,MAAM,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,QAAQ,EAAE,SAAS,CAAC;EACnD,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;IAC1C,OAAO,GAAG;EACX;EAED,IAAI,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC;EAChD,IAAI,UAAU;EACd,IAAI,KAAK,CAAC,KAAK,KAAK,SAAS,EAAE;IAC7B,UAAU,GAAG,IAAI,CAAC;MAChB,OAAO;MACP,MAAM,EAAE;QAAE,CAAC,EAAE;MAAM,CAAE;MACrB,KAAK,EAAE;QAAE,KAAK,EAAE;MAAS;KAC1B,CAAC;IACF,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC;EACjD;EAED,MAAM,GAAG,GAAG,KAAK,CAAC,EAAE;EACpB,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE;EAElD,yBAAyB,CACvB,GAAG,EACH,KAAK,EACL,SAAS,EACT,QAAQ,EACR,WAAW,EACX,SAAS,EACT,QAAQ,EACR,YAAY,GAAG,CAAC,GAAG,CAAC,EACpB,gBAAgB,GAAG,CAAC,GAAG,CAAC,EACxB,KAAK,CACN;EAED,IAAI,UAAU,IAAI,IAAI,EAAE;IACtB,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC;EACvC;EAED,OAAO,GAAG;AACZ;AAEA,OAAO,MAAM,2BAA2B,GAAiB;EACvD,UAAU,EAAE,qBAAqB;EACjC,WAAW,EAAE,MAAM;EACnB,SAAS,EAAE,KAAK;EAChB,UAAU,EAAE;CACb","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {\n  KernelConfig,\n  KernelFunc,\n  ResizeNearestNeighbor,\n  ResizeNearestNeighborAttrs,\n  ResizeNearestNeighborInputs,\n  TensorInfo,\n  util,\n} from '@tensorflow/tfjs-core';\n\nimport { BackendWasm } from '../backend_wasm';\n\nimport { cast } from './Cast';\n\nlet wasmResizeNearestNeighbor: (\n  xId: number,\n  batch: number,\n  oldHeight: number,\n  oldWidth: number,\n  numChannels: number,\n  newHeight: number,\n  newWidth: number,\n  alignCorners: number,\n  halfPixelCenters: number,\n  outId: number\n) => void;\n\nfunction setup(backend: BackendWasm): void {\n  wasmResizeNearestNeighbor = backend.wasm.cwrap(\n    ResizeNearestNeighbor,\n    null /*void*/,\n    [\n      'number', // xId\n      'number', // batch\n      'number', // oldHeight\n      'number', // oldWidth\n      'number', // numChannels\n      'number', // newHeight\n      'number', // newWidth\n      'number', // alignCorners\n      'number', // halfPixelCenters\n      'number', // outId\n    ]\n  );\n}\n\nfunction resizeNearestNeighbor(args: {\n  backend: BackendWasm;\n  inputs: ResizeNearestNeighborInputs;\n  attrs: ResizeNearestNeighborAttrs;\n}): TensorInfo {\n  const { backend, inputs, attrs } = args;\n  const { images } = inputs;\n  const { alignCorners, halfPixelCenters, size } = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const outShape = [batch, newHeight, newWidth, numChannels];\n\n  const out = backend.makeOutput(outShape, 'float32');\n  if (util.sizeFromShape(images.shape) === 0) {\n    return out;\n  }\n\n  let xData = backend.dataIdMap.get(images.dataId);\n  let castedData;\n  if (xData.dtype !== 'float32') {\n    castedData = cast({\n      backend,\n      inputs: { x: images },\n      attrs: { dtype: 'float32' },\n    });\n    xData = backend.dataIdMap.get(castedData.dataId);\n  }\n\n  const xId = xData.id;\n  const outId = backend.dataIdMap.get(out.dataId).id;\n\n  wasmResizeNearestNeighbor(\n    xId,\n    batch,\n    oldHeight,\n    oldWidth,\n    numChannels,\n    newHeight,\n    newWidth,\n    alignCorners ? 1 : 0,\n    halfPixelCenters ? 1 : 0,\n    outId\n  );\n\n  if (castedData != null) {\n    backend.disposeData(castedData.dataId);\n  }\n\n  return out;\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: resizeNearestNeighbor as {} as KernelFunc,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}