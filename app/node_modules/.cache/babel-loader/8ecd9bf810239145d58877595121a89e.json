{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { isAccessorNode, isFunctionAssignmentNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is';\nimport { escape } from '../../utils/string';\nimport { hasOwnProperty } from '../../utils/object';\nimport { map } from '../../utils/array';\nimport { getSafeProperty, validateSafeMethod } from '../../utils/customs';\nimport { factory } from '../../utils/factory';\nimport { defaultTemplate, latexFunctions } from '../../utils/latex';\nvar name = 'FunctionNode';\nvar dependencies = ['math', 'Node', 'SymbolNode'];\nexport var createFunctionNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var math = _ref.math,\n    Node = _ref.Node,\n    SymbolNode = _ref.SymbolNode;\n\n  /**\n   * @constructor FunctionNode\n   * @extends {./Node}\n   * invoke a list with arguments on a node\n   * @param {./Node | string} fn Node resolving with a function on which to invoke\n   *                             the arguments, typically a SymboNode or AccessorNode\n   * @param {./Node[]} args\n   */\n  function FunctionNode(fn, args) {\n    if (!(this instanceof FunctionNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (typeof fn === 'string') {\n      fn = new SymbolNode(fn);\n    } // validate input\n\n    if (!isNode(fn)) throw new TypeError('Node expected as parameter \"fn\"');\n    if (!Array.isArray(args) || !args.every(isNode)) {\n      throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n    }\n    this.fn = fn;\n    this.args = args || []; // readonly property name\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        return this.fn.name || '';\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n  FunctionNode.prototype = new Node();\n  FunctionNode.prototype.type = 'FunctionNode';\n  FunctionNode.prototype.isFunctionNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  FunctionNode.prototype._compile = function (math, argNames) {\n    if (!(this instanceof FunctionNode)) {\n      throw new TypeError('No valid FunctionNode');\n    } // compile arguments\n\n    var evalArgs = map(this.args, function (arg) {\n      return arg._compile(math, argNames);\n    });\n    if (isSymbolNode(this.fn)) {\n      // we can statically determine whether the function has an rawArgs property\n      var _name = this.fn.name;\n      var fn = _name in math ? getSafeProperty(math, _name) : undefined;\n      var isRaw = typeof fn === 'function' && fn.rawArgs === true;\n      if (isRaw) {\n        // pass unevaluated parameters (nodes) to the function\n        // \"raw\" evaluation\n        var rawArgs = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          return (_name in scope ? getSafeProperty(scope, _name) : fn)(rawArgs, math, _extends({}, scope, args));\n        };\n      } else {\n        // \"regular\" evaluation\n        if (evalArgs.length === 1) {\n          var evalArg0 = evalArgs[0];\n          return function evalFunctionNode(scope, args, context) {\n            return (_name in scope ? getSafeProperty(scope, _name) : fn)(evalArg0(scope, args, context));\n          };\n        } else if (evalArgs.length === 2) {\n          var _evalArg = evalArgs[0];\n          var evalArg1 = evalArgs[1];\n          return function evalFunctionNode(scope, args, context) {\n            return (_name in scope ? getSafeProperty(scope, _name) : fn)(_evalArg(scope, args, context), evalArg1(scope, args, context));\n          };\n        } else {\n          return function evalFunctionNode(scope, args, context) {\n            return (_name in scope ? getSafeProperty(scope, _name) : fn).apply(null, map(evalArgs, function (evalArg) {\n              return evalArg(scope, args, context);\n            }));\n          };\n        }\n      }\n    } else if (isAccessorNode(this.fn) && isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {\n      // execute the function with the right context: the object of the AccessorNode\n      var evalObject = this.fn.object._compile(math, argNames);\n      var prop = this.fn.index.getObjectProperty();\n      var _rawArgs = this.args;\n      return function evalFunctionNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        validateSafeMethod(object, prop);\n        var isRaw = object[prop] && object[prop].rawArgs;\n        return isRaw ? object[prop](_rawArgs, math, _extends({}, scope, args)) // \"raw\" evaluation\n        : object[prop].apply(object, map(evalArgs, function (evalArg) {\n          // \"regular\" evaluation\n          return evalArg(scope, args, context);\n        }));\n      };\n    } else {\n      // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n      // we have to dynamically determine whether the function has a rawArgs property\n      var evalFn = this.fn._compile(math, argNames);\n      var _rawArgs2 = this.args;\n      return function evalFunctionNode(scope, args, context) {\n        var fn = evalFn(scope, args, context);\n        var isRaw = fn && fn.rawArgs;\n        return isRaw ? fn(_rawArgs2, math, _extends({}, scope, args)) // \"raw\" evaluation\n        : fn.apply(fn, map(evalArgs, function (evalArg) {\n          // \"regular\" evaluation\n          return evalArg(scope, args, context);\n        }));\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n  FunctionNode.prototype.forEach = function (callback) {\n    callback(this.fn, 'fn', this);\n    for (var i = 0; i < this.args.length; i++) {\n      callback(this.args[i], 'args[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new FunctionNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {FunctionNode} Returns a transformed copy of the node\n   */\n\n  FunctionNode.prototype.map = function (callback) {\n    var fn = this._ifNode(callback(this.fn, 'fn', this));\n    var args = [];\n    for (var i = 0; i < this.args.length; i++) {\n      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n    }\n    return new FunctionNode(fn, args);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {FunctionNode}\n   */\n\n  FunctionNode.prototype.clone = function () {\n    return new FunctionNode(this.fn, this.args.slice(0));\n  }; // backup Node's toString function\n  // @private\n\n  var nodeToString = FunctionNode.prototype.toString;\n  /**\n   * Get string representation. (wrapper function)\n   * This overrides parts of Node's toString function.\n   * If callback is an object containing callbacks, it\n   * calls the correct callback for the current node,\n   * otherwise it falls back to calling Node's toString\n   * function.\n   *\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n  FunctionNode.prototype.toString = function (options) {\n    var customString;\n    var name = this.fn.toString(options);\n    if (options && _typeof(options.handler) === 'object' && hasOwnProperty(options.handler, name)) {\n      // callback is a map of callback functions\n      customString = options.handler[name](this, options);\n    }\n    if (typeof customString !== 'undefined') {\n      return customString;\n    } // fall back to Node's toString\n\n    return nodeToString.call(this, options);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n  FunctionNode.prototype._toString = function (options) {\n    var args = this.args.map(function (arg) {\n      return arg.toString(options);\n    });\n    var fn = isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like \"add(2, 4.2)\"\n\n    return fn + '(' + args.join(', ') + ')';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n  FunctionNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'FunctionNode',\n      fn: this.fn,\n      args: this.args\n    };\n  };\n  /**\n   * Instantiate an AssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"FunctionNode\", fn: ..., args: ...}`,\n   *                       where mathjs is optional\n   * @returns {FunctionNode}\n   */\n\n  FunctionNode.fromJSON = function (json) {\n    return new FunctionNode(json.fn, json.args);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n  FunctionNode.prototype.toHTML = function (options) {\n    var args = this.args.map(function (arg) {\n      return arg.toHTML(options);\n    }); // format the arguments like \"add(2, 4.2)\"\n\n    return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n  };\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n\n  function expandTemplate(template, node, options) {\n    var latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n\n    var regex = /\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)/gi;\n    var inputPos = 0; // position in the input string\n\n    var match;\n    while ((match = regex.exec(template)) !== null) {\n      // go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n      if (match[0] === '$$') {\n        // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      } else {\n        // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n        if (match[2] === undefined) {\n          // no square brackets\n          switch (_typeof(property)) {\n            case 'string':\n              latex += property;\n              break;\n            case 'object':\n              if (isNode(property)) {\n                latex += property.toTex(options);\n              } else if (Array.isArray(property)) {\n                // make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if (isNode(arg)) {\n                    return arg.toTex(options);\n                  }\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              } else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n              break;\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        } else {\n          // with square brackets\n          if (isNode(property[match[2]] && property[match[2]])) {\n            latex += property[match[2]].toTex(options);\n          } else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n    latex += template.slice(inputPos); // append rest of the template\n\n    return latex;\n  } // backup Node's toTex function\n  // @private\n\n  var nodeToTex = FunctionNode.prototype.toTex;\n  /**\n   * Get LaTeX representation. (wrapper function)\n   * This overrides parts of Node's toTex function.\n   * If callback is an object containing callbacks, it\n   * calls the correct callback for the current node,\n   * otherwise it falls back to calling Node's toTex\n   * function.\n   *\n   * @param {Object} options\n   * @return {string}\n   */\n\n  FunctionNode.prototype.toTex = function (options) {\n    var customTex;\n    if (options && _typeof(options.handler) === 'object' && hasOwnProperty(options.handler, this.name)) {\n      // callback is a map of callback functions\n      customTex = options.handler[this.name](this, options);\n    }\n    if (typeof customTex !== 'undefined') {\n      return customTex;\n    } // fall back to Node's toTex\n\n    return nodeToTex.call(this, options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n  FunctionNode.prototype._toTex = function (options) {\n    var args = this.args.map(function (arg) {\n      // get LaTeX of the arguments\n      return arg.toTex(options);\n    });\n    var latexConverter;\n    if (latexFunctions[this.name]) {\n      latexConverter = latexFunctions[this.name];\n    } // toTex property on the function itself\n\n    if (math[this.name] && (typeof math[this.name].toTex === 'function' || _typeof(math[this.name].toTex) === 'object' || typeof math[this.name].toTex === 'string')) {\n      // .toTex is a callback function\n      latexConverter = math[this.name].toTex;\n    }\n    var customToTex;\n    switch (_typeof(latexConverter)) {\n      case 'function':\n        // a callback function\n        customToTex = latexConverter(this, options);\n        break;\n      case 'string':\n        // a template string\n        customToTex = expandTemplate(latexConverter, this, options);\n        break;\n      case 'object':\n        // an object with different \"converters\" for different numbers of arguments\n        switch (_typeof(latexConverter[args.length])) {\n          case 'function':\n            customToTex = latexConverter[args.length](this, options);\n            break;\n          case 'string':\n            customToTex = expandTemplate(latexConverter[args.length], this, options);\n            break;\n        }\n    }\n    if (typeof customToTex !== 'undefined') {\n      return customToTex;\n    }\n    return expandTemplate(defaultTemplate, this, options);\n  };\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n\n  FunctionNode.prototype.getIdentifier = function () {\n    return this.type + ':' + this.name;\n  };\n  return FunctionNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_extends","Object","assign","target","i","arguments","length","source","key","hasOwnProperty","call","apply","isAccessorNode","isFunctionAssignmentNode","isIndexNode","isNode","isSymbolNode","escape","map","getSafeProperty","validateSafeMethod","factory","defaultTemplate","latexFunctions","name","dependencies","createFunctionNode","_ref","math","Node","SymbolNode","FunctionNode","fn","args","SyntaxError","TypeError","Array","isArray","every","defineProperty","get","bind","set","Error","type","isFunctionNode","_compile","argNames","evalArgs","arg","_name","undefined","isRaw","rawArgs","evalFunctionNode","scope","context","evalArg0","_evalArg","evalArg1","evalArg","index","isObjectProperty","evalObject","object","prop","getObjectProperty","_rawArgs","evalFn","_rawArgs2","forEach","callback","_ifNode","clone","slice","nodeToString","toString","options","customString","handler","_toString","join","toJSON","mathjs","fromJSON","json","toHTML","expandTemplate","template","node","latex","regex","inputPos","match","exec","substring","property","ReferenceError","toTex","nodeToTex","customTex","_toTex","latexConverter","customToTex","getIdentifier","isClass"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/Project/temp/app/node_modules/mathjs/es/expression/node/FunctionNode.js"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { isAccessorNode, isFunctionAssignmentNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is';\nimport { escape } from '../../utils/string';\nimport { hasOwnProperty } from '../../utils/object';\nimport { map } from '../../utils/array';\nimport { getSafeProperty, validateSafeMethod } from '../../utils/customs';\nimport { factory } from '../../utils/factory';\nimport { defaultTemplate, latexFunctions } from '../../utils/latex';\nvar name = 'FunctionNode';\nvar dependencies = ['math', 'Node', 'SymbolNode'];\nexport var createFunctionNode = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var math = _ref.math,\n      Node = _ref.Node,\n      SymbolNode = _ref.SymbolNode;\n\n  /**\n   * @constructor FunctionNode\n   * @extends {./Node}\n   * invoke a list with arguments on a node\n   * @param {./Node | string} fn Node resolving with a function on which to invoke\n   *                             the arguments, typically a SymboNode or AccessorNode\n   * @param {./Node[]} args\n   */\n  function FunctionNode(fn, args) {\n    if (!(this instanceof FunctionNode)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (typeof fn === 'string') {\n      fn = new SymbolNode(fn);\n    } // validate input\n\n\n    if (!isNode(fn)) throw new TypeError('Node expected as parameter \"fn\"');\n\n    if (!Array.isArray(args) || !args.every(isNode)) {\n      throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n    }\n\n    this.fn = fn;\n    this.args = args || []; // readonly property name\n\n    Object.defineProperty(this, 'name', {\n      get: function () {\n        return this.fn.name || '';\n      }.bind(this),\n      set: function set() {\n        throw new Error('Cannot assign a new name, name is read-only');\n      }\n    });\n  }\n\n  FunctionNode.prototype = new Node();\n  FunctionNode.prototype.type = 'FunctionNode';\n  FunctionNode.prototype.isFunctionNode = true;\n  /**\n   * Compile a node into a JavaScript function.\n   * This basically pre-calculates as much as possible and only leaves open\n   * calculations which depend on a dynamic scope with variables.\n   * @param {Object} math     Math.js namespace with functions and constants.\n   * @param {Object} argNames An object with argument names as key and `true`\n   *                          as value. Used in the SymbolNode to optimize\n   *                          for arguments from user assigned functions\n   *                          (see FunctionAssignmentNode) or special symbols\n   *                          like `end` (see IndexNode).\n   * @return {function} Returns a function which can be called like:\n   *                        evalNode(scope: Object, args: Object, context: *)\n   */\n\n  FunctionNode.prototype._compile = function (math, argNames) {\n    if (!(this instanceof FunctionNode)) {\n      throw new TypeError('No valid FunctionNode');\n    } // compile arguments\n\n\n    var evalArgs = map(this.args, function (arg) {\n      return arg._compile(math, argNames);\n    });\n\n    if (isSymbolNode(this.fn)) {\n      // we can statically determine whether the function has an rawArgs property\n      var _name = this.fn.name;\n      var fn = _name in math ? getSafeProperty(math, _name) : undefined;\n      var isRaw = typeof fn === 'function' && fn.rawArgs === true;\n\n      if (isRaw) {\n        // pass unevaluated parameters (nodes) to the function\n        // \"raw\" evaluation\n        var rawArgs = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          return (_name in scope ? getSafeProperty(scope, _name) : fn)(rawArgs, math, _extends({}, scope, args));\n        };\n      } else {\n        // \"regular\" evaluation\n        if (evalArgs.length === 1) {\n          var evalArg0 = evalArgs[0];\n          return function evalFunctionNode(scope, args, context) {\n            return (_name in scope ? getSafeProperty(scope, _name) : fn)(evalArg0(scope, args, context));\n          };\n        } else if (evalArgs.length === 2) {\n          var _evalArg = evalArgs[0];\n          var evalArg1 = evalArgs[1];\n          return function evalFunctionNode(scope, args, context) {\n            return (_name in scope ? getSafeProperty(scope, _name) : fn)(_evalArg(scope, args, context), evalArg1(scope, args, context));\n          };\n        } else {\n          return function evalFunctionNode(scope, args, context) {\n            return (_name in scope ? getSafeProperty(scope, _name) : fn).apply(null, map(evalArgs, function (evalArg) {\n              return evalArg(scope, args, context);\n            }));\n          };\n        }\n      }\n    } else if (isAccessorNode(this.fn) && isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {\n      // execute the function with the right context: the object of the AccessorNode\n      var evalObject = this.fn.object._compile(math, argNames);\n\n      var prop = this.fn.index.getObjectProperty();\n      var _rawArgs = this.args;\n      return function evalFunctionNode(scope, args, context) {\n        var object = evalObject(scope, args, context);\n        validateSafeMethod(object, prop);\n        var isRaw = object[prop] && object[prop].rawArgs;\n        return isRaw ? object[prop](_rawArgs, math, _extends({}, scope, args)) // \"raw\" evaluation\n        : object[prop].apply(object, map(evalArgs, function (evalArg) {\n          // \"regular\" evaluation\n          return evalArg(scope, args, context);\n        }));\n      };\n    } else {\n      // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n      // we have to dynamically determine whether the function has a rawArgs property\n      var evalFn = this.fn._compile(math, argNames);\n\n      var _rawArgs2 = this.args;\n      return function evalFunctionNode(scope, args, context) {\n        var fn = evalFn(scope, args, context);\n        var isRaw = fn && fn.rawArgs;\n        return isRaw ? fn(_rawArgs2, math, _extends({}, scope, args)) // \"raw\" evaluation\n        : fn.apply(fn, map(evalArgs, function (evalArg) {\n          // \"regular\" evaluation\n          return evalArg(scope, args, context);\n        }));\n      };\n    }\n  };\n  /**\n   * Execute a callback for each of the child nodes of this node\n   * @param {function(child: Node, path: string, parent: Node)} callback\n   */\n\n\n  FunctionNode.prototype.forEach = function (callback) {\n    callback(this.fn, 'fn', this);\n\n    for (var i = 0; i < this.args.length; i++) {\n      callback(this.args[i], 'args[' + i + ']', this);\n    }\n  };\n  /**\n   * Create a new FunctionNode having it's childs be the results of calling\n   * the provided callback function for each of the childs of the original node.\n   * @param {function(child: Node, path: string, parent: Node): Node} callback\n   * @returns {FunctionNode} Returns a transformed copy of the node\n   */\n\n\n  FunctionNode.prototype.map = function (callback) {\n    var fn = this._ifNode(callback(this.fn, 'fn', this));\n\n    var args = [];\n\n    for (var i = 0; i < this.args.length; i++) {\n      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n    }\n\n    return new FunctionNode(fn, args);\n  };\n  /**\n   * Create a clone of this node, a shallow copy\n   * @return {FunctionNode}\n   */\n\n\n  FunctionNode.prototype.clone = function () {\n    return new FunctionNode(this.fn, this.args.slice(0));\n  }; // backup Node's toString function\n  // @private\n\n\n  var nodeToString = FunctionNode.prototype.toString;\n  /**\n   * Get string representation. (wrapper function)\n   * This overrides parts of Node's toString function.\n   * If callback is an object containing callbacks, it\n   * calls the correct callback for the current node,\n   * otherwise it falls back to calling Node's toString\n   * function.\n   *\n   * @param {Object} options\n   * @return {string} str\n   * @override\n   */\n\n  FunctionNode.prototype.toString = function (options) {\n    var customString;\n    var name = this.fn.toString(options);\n\n    if (options && _typeof(options.handler) === 'object' && hasOwnProperty(options.handler, name)) {\n      // callback is a map of callback functions\n      customString = options.handler[name](this, options);\n    }\n\n    if (typeof customString !== 'undefined') {\n      return customString;\n    } // fall back to Node's toString\n\n\n    return nodeToString.call(this, options);\n  };\n  /**\n   * Get string representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionNode.prototype._toString = function (options) {\n    var args = this.args.map(function (arg) {\n      return arg.toString(options);\n    });\n    var fn = isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like \"add(2, 4.2)\"\n\n    return fn + '(' + args.join(', ') + ')';\n  };\n  /**\n   * Get a JSON representation of the node\n   * @returns {Object}\n   */\n\n\n  FunctionNode.prototype.toJSON = function () {\n    return {\n      mathjs: 'FunctionNode',\n      fn: this.fn,\n      args: this.args\n    };\n  };\n  /**\n   * Instantiate an AssignmentNode from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"FunctionNode\", fn: ..., args: ...}`,\n   *                       where mathjs is optional\n   * @returns {FunctionNode}\n   */\n\n\n  FunctionNode.fromJSON = function (json) {\n    return new FunctionNode(json.fn, json.args);\n  };\n  /**\n   * Get HTML representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionNode.prototype.toHTML = function (options) {\n    var args = this.args.map(function (arg) {\n      return arg.toHTML(options);\n    }); // format the arguments like \"add(2, 4.2)\"\n\n    return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n  };\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n\n\n  function expandTemplate(template, node, options) {\n    var latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n\n    var regex = /\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)/gi;\n    var inputPos = 0; // position in the input string\n\n    var match;\n\n    while ((match = regex.exec(template)) !== null) {\n      // go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n\n      if (match[0] === '$$') {\n        // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      } else {\n        // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n\n        if (match[2] === undefined) {\n          // no square brackets\n          switch (_typeof(property)) {\n            case 'string':\n              latex += property;\n              break;\n\n            case 'object':\n              if (isNode(property)) {\n                latex += property.toTex(options);\n              } else if (Array.isArray(property)) {\n                // make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if (isNode(arg)) {\n                    return arg.toTex(options);\n                  }\n\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              } else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n\n              break;\n\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        } else {\n          // with square brackets\n          if (isNode(property[match[2]] && property[match[2]])) {\n            latex += property[match[2]].toTex(options);\n          } else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n\n    latex += template.slice(inputPos); // append rest of the template\n\n    return latex;\n  } // backup Node's toTex function\n  // @private\n\n\n  var nodeToTex = FunctionNode.prototype.toTex;\n  /**\n   * Get LaTeX representation. (wrapper function)\n   * This overrides parts of Node's toTex function.\n   * If callback is an object containing callbacks, it\n   * calls the correct callback for the current node,\n   * otherwise it falls back to calling Node's toTex\n   * function.\n   *\n   * @param {Object} options\n   * @return {string}\n   */\n\n  FunctionNode.prototype.toTex = function (options) {\n    var customTex;\n\n    if (options && _typeof(options.handler) === 'object' && hasOwnProperty(options.handler, this.name)) {\n      // callback is a map of callback functions\n      customTex = options.handler[this.name](this, options);\n    }\n\n    if (typeof customTex !== 'undefined') {\n      return customTex;\n    } // fall back to Node's toTex\n\n\n    return nodeToTex.call(this, options);\n  };\n  /**\n   * Get LaTeX representation\n   * @param {Object} options\n   * @return {string} str\n   */\n\n\n  FunctionNode.prototype._toTex = function (options) {\n    var args = this.args.map(function (arg) {\n      // get LaTeX of the arguments\n      return arg.toTex(options);\n    });\n    var latexConverter;\n\n    if (latexFunctions[this.name]) {\n      latexConverter = latexFunctions[this.name];\n    } // toTex property on the function itself\n\n\n    if (math[this.name] && (typeof math[this.name].toTex === 'function' || _typeof(math[this.name].toTex) === 'object' || typeof math[this.name].toTex === 'string')) {\n      // .toTex is a callback function\n      latexConverter = math[this.name].toTex;\n    }\n\n    var customToTex;\n\n    switch (_typeof(latexConverter)) {\n      case 'function':\n        // a callback function\n        customToTex = latexConverter(this, options);\n        break;\n\n      case 'string':\n        // a template string\n        customToTex = expandTemplate(latexConverter, this, options);\n        break;\n\n      case 'object':\n        // an object with different \"converters\" for different numbers of arguments\n        switch (_typeof(latexConverter[args.length])) {\n          case 'function':\n            customToTex = latexConverter[args.length](this, options);\n            break;\n\n          case 'string':\n            customToTex = expandTemplate(latexConverter[args.length], this, options);\n            break;\n        }\n\n    }\n\n    if (typeof customToTex !== 'undefined') {\n      return customToTex;\n    }\n\n    return expandTemplate(defaultTemplate, this, options);\n  };\n  /**\n   * Get identifier.\n   * @return {string}\n   */\n\n\n  FunctionNode.prototype.getIdentifier = function () {\n    return this.type + ':' + this.name;\n  };\n\n  return FunctionNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}