{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { NodeValueImpl } from './custom_op/node_value_impl';\nimport { getRegisteredOp } from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as transformation from './executors/transformation_executor';\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function executeOp(node, tensorMap, context, resourceManager) {\n  const value = ((node, tensorMap, context) => {\n    switch (node.category) {\n      case 'arithmetic':\n        return tfc.tidy(() => arithmetic.executeOp(node, tensorMap, context));\n      case 'basic_math':\n        return tfc.tidy(() => basicMath.executeOp(node, tensorMap, context));\n      case 'control':\n        return control.executeOp(node, tensorMap, context);\n      case 'convolution':\n        return tfc.tidy(() => convolution.executeOp(node, tensorMap, context));\n      case 'creation':\n        return tfc.tidy(() => creation.executeOp(node, tensorMap, context));\n      case 'dynamic':\n        return dynamic.executeOp(node, tensorMap, context);\n      case 'evaluation':\n        return tfc.tidy(() => evaluation.executeOp(node, tensorMap, context));\n      case 'image':\n        return tfc.tidy(() => image.executeOp(node, tensorMap, context));\n      case 'graph':\n        return tfc.tidy(() => graph.executeOp(node, tensorMap, context));\n      case 'logical':\n        return tfc.tidy(() => logical.executeOp(node, tensorMap, context));\n      case 'matrices':\n        return tfc.tidy(() => matrices.executeOp(node, tensorMap, context));\n      case 'normalization':\n        return tfc.tidy(() => normalization.executeOp(node, tensorMap, context));\n      case 'reduction':\n        return tfc.tidy(() => reduction.executeOp(node, tensorMap, context));\n      case 'slice_join':\n        return tfc.tidy(() => sliceJoin.executeOp(node, tensorMap, context));\n      case 'spectral':\n        return tfc.tidy(() => spectral.executeOp(node, tensorMap, context));\n      case 'transformation':\n        return tfc.tidy(() => transformation.executeOp(node, tensorMap, context));\n      case 'hash_table':\n        return hashTable.executeOp(node, tensorMap, context, resourceManager);\n      case 'custom':\n        const opMapper = getRegisteredOp(node.op);\n        if (opMapper && opMapper.customExecutor) {\n          return opMapper.customExecutor(new NodeValueImpl(node, tensorMap, context));\n        } else {\n          throw TypeError(`Custom op ${node.op} is not registered.`);\n        }\n      default:\n        throw TypeError(`Unknown op '${node.op}'. File an issue at ` + `https://github.com/tensorflow/tfjs/issues so we can add it` + `, or register a custom execution with tf.registerOp()`);\n    }\n  })(node, tensorMap, context);\n  if (tfc.util.isPromise(value)) {\n    return value.then(data => [].concat(data));\n  }\n  return [].concat(value);\n}","map":{"version":3,"sources":["../../src/operations/operation_executor.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { NodeValueImpl } from './custom_op/node_value_impl';\nimport { getRegisteredOp } from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as transformation from './executors/transformation_executor';\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function executeOp(node, tensorMap, context, resourceManager) {\n    const value = ((node, tensorMap, context) => {\n        switch (node.category) {\n            case 'arithmetic':\n                return tfc.tidy(() => arithmetic.executeOp(node, tensorMap, context));\n            case 'basic_math':\n                return tfc.tidy(() => basicMath.executeOp(node, tensorMap, context));\n            case 'control':\n                return control.executeOp(node, tensorMap, context);\n            case 'convolution':\n                return tfc.tidy(() => convolution.executeOp(node, tensorMap, context));\n            case 'creation':\n                return tfc.tidy(() => creation.executeOp(node, tensorMap, context));\n            case 'dynamic':\n                return dynamic.executeOp(node, tensorMap, context);\n            case 'evaluation':\n                return tfc.tidy(() => evaluation.executeOp(node, tensorMap, context));\n            case 'image':\n                return tfc.tidy(() => image.executeOp(node, tensorMap, context));\n            case 'graph':\n                return tfc.tidy(() => graph.executeOp(node, tensorMap, context));\n            case 'logical':\n                return tfc.tidy(() => logical.executeOp(node, tensorMap, context));\n            case 'matrices':\n                return tfc.tidy(() => matrices.executeOp(node, tensorMap, context));\n            case 'normalization':\n                return tfc.tidy(() => normalization.executeOp(node, tensorMap, context));\n            case 'reduction':\n                return tfc.tidy(() => reduction.executeOp(node, tensorMap, context));\n            case 'slice_join':\n                return tfc.tidy(() => sliceJoin.executeOp(node, tensorMap, context));\n            case 'spectral':\n                return tfc.tidy(() => spectral.executeOp(node, tensorMap, context));\n            case 'transformation':\n                return tfc.tidy(() => transformation.executeOp(node, tensorMap, context));\n            case 'hash_table':\n                return hashTable.executeOp(node, tensorMap, context, resourceManager);\n            case 'custom':\n                const opMapper = getRegisteredOp(node.op);\n                if (opMapper && opMapper.customExecutor) {\n                    return opMapper.customExecutor(new NodeValueImpl(node, tensorMap, context));\n                }\n                else {\n                    throw TypeError(`Custom op ${node.op} is not registered.`);\n                }\n            default:\n                throw TypeError(`Unknown op '${node.op}'. File an issue at ` +\n                    `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                    `, or register a custom execution with tf.registerOp()`);\n        }\n    })(node, tensorMap, context);\n    if (tfc.util.isPromise(value)) {\n        return value.then((data) => [].concat(data));\n    }\n    return [].concat(value);\n}\n//# sourceMappingURL=operation_executor.js.map"]},"metadata":{},"sourceType":"module"}