{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BroadcastTo } from '../kernel_names';\nimport { sum } from '../ops/sum';\nexport const broadcastToGradConfig = {\n  kernelName: BroadcastTo,\n  gradFunc: (dy, saved, attrs) => {\n    const broadCastToAttrs = attrs;\n    const inputShape = broadCastToAttrs.inputShape;\n    const outputShape = broadCastToAttrs.shape;\n    const reps = Array.from(outputShape);\n    for (let i = inputShape.length - 1; i >= 0; i--) {\n      if (inputShape[i] === outputShape[i]) {\n        reps[i] = 1;\n      } else if (inputShape[i] !== 1) {\n        throw new Error(`broadcastTo(): [${inputShape}] cannot be broadcast to [${outputShape}].`);\n      }\n    }\n    const axes = [];\n    for (let i = 0; i < reps.length; i++) {\n      if (reps[i] > 1) {\n        axes.push(i);\n      }\n    }\n    return {\n      x: () => sum(dy, axes, true /* keepDims */)\n    };\n  }\n};","map":{"version":3,"sources":["../../../../../../tfjs-core/src/gradients/BroadcastTo_grad.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,WAAW,QAAyB,iBAAiB;AAE7D,SAAQ,GAAG,QAAO,YAAY;AAG9B,OAAO,MAAM,qBAAqB,GAAe;EAC/C,UAAU,EAAE,WAAW;EACvB,QAAQ,EAAE,CAAC,EAAU,EAAE,KAAe,EAAE,KAAmB,KAAI;IAC7D,MAAM,gBAAgB,GAClB,KAAoC;IAExC,MAAM,UAAU,GAAG,gBAAgB,CAAC,UAAU;IAC9C,MAAM,WAAW,GAAG,gBAAgB,CAAC,KAAK;IAE1C,MAAM,IAAI,GAAa,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC;IAC9C,KAAK,IAAI,CAAC,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;MAC/C,IAAI,UAAU,CAAC,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC,EAAE;QACpC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;OACZ,MAAM,IAAI,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;QAC9B,MAAM,IAAI,KAAK,CAAC,mBACZ,UAAU,6BAA6B,WAAW,IAAI,CAAC;MAC5D;IACF;IACD,MAAM,IAAI,GAAa,EAAE;IACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;MACpC,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;QACf,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;MACb;IACF;IAED,OAAO;MAAC,CAAC,EAAE,MAAM,GAAG,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC;IAAe,CAAC;EACtD;CACD","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BroadcastTo, BroadCastToAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {sum} from '../ops/sum';\nimport {Tensor} from '../tensor';\n\nexport const broadcastToGradConfig: GradConfig = {\n  kernelName: BroadcastTo,\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const broadCastToAttrs: BroadCastToAttrs =\n        attrs as unknown as BroadCastToAttrs;\n\n    const inputShape = broadCastToAttrs.inputShape;\n    const outputShape = broadCastToAttrs.shape;\n\n    const reps: number[] = Array.from(outputShape);\n    for (let i = inputShape.length - 1; i >= 0; i--) {\n      if (inputShape[i] === outputShape[i]) {\n        reps[i] = 1;\n      } else if (inputShape[i] !== 1) {\n        throw new Error(`broadcastTo(): [${\n            inputShape}] cannot be broadcast to [${outputShape}].`);\n      }\n    }\n    const axes: number[] = [];\n    for (let i = 0; i < reps.length; i++) {\n      if (reps[i] > 1) {\n        axes.push(i);\n      }\n    }\n\n    return {x: () => sum(dy, axes, true /* keepDims */)};\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}