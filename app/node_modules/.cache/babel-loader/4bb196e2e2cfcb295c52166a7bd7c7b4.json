{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class PackProgram {\n  constructor(outputShape) {\n    this.variableNames = ['A'];\n    this.packedInputs = false;\n    this.packedOutput = true;\n    // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n    if (rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', rank);\n      const dtype = getCoordsDataType(rank);\n      const outOfBoundsCondition = getOutOfBoundsCondition(rank, outputShape, channels);\n      const setup = getSetup(rank, outputShape[outputShape.length - 1], outputShape[outputShape.length - 2], channels);\n      const output = getOutput(outputShape, channels);\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n}\nfunction getSourceCoordsArr(rank, dims) {\n  const coords = [];\n  for (let row = 0; row <= 1; row++) {\n    for (let col = 0; col <= 1; col++) {\n      let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n      for (let d = 2; d < rank; d++) {\n        coord = `${dims[dims.length - 1 - d]},` + coord;\n      }\n      coords.push(coord);\n    }\n  }\n  return coords;\n}\nfunction getOutOfBoundsCondition(rank, shape, dims) {\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n  return cond;\n}\nfunction getSetup(rank, cols, rows, dims) {\n  if (rank === 1) {\n    return '';\n  }\n  const innerDims = dims.slice(-2);\n  return `\n    int r = ${innerDims[0]};\n    int c = ${innerDims[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${cols};\n    bool rEdge = rp1 >= ${rows};\n  `;\n}\nfunction getOutput(shape, dims) {\n  const rank = shape.length;\n  const sourceCoords = getSourceCoordsArr(rank, dims);\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n  return `getA(${sourceCoords[0]}),\n          cEdge ? 0. : getA(${sourceCoords[1]}),\n          rEdge ? 0. : getA(${sourceCoords[2]}),\n          rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n}","map":{"version":3,"sources":["../src/pack_gpu.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class PackProgram {\n    constructor(outputShape) {\n        this.variableNames = ['A'];\n        this.packedInputs = false;\n        this.packedOutput = true;\n        // Only input / output 3D tensors.\n        this.outputShape = outputShape;\n        const rank = outputShape.length;\n        if (rank === 0) {\n            this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n        }\n        else {\n            const channels = getChannels('rc', rank);\n            const dtype = getCoordsDataType(rank);\n            const outOfBoundsCondition = getOutOfBoundsCondition(rank, outputShape, channels);\n            const setup = getSetup(rank, outputShape[outputShape.length - 1], outputShape[outputShape.length - 2], channels);\n            const output = getOutput(outputShape, channels);\n            this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n        }\n    }\n}\nfunction getSourceCoordsArr(rank, dims) {\n    const coords = [];\n    for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n            let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n            for (let d = 2; d < rank; d++) {\n                coord = `${dims[dims.length - 1 - d]},` + coord;\n            }\n            coords.push(coord);\n        }\n    }\n    return coords;\n}\nfunction getOutOfBoundsCondition(rank, shape, dims) {\n    if (rank === 1) {\n        return `rc > ${shape[0]}`;\n    }\n    let cond = '';\n    for (let i = rank - 2; i < rank; i++) {\n        cond += `${dims[i]} >= ${shape[i]}`;\n        if (i < rank - 1) {\n            cond += '||';\n        }\n    }\n    return cond;\n}\nfunction getSetup(rank, cols, rows, dims) {\n    if (rank === 1) {\n        return '';\n    }\n    const innerDims = dims.slice(-2);\n    return `\n    int r = ${innerDims[0]};\n    int c = ${innerDims[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${cols};\n    bool rEdge = rp1 >= ${rows};\n  `;\n}\nfunction getOutput(shape, dims) {\n    const rank = shape.length;\n    const sourceCoords = getSourceCoordsArr(rank, dims);\n    if (rank === 1) {\n        return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n    }\n    return `getA(${sourceCoords[0]}),\n          cEdge ? 0. : getA(${sourceCoords[1]}),\n          rEdge ? 0. : getA(${sourceCoords[2]}),\n          rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n}\n//# sourceMappingURL=pack_gpu.js.map"]},"metadata":{},"sourceType":"module"}