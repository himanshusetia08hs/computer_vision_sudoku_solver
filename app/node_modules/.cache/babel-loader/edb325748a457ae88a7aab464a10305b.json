{"ast":null,"code":"import { deepMap } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nvar name = 'isPrime';\nvar dependencies = ['typed'];\nexport var createIsPrime = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Test whether a value is prime: has no divisors other than itself and one.\n   * The function supports type `number`, `bignumber`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isPrime(x)\n   *\n   * Examples:\n   *\n   *    math.isPrime(3)                     // returns true\n   *    math.isPrime(-2)                    // returns false\n   *    math.isPrime(0)                     // returns false\n   *    math.isPrime(-0)                    // returns false\n   *    math.isPrime(0.5)                   // returns false\n   *    math.isPrime('2')                   // returns true\n   *    math.isPrime([2, 17, 100])           // returns [true, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isZero, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x * 0 !== 0) {\n        return false;\n      }\n      if (x <= 3) {\n        return x > 1;\n      }\n      if (x % 2 === 0 || x % 3 === 0) {\n        return false;\n      }\n      for (var i = 5; i * i <= x; i += 6) {\n        if (x % i === 0 || x % (i + 2) === 0) {\n          return false;\n        }\n      }\n      return true;\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.toNumber() * 0 !== 0) {\n        return false;\n      }\n      if (n.lte(3)) return n.gt(1);\n      if (n.mod(2).eq(0) || n.mod(3).eq(0)) return false;\n      for (var i = 5; n.gte(i * i); i += 6) {\n        if (n.mod(i).eq(0) || n.mod(i + 2).eq(0)) {\n          return false;\n        }\n      }\n      return true;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"names":["deepMap","factory","name","dependencies","createIsPrime","_ref","typed","number","x","i","BigNumber","n","toNumber","lte","gt","mod","eq","gte","ArrayMatrix"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/Project/temp/app/node_modules/mathjs/es/function/utils/isPrime.js"],"sourcesContent":["import { deepMap } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nvar name = 'isPrime';\nvar dependencies = ['typed'];\nexport var createIsPrime = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed;\n\n  /**\n   * Test whether a value is prime: has no divisors other than itself and one.\n   * The function supports type `number`, `bignumber`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isPrime(x)\n   *\n   * Examples:\n   *\n   *    math.isPrime(3)                     // returns true\n   *    math.isPrime(-2)                    // returns false\n   *    math.isPrime(0)                     // returns false\n   *    math.isPrime(-0)                    // returns false\n   *    math.isPrime(0.5)                   // returns false\n   *    math.isPrime('2')                   // returns true\n   *    math.isPrime([2, 17, 100])           // returns [true, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isZero, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x * 0 !== 0) {\n        return false;\n      }\n\n      if (x <= 3) {\n        return x > 1;\n      }\n\n      if (x % 2 === 0 || x % 3 === 0) {\n        return false;\n      }\n\n      for (var i = 5; i * i <= x; i += 6) {\n        if (x % i === 0 || x % (i + 2) === 0) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.toNumber() * 0 !== 0) {\n        return false;\n      }\n\n      if (n.lte(3)) return n.gt(1);\n      if (n.mod(2).eq(0) || n.mod(3).eq(0)) return false;\n\n      for (var i = 5; n.gte(i * i); i += 6) {\n        if (n.mod(i).eq(0) || n.mod(i + 2).eq(0)) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,OAAO,QAAQ,qBAAqB;AAC7C,IAAIC,IAAI,GAAG,SAAS;AACpB,IAAIC,YAAY,GAAG,CAAC,OAAO,CAAC;AAC5B,OAAO,IAAIC,aAAa,GAAG,eAAeH,OAAO,CAACC,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EACpF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOA,KAAK,CAACJ,IAAI,EAAE;IACjBK,MAAM,EAAE,SAASA,MAAM,CAACC,CAAC,EAAE;MACzB,IAAIA,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;QACf,OAAO,KAAK;MACd;MAEA,IAAIA,CAAC,IAAI,CAAC,EAAE;QACV,OAAOA,CAAC,GAAG,CAAC;MACd;MAEA,IAAIA,CAAC,GAAG,CAAC,KAAK,CAAC,IAAIA,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;QAC9B,OAAO,KAAK;MACd;MAEA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGA,CAAC,IAAID,CAAC,EAAEC,CAAC,IAAI,CAAC,EAAE;QAClC,IAAID,CAAC,GAAGC,CAAC,KAAK,CAAC,IAAID,CAAC,IAAIC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;UACpC,OAAO,KAAK;QACd;MACF;MAEA,OAAO,IAAI;IACb,CAAC;IACDC,SAAS,EAAE,SAASA,SAAS,CAACC,CAAC,EAAE;MAC/B,IAAIA,CAAC,CAACC,QAAQ,EAAE,GAAG,CAAC,KAAK,CAAC,EAAE;QAC1B,OAAO,KAAK;MACd;MAEA,IAAID,CAAC,CAACE,GAAG,CAAC,CAAC,CAAC,EAAE,OAAOF,CAAC,CAACG,EAAE,CAAC,CAAC,CAAC;MAC5B,IAAIH,CAAC,CAACI,GAAG,CAAC,CAAC,CAAC,CAACC,EAAE,CAAC,CAAC,CAAC,IAAIL,CAAC,CAACI,GAAG,CAAC,CAAC,CAAC,CAACC,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,KAAK;MAElD,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEE,CAAC,CAACM,GAAG,CAACR,CAAC,GAAGA,CAAC,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;QACpC,IAAIE,CAAC,CAACI,GAAG,CAACN,CAAC,CAAC,CAACO,EAAE,CAAC,CAAC,CAAC,IAAIL,CAAC,CAACI,GAAG,CAACN,CAAC,GAAG,CAAC,CAAC,CAACO,EAAE,CAAC,CAAC,CAAC,EAAE;UACxC,OAAO,KAAK;QACd;MACF;MAEA,OAAO,IAAI;IACb,CAAC;IACD,gBAAgB,EAAE,SAASE,WAAW,CAACV,CAAC,EAAE;MACxC,OAAOR,OAAO,CAACQ,CAAC,EAAE,IAAI,CAAC;IACzB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module"}