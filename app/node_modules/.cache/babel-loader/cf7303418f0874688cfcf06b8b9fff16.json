{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { isInteger } from '../../utils/number';\nimport { arraySize as size } from '../../utils/array';\nimport { powNumber } from '../../plain/number';\nvar name = 'pow';\nvar dependencies = ['typed', 'config', 'identity', 'multiply', 'matrix', 'fraction', 'number', 'Complex'];\nexport var createPow = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    identity = _ref.identity,\n    multiply = _ref.multiply,\n    matrix = _ref.matrix,\n    number = _ref.number,\n    fraction = _ref.fraction,\n    Complex = _ref.Complex;\n\n  /**\n   * Calculates the power of x to y, `x ^ y`.\n   * Matrix exponentiation is supported for square matrices `x`, and positive\n   * integer exponents `y`.\n   *\n   * For cubic roots of negative numbers, the function returns the principal\n   * root by default. In order to let the function return the real root,\n   * math.js can be configured with `math.config({predictable: true})`.\n   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.\n   *\n   * Syntax:\n   *\n   *    math.pow(x, y)\n   *\n   * Examples:\n   *\n   *    math.pow(2, 3)               // returns number 8\n   *\n   *    const a = math.complex(2, 3)\n   *    math.pow(a, 2)                // returns Complex -5 + 12i\n   *\n   *    const b = [[1, 2], [4, 3]]\n   *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]\n   *\n   * See also:\n   *\n   *    multiply, sqrt, cbrt, nthRoot\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex} y                          The exponent\n   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`\n   */\n  return typed(name, {\n    'number, number': _pow,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.pow(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isInteger() || x >= 0 || config.predictable) {\n        return x.pow(y);\n      } else {\n        return new Complex(x.toNumber(), 0).pow(y.toNumber(), 0);\n      }\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      if (y.d !== 1) {\n        if (config.predictable) {\n          throw new Error('Function pow does not support non-integer exponents for fractions.');\n        } else {\n          return _pow(x.valueOf(), y.valueOf());\n        }\n      } else {\n        return x.pow(y);\n      }\n    },\n    'Array, number': _powArray,\n    'Array, BigNumber': function ArrayBigNumber(x, y) {\n      return _powArray(x, y.toNumber());\n    },\n    'Matrix, number': _powMatrix,\n    'Matrix, BigNumber': function MatrixBigNumber(x, y) {\n      return _powMatrix(x, y.toNumber());\n    },\n    'Unit, number | BigNumber': function UnitNumberBigNumber(x, y) {\n      return x.pow(y);\n    }\n  });\n  /**\n   * Calculates the power of x to y, x^y, for two numbers.\n   * @param {number} x\n   * @param {number} y\n   * @return {number | Complex} res\n   * @private\n   */\n\n  function _pow(x, y) {\n    // Alternatively could define a 'realmode' config option or something, but\n    // 'predictable' will work for now\n    if (config.predictable && !isInteger(y) && x < 0) {\n      // Check to see if y can be represented as a fraction\n      try {\n        var yFrac = fraction(y);\n        var yNum = number(yFrac);\n        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {\n          if (yFrac.d % 2 === 1) {\n            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);\n          }\n        }\n      } catch (ex) {// fraction() throws an error if y is Infinity, etc.\n      } // Unable to express y as a fraction, so continue on\n    } // **for predictable mode** x^Infinity === NaN if x < -1\n    // N.B. this behavour is different from `Math.pow` which gives\n    // (-2)^Infinity === Infinity\n\n    if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {\n      return NaN;\n    }\n    if (isInteger(y) || x >= 0 || config.predictable) {\n      return powNumber(x, y);\n    } else {\n      // TODO: the following infinity checks are duplicated from powNumber. Deduplicate this somehow\n      // x^Infinity === 0 if -1 < x < 1\n      // A real number 0 is returned instead of complex(0)\n      if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\n        return 0;\n      }\n      return new Complex(x, 0).pow(y, 0);\n    }\n  }\n  /**\n   * Calculate the power of a 2d array\n   * @param {Array} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Array}\n   * @private\n   */\n\n  function _powArray(x, y) {\n    if (!isInteger(y) || y < 0) {\n      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');\n    } // verify that A is a 2 dimensional square matrix\n\n    var s = size(x);\n    if (s.length !== 2) {\n      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');\n    }\n    if (s[0] !== s[1]) {\n      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');\n    }\n    var res = identity(s[0]).valueOf();\n    var px = x;\n    while (y >= 1) {\n      if ((y & 1) === 1) {\n        res = multiply(px, res);\n      }\n      y >>= 1;\n      px = multiply(px, px);\n    }\n    return res;\n  }\n  /**\n   * Calculate the power of a 2d matrix\n   * @param {Matrix} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Matrix}\n   * @private\n   */\n\n  function _powMatrix(x, y) {\n    return matrix(_powArray(x.valueOf(), y));\n  }\n});","map":{"version":3,"names":["factory","isInteger","arraySize","size","powNumber","name","dependencies","createPow","_ref","typed","config","identity","multiply","matrix","number","fraction","Complex","_pow","ComplexComplex","x","y","pow","BigNumberBigNumber","predictable","toNumber","FractionFraction","d","Error","valueOf","_powArray","ArrayBigNumber","_powMatrix","MatrixBigNumber","UnitNumberBigNumber","yFrac","yNum","Math","abs","n","ex","Infinity","NaN","TypeError","s","length","res","px"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/P/temp/app/node_modules/mathjs/es/function/arithmetic/pow.js"],"sourcesContent":["import { factory } from '../../utils/factory';\nimport { isInteger } from '../../utils/number';\nimport { arraySize as size } from '../../utils/array';\nimport { powNumber } from '../../plain/number';\nvar name = 'pow';\nvar dependencies = ['typed', 'config', 'identity', 'multiply', 'matrix', 'fraction', 'number', 'Complex'];\nexport var createPow = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      identity = _ref.identity,\n      multiply = _ref.multiply,\n      matrix = _ref.matrix,\n      number = _ref.number,\n      fraction = _ref.fraction,\n      Complex = _ref.Complex;\n\n  /**\n   * Calculates the power of x to y, `x ^ y`.\n   * Matrix exponentiation is supported for square matrices `x`, and positive\n   * integer exponents `y`.\n   *\n   * For cubic roots of negative numbers, the function returns the principal\n   * root by default. In order to let the function return the real root,\n   * math.js can be configured with `math.config({predictable: true})`.\n   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.\n   *\n   * Syntax:\n   *\n   *    math.pow(x, y)\n   *\n   * Examples:\n   *\n   *    math.pow(2, 3)               // returns number 8\n   *\n   *    const a = math.complex(2, 3)\n   *    math.pow(a, 2)                // returns Complex -5 + 12i\n   *\n   *    const b = [[1, 2], [4, 3]]\n   *    math.pow(b, 2)               // returns Array [[9, 8], [16, 17]]\n   *\n   * See also:\n   *\n   *    multiply, sqrt, cbrt, nthRoot\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex} y                          The exponent\n   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`\n   */\n  return typed(name, {\n    'number, number': _pow,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.pow(y);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      if (y.isInteger() || x >= 0 || config.predictable) {\n        return x.pow(y);\n      } else {\n        return new Complex(x.toNumber(), 0).pow(y.toNumber(), 0);\n      }\n    },\n    'Fraction, Fraction': function FractionFraction(x, y) {\n      if (y.d !== 1) {\n        if (config.predictable) {\n          throw new Error('Function pow does not support non-integer exponents for fractions.');\n        } else {\n          return _pow(x.valueOf(), y.valueOf());\n        }\n      } else {\n        return x.pow(y);\n      }\n    },\n    'Array, number': _powArray,\n    'Array, BigNumber': function ArrayBigNumber(x, y) {\n      return _powArray(x, y.toNumber());\n    },\n    'Matrix, number': _powMatrix,\n    'Matrix, BigNumber': function MatrixBigNumber(x, y) {\n      return _powMatrix(x, y.toNumber());\n    },\n    'Unit, number | BigNumber': function UnitNumberBigNumber(x, y) {\n      return x.pow(y);\n    }\n  });\n  /**\n   * Calculates the power of x to y, x^y, for two numbers.\n   * @param {number} x\n   * @param {number} y\n   * @return {number | Complex} res\n   * @private\n   */\n\n  function _pow(x, y) {\n    // Alternatively could define a 'realmode' config option or something, but\n    // 'predictable' will work for now\n    if (config.predictable && !isInteger(y) && x < 0) {\n      // Check to see if y can be represented as a fraction\n      try {\n        var yFrac = fraction(y);\n        var yNum = number(yFrac);\n\n        if (y === yNum || Math.abs((y - yNum) / y) < 1e-14) {\n          if (yFrac.d % 2 === 1) {\n            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);\n          }\n        }\n      } catch (ex) {// fraction() throws an error if y is Infinity, etc.\n      } // Unable to express y as a fraction, so continue on\n\n    } // **for predictable mode** x^Infinity === NaN if x < -1\n    // N.B. this behavour is different from `Math.pow` which gives\n    // (-2)^Infinity === Infinity\n\n\n    if (config.predictable && (x < -1 && y === Infinity || x > -1 && x < 0 && y === -Infinity)) {\n      return NaN;\n    }\n\n    if (isInteger(y) || x >= 0 || config.predictable) {\n      return powNumber(x, y);\n    } else {\n      // TODO: the following infinity checks are duplicated from powNumber. Deduplicate this somehow\n      // x^Infinity === 0 if -1 < x < 1\n      // A real number 0 is returned instead of complex(0)\n      if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\n        return 0;\n      }\n\n      return new Complex(x, 0).pow(y, 0);\n    }\n  }\n  /**\n   * Calculate the power of a 2d array\n   * @param {Array} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Array}\n   * @private\n   */\n\n\n  function _powArray(x, y) {\n    if (!isInteger(y) || y < 0) {\n      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');\n    } // verify that A is a 2 dimensional square matrix\n\n\n    var s = size(x);\n\n    if (s.length !== 2) {\n      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');\n    }\n\n    if (s[0] !== s[1]) {\n      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');\n    }\n\n    var res = identity(s[0]).valueOf();\n    var px = x;\n\n    while (y >= 1) {\n      if ((y & 1) === 1) {\n        res = multiply(px, res);\n      }\n\n      y >>= 1;\n      px = multiply(px, px);\n    }\n\n    return res;\n  }\n  /**\n   * Calculate the power of a 2d matrix\n   * @param {Matrix} x     must be a 2 dimensional, square matrix\n   * @param {number} y    a positive, integer value\n   * @returns {Matrix}\n   * @private\n   */\n\n\n  function _powMatrix(x, y) {\n    return matrix(_powArray(x.valueOf(), y));\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}