{"ast":null,"code":"/**\n * Contains global resources of a model.\n */\nexport class ResourceManager {\n  constructor() {\n    let hashTableNameToHandle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let hashTableMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.hashTableNameToHandle = hashTableNameToHandle;\n    this.hashTableMap = hashTableMap;\n  }\n  /**\n   * Register a `HashTable` in the resource manager.\n   *\n   * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n   * where id is the table handle tensor's id.\n   *\n   * @param name Op node name that creates the `HashTable`.\n   * @param hashTable The `HashTable` to be added to resource manager.\n   */\n  addHashTable(name, hashTable) {\n    this.hashTableNameToHandle[name] = hashTable.handle;\n    this.hashTableMap[hashTable.id] = hashTable;\n  }\n  /**\n   * Get the table handle by node name.\n   * @param name Op node name that creates the `HashTable`. This name is also\n   *     used in the inputs list of lookup and import `HashTable` ops.\n   */\n  getHashTableHandleByName(name) {\n    return this.hashTableNameToHandle[name];\n  }\n  /**\n   * Get the actual `HashTable` by its handle tensor's id.\n   * @param id The id of the handle tensor.\n   */\n  getHashTableById(id) {\n    return this.hashTableMap[id];\n  }\n  /**\n   * Dispose `ResourceManager`, including its hashTables and tensors in them.\n   */\n  dispose() {\n    for (const key in this.hashTableMap) {\n      this.hashTableMap[key].clearAndClose();\n      delete this.hashTableMap[key];\n    }\n    for (const name in this.hashTableNameToHandle) {\n      this.hashTableNameToHandle[name].dispose();\n      delete this.hashTableNameToHandle[name];\n    }\n  }\n}","map":{"version":3,"sources":["../../src/executor/resource_manager.ts"],"names":[],"mappings":"AAmBA;;AAEG;AACH,OAAM,MAAO,eAAe,CAAA;EAC1B,WAAA,GAE4C;IAAA,IAD/B,qBAAA,uEAAwC,CAAA,CAAE;IAAA,IAC1C,YAAA,uEAA6B,CAAA,CAAE;IAD/B,IAAA,CAAA,qBAAqB,GAArB,qBAAqB;IACrB,IAAA,CAAA,YAAY,GAAZ,YAAY;EAAsB;EAE/C;;;;;;;;AAQG;EACH,YAAY,CAAC,IAAY,EAAE,SAAoB,EAAA;IAC7C,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM;IACnD,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE,CAAC,GAAG,SAAS;EAC7C;EAEA;;;;AAIG;EACH,wBAAwB,CAAC,IAAY,EAAA;IACnC,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC;EACzC;EAEA;;;AAGG;EACH,gBAAgB,CAAC,EAAU,EAAA;IACzB,OAAO,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC;EAC9B;EAEA;;AAEG;EACH,OAAO,GAAA;IACL,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,YAAY,EAAE;MACnC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE;MACtC,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC;IAC9B;IAED,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,qBAAqB,EAAE;MAC7C,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE;MAC1C,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC;IACxC;EACH;AACD","sourceRoot":"","sourcesContent":["/**\n * Contains global resources of a model.\n */\nexport class ResourceManager {\n    constructor(hashTableNameToHandle = {}, hashTableMap = {}) {\n        this.hashTableNameToHandle = hashTableNameToHandle;\n        this.hashTableMap = hashTableMap;\n    }\n    /**\n     * Register a `HashTable` in the resource manager.\n     *\n     * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n     * where id is the table handle tensor's id.\n     *\n     * @param name Op node name that creates the `HashTable`.\n     * @param hashTable The `HashTable` to be added to resource manager.\n     */\n    addHashTable(name, hashTable) {\n        this.hashTableNameToHandle[name] = hashTable.handle;\n        this.hashTableMap[hashTable.id] = hashTable;\n    }\n    /**\n     * Get the table handle by node name.\n     * @param name Op node name that creates the `HashTable`. This name is also\n     *     used in the inputs list of lookup and import `HashTable` ops.\n     */\n    getHashTableHandleByName(name) {\n        return this.hashTableNameToHandle[name];\n    }\n    /**\n     * Get the actual `HashTable` by its handle tensor's id.\n     * @param id The id of the handle tensor.\n     */\n    getHashTableById(id) {\n        return this.hashTableMap[id];\n    }\n    /**\n     * Dispose `ResourceManager`, including its hashTables and tensors in them.\n     */\n    dispose() {\n        for (const key in this.hashTableMap) {\n            this.hashTableMap[key].clearAndClose();\n            delete this.hashTableMap[key];\n        }\n        for (const name in this.hashTableNameToHandle) {\n            this.hashTableNameToHandle[name].dispose();\n            delete this.hashTableNameToHandle[name];\n        }\n    }\n}\n//# sourceMappingURL=resource_manager.js.map"]},"metadata":{},"sourceType":"module"}