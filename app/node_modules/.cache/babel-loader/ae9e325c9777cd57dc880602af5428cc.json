{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as seedrandom from 'seedrandom';\nimport { expectNumbersClose, testEpsilon } from '../test_util';\n// https://en.wikipedia.org/wiki/Marsaglia_polar_method\nexport class MPRandGauss {\n  constructor(mean, stdDeviation, dtype, truncated, seed) {\n    this.mean = mean;\n    this.stdDev = stdDeviation;\n    this.dtype = dtype;\n    this.nextVal = NaN;\n    this.truncated = truncated;\n    if (this.truncated) {\n      this.upper = this.mean + this.stdDev * 2;\n      this.lower = this.mean - this.stdDev * 2;\n    }\n    const seedValue = seed ? seed : Math.random();\n    this.random = seedrandom.alea(seedValue.toString());\n  }\n  /** Returns next sample from a Gaussian distribution. */\n  nextValue() {\n    if (!isNaN(this.nextVal)) {\n      const value = this.nextVal;\n      this.nextVal = NaN;\n      return value;\n    }\n    let resultX, resultY;\n    let isValid = false;\n    while (!isValid) {\n      let v1, v2, s;\n      do {\n        v1 = 2 * this.random() - 1;\n        v2 = 2 * this.random() - 1;\n        s = v1 * v1 + v2 * v2;\n      } while (s >= 1 || s === 0);\n      const mul = Math.sqrt(-2.0 * Math.log(s) / s);\n      resultX = this.mean + this.stdDev * v1 * mul;\n      resultY = this.mean + this.stdDev * v2 * mul;\n      if (!this.truncated || this.isValidTruncated(resultX)) {\n        isValid = true;\n      }\n    }\n    if (!this.truncated || this.isValidTruncated(resultY)) {\n      this.nextVal = this.convertValue(resultY);\n    }\n    return this.convertValue(resultX);\n  }\n  /** Handles proper rounding for non-floating-point numbers. */\n  convertValue(value) {\n    if (this.dtype == null || this.dtype === 'float32') {\n      return value;\n    }\n    return Math.round(value);\n  }\n  /** Returns true if less than 2-standard-deviations from the mean. */\n  isValidTruncated(value) {\n    return value <= this.upper && value >= this.lower;\n  }\n}\n// Marsaglia, George, and Wai Wan Tsang. 2000. \"A Simple Method for Generating\n// Gamma Variables.\"\nexport class RandGamma {\n  constructor(alpha, beta, dtype, seed) {\n    this.alpha = alpha;\n    this.beta = 1 / beta; // convert rate to scale parameter\n    this.dtype = dtype;\n    const seedValue = seed ? seed : Math.random();\n    this.randu = seedrandom.alea(seedValue.toString());\n    this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());\n    if (alpha < 1) {\n      this.d = alpha + 2 / 3;\n    } else {\n      this.d = alpha - 1 / 3;\n    }\n    this.c = 1 / Math.sqrt(9 * this.d);\n  }\n  /** Returns next sample from a gamma distribution. */\n  nextValue() {\n    let x2, v0, v1, x, u, v;\n    while (true) {\n      do {\n        x = this.randn.nextValue();\n        v = 1 + this.c * x;\n      } while (v <= 0);\n      v *= v * v;\n      x2 = x * x;\n      v0 = 1 - 0.331 * x2 * x2;\n      v1 = 0.5 * x2 + this.d * (1 - v + Math.log(v));\n      u = this.randu();\n      if (u < v0 || Math.log(u) < v1) {\n        break;\n      }\n    }\n    v = 1 / this.beta * this.d * v;\n    if (this.alpha < 1) {\n      v *= Math.pow(this.randu(), 1 / this.alpha);\n    }\n    return this.convertValue(v);\n  }\n  /** Handles proper rounding for non-floating-point numbers. */\n  convertValue(value) {\n    if (this.dtype === 'float32') {\n      return value;\n    }\n    return Math.round(value);\n  }\n}\nexport class UniformRandom {\n  constructor() {\n    let min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let dtype = arguments.length > 2 ? arguments[2] : undefined;\n    let seed = arguments.length > 3 ? arguments[3] : undefined;\n    /** Handles proper rounding for non floating point numbers. */\n    this.canReturnFloat = () => this.dtype == null || this.dtype === 'float32';\n    this.min = min;\n    this.range = max - min;\n    this.dtype = dtype;\n    if (seed == null) {\n      seed = Math.random();\n    }\n    if (typeof seed === 'number') {\n      seed = seed.toString();\n    }\n    if (!this.canReturnFloat() && this.range <= 1) {\n      throw new Error(`The difference between ${min} - ${max} <= 1 and dtype is not float`);\n    }\n    this.random = seedrandom.alea(seed);\n  }\n  convertValue(value) {\n    if (this.canReturnFloat()) {\n      return value;\n    }\n    return Math.round(value);\n  }\n  nextValue() {\n    return this.convertValue(this.min + this.range * this.random());\n  }\n}\nexport function jarqueBeraNormalityTest(values) {\n  // https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test\n  const n = values.length;\n  const s = skewness(values);\n  const k = kurtosis(values);\n  const jb = n / 6 * (Math.pow(s, 2) + 0.25 * Math.pow(k - 3, 2));\n  // JB test requires 2-degress of freedom from Chi-Square @ 0.95:\n  // http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm\n  const CHI_SQUARE_2DEG = 5.991;\n  if (jb > CHI_SQUARE_2DEG) {\n    throw new Error(`Invalid p-value for JB: ${jb}`);\n  }\n}\nexport function expectArrayInMeanStdRange(actual, expectedMean, expectedStdDev, epsilon) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  const actualMean = mean(actual);\n  expectNumbersClose(actualMean, expectedMean, epsilon);\n  expectNumbersClose(standardDeviation(actual, actualMean), expectedStdDev, epsilon);\n}\nfunction mean(values) {\n  let sum = 0;\n  for (let i = 0; i < values.length; i++) {\n    sum += values[i];\n  }\n  return sum / values.length;\n}\nfunction standardDeviation(values, mean) {\n  let squareDiffSum = 0;\n  for (let i = 0; i < values.length; i++) {\n    const diff = values[i] - mean;\n    squareDiffSum += diff * diff;\n  }\n  return Math.sqrt(squareDiffSum / values.length);\n}\nfunction kurtosis(values) {\n  // https://en.wikipedia.org/wiki/Kurtosis\n  const valuesMean = mean(values);\n  const n = values.length;\n  let sum2 = 0;\n  let sum4 = 0;\n  for (let i = 0; i < n; i++) {\n    const v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum4 += Math.pow(v, 4);\n  }\n  return 1 / n * sum4 / Math.pow(1 / n * sum2, 2);\n}\nfunction skewness(values) {\n  // https://en.wikipedia.org/wiki/Skewness\n  const valuesMean = mean(values);\n  const n = values.length;\n  let sum2 = 0;\n  let sum3 = 0;\n  for (let i = 0; i < n; i++) {\n    const v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum3 += Math.pow(v, 3);\n  }\n  return 1 / n * sum3 / Math.pow(1 / (n - 1) * sum2, 3 / 2);\n}","map":{"version":3,"sources":["../../src/ops/rand_util.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as seedrandom from 'seedrandom';\nimport { expectNumbersClose, testEpsilon } from '../test_util';\n// https://en.wikipedia.org/wiki/Marsaglia_polar_method\nexport class MPRandGauss {\n    constructor(mean, stdDeviation, dtype, truncated, seed) {\n        this.mean = mean;\n        this.stdDev = stdDeviation;\n        this.dtype = dtype;\n        this.nextVal = NaN;\n        this.truncated = truncated;\n        if (this.truncated) {\n            this.upper = this.mean + this.stdDev * 2;\n            this.lower = this.mean - this.stdDev * 2;\n        }\n        const seedValue = seed ? seed : Math.random();\n        this.random = seedrandom.alea(seedValue.toString());\n    }\n    /** Returns next sample from a Gaussian distribution. */\n    nextValue() {\n        if (!isNaN(this.nextVal)) {\n            const value = this.nextVal;\n            this.nextVal = NaN;\n            return value;\n        }\n        let resultX, resultY;\n        let isValid = false;\n        while (!isValid) {\n            let v1, v2, s;\n            do {\n                v1 = 2 * this.random() - 1;\n                v2 = 2 * this.random() - 1;\n                s = v1 * v1 + v2 * v2;\n            } while (s >= 1 || s === 0);\n            const mul = Math.sqrt(-2.0 * Math.log(s) / s);\n            resultX = this.mean + this.stdDev * v1 * mul;\n            resultY = this.mean + this.stdDev * v2 * mul;\n            if (!this.truncated || this.isValidTruncated(resultX)) {\n                isValid = true;\n            }\n        }\n        if (!this.truncated || this.isValidTruncated(resultY)) {\n            this.nextVal = this.convertValue(resultY);\n        }\n        return this.convertValue(resultX);\n    }\n    /** Handles proper rounding for non-floating-point numbers. */\n    convertValue(value) {\n        if (this.dtype == null || this.dtype === 'float32') {\n            return value;\n        }\n        return Math.round(value);\n    }\n    /** Returns true if less than 2-standard-deviations from the mean. */\n    isValidTruncated(value) {\n        return value <= this.upper && value >= this.lower;\n    }\n}\n// Marsaglia, George, and Wai Wan Tsang. 2000. \"A Simple Method for Generating\n// Gamma Variables.\"\nexport class RandGamma {\n    constructor(alpha, beta, dtype, seed) {\n        this.alpha = alpha;\n        this.beta = 1 / beta; // convert rate to scale parameter\n        this.dtype = dtype;\n        const seedValue = seed ? seed : Math.random();\n        this.randu = seedrandom.alea(seedValue.toString());\n        this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());\n        if (alpha < 1) {\n            this.d = alpha + (2 / 3);\n        }\n        else {\n            this.d = alpha - (1 / 3);\n        }\n        this.c = 1 / Math.sqrt(9 * this.d);\n    }\n    /** Returns next sample from a gamma distribution. */\n    nextValue() {\n        let x2, v0, v1, x, u, v;\n        while (true) {\n            do {\n                x = this.randn.nextValue();\n                v = 1 + (this.c * x);\n            } while (v <= 0);\n            v *= v * v;\n            x2 = x * x;\n            v0 = 1 - (0.331 * x2 * x2);\n            v1 = (0.5 * x2) + (this.d * (1 - v + Math.log(v)));\n            u = this.randu();\n            if (u < v0 || Math.log(u) < v1) {\n                break;\n            }\n        }\n        v = (1 / this.beta) * this.d * v;\n        if (this.alpha < 1) {\n            v *= Math.pow(this.randu(), 1 / this.alpha);\n        }\n        return this.convertValue(v);\n    }\n    /** Handles proper rounding for non-floating-point numbers. */\n    convertValue(value) {\n        if (this.dtype === 'float32') {\n            return value;\n        }\n        return Math.round(value);\n    }\n}\nexport class UniformRandom {\n    constructor(min = 0, max = 1, dtype, seed) {\n        /** Handles proper rounding for non floating point numbers. */\n        this.canReturnFloat = () => (this.dtype == null || this.dtype === 'float32');\n        this.min = min;\n        this.range = max - min;\n        this.dtype = dtype;\n        if (seed == null) {\n            seed = Math.random();\n        }\n        if (typeof seed === 'number') {\n            seed = seed.toString();\n        }\n        if (!this.canReturnFloat() && this.range <= 1) {\n            throw new Error(`The difference between ${min} - ${max} <= 1 and dtype is not float`);\n        }\n        this.random = seedrandom.alea(seed);\n    }\n    convertValue(value) {\n        if (this.canReturnFloat()) {\n            return value;\n        }\n        return Math.round(value);\n    }\n    nextValue() {\n        return this.convertValue(this.min + this.range * this.random());\n    }\n}\nexport function jarqueBeraNormalityTest(values) {\n    // https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test\n    const n = values.length;\n    const s = skewness(values);\n    const k = kurtosis(values);\n    const jb = n / 6 * (Math.pow(s, 2) + 0.25 * Math.pow(k - 3, 2));\n    // JB test requires 2-degress of freedom from Chi-Square @ 0.95:\n    // http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm\n    const CHI_SQUARE_2DEG = 5.991;\n    if (jb > CHI_SQUARE_2DEG) {\n        throw new Error(`Invalid p-value for JB: ${jb}`);\n    }\n}\nexport function expectArrayInMeanStdRange(actual, expectedMean, expectedStdDev, epsilon) {\n    if (epsilon == null) {\n        epsilon = testEpsilon();\n    }\n    const actualMean = mean(actual);\n    expectNumbersClose(actualMean, expectedMean, epsilon);\n    expectNumbersClose(standardDeviation(actual, actualMean), expectedStdDev, epsilon);\n}\nfunction mean(values) {\n    let sum = 0;\n    for (let i = 0; i < values.length; i++) {\n        sum += values[i];\n    }\n    return sum / values.length;\n}\nfunction standardDeviation(values, mean) {\n    let squareDiffSum = 0;\n    for (let i = 0; i < values.length; i++) {\n        const diff = values[i] - mean;\n        squareDiffSum += diff * diff;\n    }\n    return Math.sqrt(squareDiffSum / values.length);\n}\nfunction kurtosis(values) {\n    // https://en.wikipedia.org/wiki/Kurtosis\n    const valuesMean = mean(values);\n    const n = values.length;\n    let sum2 = 0;\n    let sum4 = 0;\n    for (let i = 0; i < n; i++) {\n        const v = values[i] - valuesMean;\n        sum2 += Math.pow(v, 2);\n        sum4 += Math.pow(v, 4);\n    }\n    return (1 / n) * sum4 / Math.pow((1 / n) * sum2, 2);\n}\nfunction skewness(values) {\n    // https://en.wikipedia.org/wiki/Skewness\n    const valuesMean = mean(values);\n    const n = values.length;\n    let sum2 = 0;\n    let sum3 = 0;\n    for (let i = 0; i < n; i++) {\n        const v = values[i] - valuesMean;\n        sum2 += Math.pow(v, 2);\n        sum3 += Math.pow(v, 3);\n    }\n    return (1 / n) * sum3 / Math.pow((1 / (n - 1)) * sum2, 3 / 2);\n}\n//# sourceMappingURL=rand_util.js.map"]},"metadata":{},"sourceType":"module"}