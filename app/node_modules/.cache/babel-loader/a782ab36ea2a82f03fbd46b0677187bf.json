{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { log10Number } from '../../plain/number';\nvar name = 'log10';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createLog10 = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    config = _ref.config,\n    _Complex = _ref.Complex;\n\n  /**\n   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log10(x)\n   *\n   * Examples:\n   *\n   *    math.log10(0.00001)            // returns -5\n   *    math.log10(10000)              // returns 4\n   *    math.log(10000) / math.log(10) // returns 4\n   *    math.pow(10, 4)                // returns 10000\n   *\n   * See also:\n   *\n   *    exp, log, log1p, log2\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the 10-base logarithm of `x`\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return log10Number(x);\n      } else {\n        // negative value -> complex value computation\n        return new _Complex(x, 0).log().div(Math.LN10);\n      }\n    },\n    Complex: function Complex(x) {\n      return new _Complex(x).log().div(Math.LN10);\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.log();\n      } else {\n        // downgrade to number, return Complex valued result\n        return new _Complex(x.toNumber(), 0).log().div(Math.LN10);\n      }\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});","map":{"version":3,"names":["factory","deepMap","log10Number","name","dependencies","createLog10","_ref","typed","config","_Complex","Complex","number","x","predictable","log","div","Math","LN10","BigNumber","isNegative","toNumber","ArrayMatrix"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/Project/temp/app/node_modules/mathjs/es/function/arithmetic/log10.js"],"sourcesContent":["import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { log10Number } from '../../plain/number';\nvar name = 'log10';\nvar dependencies = ['typed', 'config', 'Complex'];\nexport var createLog10 = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      _Complex = _ref.Complex;\n\n  /**\n   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log10(x)\n   *\n   * Examples:\n   *\n   *    math.log10(0.00001)            // returns -5\n   *    math.log10(10000)              // returns 4\n   *    math.log(10000) / math.log(10) // returns 4\n   *    math.pow(10, 4)                // returns 10000\n   *\n   * See also:\n   *\n   *    exp, log, log1p, log2\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the 10-base logarithm of `x`\n   */\n  return typed(name, {\n    number: function number(x) {\n      if (x >= 0 || config.predictable) {\n        return log10Number(x);\n      } else {\n        // negative value -> complex value computation\n        return new _Complex(x, 0).log().div(Math.LN10);\n      }\n    },\n    Complex: function Complex(x) {\n      return new _Complex(x).log().div(Math.LN10);\n    },\n    BigNumber: function BigNumber(x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.log();\n      } else {\n        // downgrade to number, return Complex valued result\n        return new _Complex(x.toNumber(), 0).log().div(Math.LN10);\n      }\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      return deepMap(x, this);\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,WAAW,QAAQ,oBAAoB;AAChD,IAAIC,IAAI,GAAG,OAAO;AAClB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,CAAC;AACjD,OAAO,IAAIC,WAAW,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAClF,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,MAAM,GAAGF,IAAI,CAACE,MAAM;IACpBC,QAAQ,GAAGH,IAAI,CAACI,OAAO;;EAE3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOH,KAAK,CAACJ,IAAI,EAAE;IACjBQ,MAAM,EAAE,SAASA,MAAM,CAACC,CAAC,EAAE;MACzB,IAAIA,CAAC,IAAI,CAAC,IAAIJ,MAAM,CAACK,WAAW,EAAE;QAChC,OAAOX,WAAW,CAACU,CAAC,CAAC;MACvB,CAAC,MAAM;QACL;QACA,OAAO,IAAIH,QAAQ,CAACG,CAAC,EAAE,CAAC,CAAC,CAACE,GAAG,EAAE,CAACC,GAAG,CAACC,IAAI,CAACC,IAAI,CAAC;MAChD;IACF,CAAC;IACDP,OAAO,EAAE,SAASA,OAAO,CAACE,CAAC,EAAE;MAC3B,OAAO,IAAIH,QAAQ,CAACG,CAAC,CAAC,CAACE,GAAG,EAAE,CAACC,GAAG,CAACC,IAAI,CAACC,IAAI,CAAC;IAC7C,CAAC;IACDC,SAAS,EAAE,SAASA,SAAS,CAACN,CAAC,EAAE;MAC/B,IAAI,CAACA,CAAC,CAACO,UAAU,EAAE,IAAIX,MAAM,CAACK,WAAW,EAAE;QACzC,OAAOD,CAAC,CAACE,GAAG,EAAE;MAChB,CAAC,MAAM;QACL;QACA,OAAO,IAAIL,QAAQ,CAACG,CAAC,CAACQ,QAAQ,EAAE,EAAE,CAAC,CAAC,CAACN,GAAG,EAAE,CAACC,GAAG,CAACC,IAAI,CAACC,IAAI,CAAC;MAC3D;IACF,CAAC;IACD,gBAAgB,EAAE,SAASI,WAAW,CAACT,CAAC,EAAE;MACxC,OAAOX,OAAO,CAACW,CAAC,EAAE,IAAI,CAAC;IACzB;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module"}