{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { add } from '../kernels/Add';\nimport { complex } from '../kernels/Complex';\nimport { concat } from '../kernels/Concat';\nimport { identity } from '../kernels/Identity';\nimport { imag } from '../kernels/Imag';\nimport { multiply } from '../kernels/Multiply';\nimport { real } from '../kernels/Real';\nimport { realDivConfig } from '../kernels/RealDiv';\nimport { slice } from '../kernels/Slice';\nimport { sub } from '../kernels/Sub';\n/**\n * Calculate FFT of inner most elements of batch tensor.\n */\nexport function fftBatch(input, inverse, cpuBackend) {\n  const inputShape = input.shape;\n  const batch = inputShape[0];\n  const innerDim = inputShape[1];\n  const inputVals = cpuBackend.data.get(input.dataId);\n  const real2D = inputVals.complexTensorInfos.real;\n  const imag2D = inputVals.complexTensorInfos.imag;\n  // Collects real and imaginary values separately.\n  const resultShape = [batch, innerDim];\n  const resultSize = util.sizeFromShape(resultShape);\n  const resultReal = util.getTypedArrayFromDType('float32', resultSize);\n  const resultImag = util.getTypedArrayFromDType('float32', resultSize);\n  for (let b = 0; b < batch; b++) {\n    // TODO: Support slice ops for complex type.\n    const r = slice({\n      inputs: {\n        x: real2D\n      },\n      backend: cpuBackend,\n      attrs: {\n        begin: [b, 0],\n        size: [1, innerDim]\n      }\n    });\n    const i = slice({\n      inputs: {\n        x: imag2D\n      },\n      backend: cpuBackend,\n      attrs: {\n        begin: [b, 0],\n        size: [1, innerDim]\n      }\n    });\n    const input = complex({\n      inputs: {\n        real: r,\n        imag: i\n      },\n      backend: cpuBackend\n    });\n    // Run FFT by batch element.\n    const {\n      real,\n      imag\n    } = fftImpl(input, inverse, cpuBackend);\n    const res = backend_util.mergeRealAndImagArrays(real, imag);\n    for (let d = 0; d < innerDim; d++) {\n      const c = backend_util.getComplexWithIndex(res, d);\n      resultReal[b * innerDim + d] = c.real;\n      resultImag[b * innerDim + d] = c.imag;\n    }\n    cpuBackend.disposeIntermediateTensorInfo(r);\n    cpuBackend.disposeIntermediateTensorInfo(i);\n    cpuBackend.disposeIntermediateTensorInfo(input);\n  }\n  const $realInfo = cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);\n  const $imagInfo = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);\n  const result = complex({\n    inputs: {\n      real: $realInfo,\n      imag: $imagInfo\n    },\n    backend: cpuBackend\n  });\n  cpuBackend.disposeIntermediateTensorInfo($realInfo);\n  cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n  return result;\n}\nexport function fftImpl(input, inverse, cpuBackend) {\n  const inputSize = util.sizeFromShape(input.shape);\n  const inputVals = cpuBackend.data.get(input.dataId);\n  const realVals = cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values;\n  const imagVals = cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values;\n  if (isExponentOf2(inputSize)) {\n    const result = fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n    const resultShape = [input.shape[0], input.shape[1]];\n    if (inverse) {\n      const realInfo = cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);\n      const imagInfo = cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);\n      const sizeInfo = cpuBackend.makeTensorInfo([], 'float32', util.createScalarValue(inputSize, 'float32'));\n      const sizeInfoCopy = identity({\n        inputs: {\n          x: sizeInfo\n        },\n        backend: cpuBackend\n      });\n      const divRealInfo = realDivConfig.kernelFunc({\n        inputs: {\n          a: realInfo,\n          b: sizeInfo\n        },\n        backend: cpuBackend\n      });\n      const divImagInfo = realDivConfig.kernelFunc({\n        inputs: {\n          a: imagInfo,\n          b: sizeInfoCopy\n        },\n        backend: cpuBackend\n      });\n      const divRealVals = cpuBackend.data.get(divRealInfo.dataId).values;\n      const divImagVals = cpuBackend.data.get(divImagInfo.dataId).values;\n      cpuBackend.disposeIntermediateTensorInfo(realInfo);\n      cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n      return {\n        real: divRealVals,\n        imag: divImagVals\n      };\n    }\n    return result;\n  } else {\n    const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n    const rawOutput = fourierTransformByMatmul(data, inputSize, inverse);\n    return backend_util.splitRealAndImagArrays(rawOutput);\n  }\n}\nfunction isExponentOf2(size) {\n  return (size & size - 1) === 0;\n}\n// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\nfunction fftRadix2(realVals, imagVals, size, inverse, cpuBackend) {\n  if (size === 1) {\n    return {\n      real: realVals,\n      imag: imagVals\n    };\n  }\n  const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n  const half = size / 2;\n  const evenComplex = backend_util.complexWithEvenIndex(data);\n  const evenRealVals = evenComplex.real;\n  const evenImagVals = evenComplex.imag;\n  const evenShape = [evenRealVals.length];\n  const evenRealInfo = cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);\n  const evenImagInfo = cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);\n  const evenTensorInfo = complex({\n    inputs: {\n      real: evenRealInfo,\n      imag: evenImagInfo\n    },\n    backend: cpuBackend\n  });\n  const oddComplex = backend_util.complexWithOddIndex(data);\n  const oddRealVals = oddComplex.real;\n  const oddImagVals = oddComplex.imag;\n  const oddShape = [oddRealVals.length];\n  const oddRealInfo = cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);\n  const oddImagInfo = cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);\n  const oddTensorInfo = complex({\n    inputs: {\n      real: oddRealInfo,\n      imag: oddImagInfo\n    },\n    backend: cpuBackend\n  });\n  // Recursive call for half part of original input.\n  const $evenComplex = fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n  const $evenRealVals = $evenComplex.real;\n  const $evenImagVals = $evenComplex.imag;\n  const $evenShape = [$evenRealVals.length];\n  const $evenRealInfo = cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);\n  const $evenImagInfo = cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);\n  const $evenTensorInfo = complex({\n    inputs: {\n      real: $evenRealInfo,\n      imag: $evenImagInfo\n    },\n    backend: cpuBackend\n  });\n  const $oddComplex = fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n  const $oddRealVals = $oddComplex.real;\n  const $oddImagVals = $oddComplex.imag;\n  const $oddShape = [$oddRealVals.length];\n  const $oddRealInfo = cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);\n  const $oddImagInfo = cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);\n  const $oddTensorInfo = complex({\n    inputs: {\n      real: $oddRealInfo,\n      imag: $oddImagInfo\n    },\n    backend: cpuBackend\n  });\n  const e = backend_util.exponents(size, inverse);\n  const eShape = [e.real.length];\n  const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);\n  const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);\n  const complexInfo = complex({\n    inputs: {\n      real: eRealInfo,\n      imag: eImagInfo\n    },\n    backend: cpuBackend\n  });\n  const exponentInfo = multiply({\n    inputs: {\n      a: complexInfo,\n      b: $oddTensorInfo\n    },\n    backend: cpuBackend\n  });\n  const addPart = add({\n    inputs: {\n      a: $evenTensorInfo,\n      b: exponentInfo\n    },\n    backend: cpuBackend\n  });\n  const subPart = sub({\n    inputs: {\n      a: $evenTensorInfo,\n      b: exponentInfo\n    },\n    backend: cpuBackend\n  });\n  const addPartReal = real({\n    inputs: {\n      input: addPart\n    },\n    backend: cpuBackend\n  });\n  const subPartReal = real({\n    inputs: {\n      input: subPart\n    },\n    backend: cpuBackend\n  });\n  const addPartImag = imag({\n    inputs: {\n      input: addPart\n    },\n    backend: cpuBackend\n  });\n  const subPartImag = imag({\n    inputs: {\n      input: subPart\n    },\n    backend: cpuBackend\n  });\n  const $real = concat({\n    inputs: [addPartReal, subPartReal],\n    backend: cpuBackend,\n    attrs: {\n      axis: 0\n    }\n  });\n  const $imag = concat({\n    inputs: [addPartImag, subPartImag],\n    backend: cpuBackend,\n    attrs: {\n      axis: 0\n    }\n  });\n  const $realVals = cpuBackend.data.get($real.dataId).values;\n  const $imagVals = cpuBackend.data.get($imag.dataId).values;\n  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n  cpuBackend.disposeIntermediateTensorInfo(addPart);\n  cpuBackend.disposeIntermediateTensorInfo(subPart);\n  cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n  cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n  cpuBackend.disposeIntermediateTensorInfo($real);\n  cpuBackend.disposeIntermediateTensorInfo($imag);\n  return {\n    real: $realVals,\n    imag: $imagVals\n  };\n}\n// Calculate fourier transform by multplying sinusoid matrix.\nfunction fourierTransformByMatmul(data, size, inverse) {\n  const ret = new Float32Array(size * 2);\n  // TODO: Use matmul instead once it supports complex64 type.\n  for (let r = 0; r < size; r++) {\n    let real = 0.0;\n    let imag = 0.0;\n    for (let c = 0; c < size; c++) {\n      const e = backend_util.exponent(r * c, size, inverse);\n      const term = backend_util.getComplexWithIndex(data, c);\n      real += term.real * e.real - term.imag * e.imag;\n      imag += term.real * e.imag + term.imag * e.real;\n    }\n    if (inverse) {\n      real /= size;\n      imag /= size;\n    }\n    backend_util.assignToTypedArray(ret, real, imag, r);\n  }\n  return ret;\n}","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/utils/fft_utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Tensor, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {add} from '../kernels/Add';\nimport {complex} from '../kernels/Complex';\nimport {concat} from '../kernels/Concat';\nimport {identity} from '../kernels/Identity';\nimport {imag} from '../kernels/Imag';\nimport {multiply} from '../kernels/Multiply';\nimport {real} from '../kernels/Real';\nimport {realDivConfig} from '../kernels/RealDiv';\nimport {slice} from '../kernels/Slice';\nimport {sub} from '../kernels/Sub';\n\n/**\n * Calculate FFT of inner most elements of batch tensor.\n */\nexport function fftBatch(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): TensorInfo {\n  const inputShape = input.shape;\n  const batch = inputShape[0];\n  const innerDim = inputShape[1];\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const real2D = inputVals.complexTensorInfos.real;\n  const imag2D = inputVals.complexTensorInfos.imag;\n\n  // Collects real and imaginary values separately.\n  const resultShape = [batch, innerDim];\n  const resultSize = util.sizeFromShape(resultShape);\n  const resultReal = util.getTypedArrayFromDType('float32', resultSize);\n  const resultImag = util.getTypedArrayFromDType('float32', resultSize);\n\n  for (let b = 0; b < batch; b++) {\n    // TODO: Support slice ops for complex type.\n    const r = slice({\n      inputs: {x: real2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n    const i = slice({\n      inputs: {x: imag2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n\n    const input = complex({inputs: {real: r, imag: i}, backend: cpuBackend});\n\n    // Run FFT by batch element.\n    const {real, imag} = fftImpl(input, inverse, cpuBackend);\n    const res = backend_util.mergeRealAndImagArrays(real, imag);\n\n    for (let d = 0; d < innerDim; d++) {\n      const c = backend_util.getComplexWithIndex(res, d);\n      resultReal[b * innerDim + d] = c.real;\n      resultImag[b * innerDim + d] = c.imag;\n    }\n\n    cpuBackend.disposeIntermediateTensorInfo(r);\n    cpuBackend.disposeIntermediateTensorInfo(i);\n    cpuBackend.disposeIntermediateTensorInfo(input);\n  }\n\n  const $realInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);\n  const $imagInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);\n\n  const result = complex(\n      {inputs: {real: $realInfo, imag: $imagInfo}, backend: cpuBackend});\n\n  cpuBackend.disposeIntermediateTensorInfo($realInfo);\n  cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n\n  return result;\n}\n\nexport function fftImpl(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  const inputSize = util.sizeFromShape(input.shape);\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const realVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values as\n      Float32Array;\n\n  const imagVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values as\n      Float32Array;\n\n  if (isExponentOf2(inputSize)) {\n    const result =\n        fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n\n    const resultShape = [input.shape[0], input.shape[1]];\n\n    if (inverse) {\n      const realInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);\n      const imagInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);\n\n      const sizeInfo: TensorInfo = cpuBackend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(inputSize as {} as 'float32', 'float32'));\n      const sizeInfoCopy =\n          identity({inputs: {x: sizeInfo}, backend: cpuBackend});\n\n      const divRealInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: realInfo, b: sizeInfo}, backend: cpuBackend}) as\n          TensorInfo;\n      const divImagInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: imagInfo, b: sizeInfoCopy}, backend: cpuBackend}) as\n          TensorInfo;\n\n      const divRealVals =\n          cpuBackend.data.get(divRealInfo.dataId).values as Float32Array;\n      const divImagVals =\n          cpuBackend.data.get(divImagInfo.dataId).values as Float32Array;\n\n      cpuBackend.disposeIntermediateTensorInfo(realInfo);\n      cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n\n      return {real: divRealVals, imag: divImagVals};\n    }\n\n    return result;\n  } else {\n    const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n    const rawOutput =\n        fourierTransformByMatmul(data, inputSize, inverse) as Float32Array;\n\n    return backend_util.splitRealAndImagArrays(rawOutput);\n  }\n}\n\nfunction isExponentOf2(size: number): boolean {\n  return (size & size - 1) === 0;\n}\n\n// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\nfunction fftRadix2(\n    realVals: Float32Array, imagVals: Float32Array, size: number,\n    inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  if (size === 1) {\n    return {real: realVals, imag: imagVals};\n  }\n\n  const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n  const half = size / 2;\n\n  const evenComplex = backend_util.complexWithEvenIndex(data);\n\n  const evenRealVals = evenComplex.real;\n  const evenImagVals = evenComplex.imag;\n\n  const evenShape = [evenRealVals.length];\n\n  const evenRealInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);\n  const evenImagInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);\n\n  const evenTensorInfo = complex(\n      {inputs: {real: evenRealInfo, imag: evenImagInfo}, backend: cpuBackend});\n\n  const oddComplex = backend_util.complexWithOddIndex(data);\n\n  const oddRealVals = oddComplex.real;\n  const oddImagVals = oddComplex.imag;\n\n  const oddShape = [oddRealVals.length];\n\n  const oddRealInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);\n  const oddImagInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);\n\n  const oddTensorInfo = complex(\n      {inputs: {real: oddRealInfo, imag: oddImagInfo}, backend: cpuBackend});\n\n  // Recursive call for half part of original input.\n  const $evenComplex =\n      fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n\n  const $evenRealVals = $evenComplex.real;\n  const $evenImagVals = $evenComplex.imag;\n\n  const $evenShape = [$evenRealVals.length];\n\n  const $evenRealInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);\n  const $evenImagInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);\n\n  const $evenTensorInfo = complex({\n    inputs: {real: $evenRealInfo, imag: $evenImagInfo},\n    backend: cpuBackend\n  });\n\n  const $oddComplex =\n      fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n\n  const $oddRealVals = $oddComplex.real;\n  const $oddImagVals = $oddComplex.imag;\n\n  const $oddShape = [$oddRealVals.length];\n\n  const $oddRealInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);\n  const $oddImagInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);\n\n  const $oddTensorInfo = complex(\n      {inputs: {real: $oddRealInfo, imag: $oddImagInfo}, backend: cpuBackend});\n\n  const e = backend_util.exponents(size, inverse);\n  const eShape = [e.real.length];\n\n  const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);\n  const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);\n\n  const complexInfo = complex(\n      {inputs: {real: eRealInfo, imag: eImagInfo}, backend: cpuBackend});\n\n  const exponentInfo =\n      multiply(\n          {inputs: {a: complexInfo, b: $oddTensorInfo}, backend: cpuBackend}) as\n      TensorInfo;\n\n  const addPart = add({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n  const subPart = sub({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n\n  const addPartReal = real({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartReal = real({inputs: {input: subPart}, backend: cpuBackend});\n\n  const addPartImag = imag({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartImag = imag({inputs: {input: subPart}, backend: cpuBackend});\n\n  const $real = concat({\n    inputs: [addPartReal as Tensor, subPartReal as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n  const $imag = concat({\n    inputs: [addPartImag as Tensor, subPartImag as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n\n  const $realVals = cpuBackend.data.get($real.dataId).values as Float32Array;\n  const $imagVals = cpuBackend.data.get($imag.dataId).values as Float32Array;\n\n  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n  cpuBackend.disposeIntermediateTensorInfo(addPart);\n  cpuBackend.disposeIntermediateTensorInfo(subPart);\n  cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n  cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n  cpuBackend.disposeIntermediateTensorInfo($real);\n  cpuBackend.disposeIntermediateTensorInfo($imag);\n\n  return {real: $realVals, imag: $imagVals};\n}\n\n// Calculate fourier transform by multplying sinusoid matrix.\nfunction fourierTransformByMatmul(\n    data: TypedArray, size: number, inverse: boolean): TypedArray {\n  const ret = new Float32Array(size * 2);\n  // TODO: Use matmul instead once it supports complex64 type.\n  for (let r = 0; r < size; r++) {\n    let real = 0.0;\n    let imag = 0.0;\n    for (let c = 0; c < size; c++) {\n      const e = backend_util.exponent(r * c, size, inverse);\n      const term = backend_util.getComplexWithIndex(data as Float32Array, c);\n      real += term.real * e.real - term.imag * e.imag;\n      imag += term.real * e.imag + term.imag * e.real;\n    }\n    if (inverse) {\n      real /= size;\n      imag /= size;\n    }\n    backend_util.assignToTypedArray(ret, real, imag, r);\n  }\n  return ret;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}