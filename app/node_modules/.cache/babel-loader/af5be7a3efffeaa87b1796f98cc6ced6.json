{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMax, util } from '@tensorflow/tfjs-core';\nimport { permuteAxesAndTranspose } from './kernel_utils';\nimport { CppDType } from './types';\nlet wasmFunc;\nfunction setup(backend) {\n  wasmFunc = backend.wasm.cwrap(ArgMax, null /* void */, ['number', 'number', 'number', 'number', 'number' // out_id\n  ]);\n}\n\nfunction argmax(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    axis\n  } = attrs;\n  const {\n    x\n  } = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  let inputId = xId;\n  let input = x;\n  const {\n    transposed,\n    axes,\n    inputWasTransposed\n  } = permuteAxesAndTranspose(x, axis, backend);\n  if (inputWasTransposed) {\n    const transposedId = backend.dataIdMap.get(transposed.dataId).id;\n    if (transposedId !== xId) {\n      // transpose was not a no-op. We will need to dispose of this\n      // once we are done.\n      input = transposed;\n      inputId = transposedId;\n    }\n  }\n  const outShape = input.shape.slice(0, -1);\n  const out = backend.makeOutput(outShape, 'int32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const outerSize = util.sizeFromShape(out.shape);\n  const innerSize = input.shape[axes[0]];\n  wasmFunc(inputId, CppDType[input.dtype], outerSize, innerSize, outId);\n  if (inputWasTransposed) {\n    // dispose of the transposed tensor.\n    backend.disposeData(transposed.dataId);\n  }\n  return out;\n}\nexport const argMaxConfig = {\n  kernelName: ArgMax,\n  backendName: 'wasm',\n  kernelFunc: argmax,\n  setupFunc: setup\n};","map":{"version":3,"sources":["../../src/kernels/ArgMax.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAM,EAAuD,IAAI,QAAO,uBAAuB;AAIvG,SAAQ,uBAAuB,QAAO,gBAAgB;AACtD,SAAQ,QAAQ,QAAO,SAAS;AAEhC,IAAI,QAEsB;AAE1B,SAAS,KAAK,CAAC,OAAoB,EAAA;EACjC,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CACrD,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;;AAEA,SAAS,MAAM,CACX,IAAsE,EAAA;EACxE,MAAM;IAAC,OAAO;IAAE,MAAM;IAAE;EAAK,CAAC,GAAG,IAAI;EACrC,MAAM;IAAC;EAAI,CAAC,GAAG,KAA0B;EACzC,MAAM;IAAC;EAAC,CAAC,GAAG,MAA4B;EACxC,MAAM,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE;EAC9C,IAAI,OAAO,GAAG,GAAG;EACjB,IAAI,KAAK,GAAG,CAAC;EAEb,MAAM;IAAC,UAAU;IAAE,IAAI;IAAE;EAAkB,CAAC,GACxC,uBAAuB,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC;EAE7C,IAAI,kBAAkB,EAAE;IACtB,MAAM,YAAY,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE;IAChE,IAAI,YAAY,KAAK,GAAG,EAAE;MACxB;MACA;MACA,KAAK,GAAG,UAAU;MAClB,OAAO,GAAG,YAAY;IACvB;EACF;EAED,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACzC,MAAM,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC;EACjD,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE;EAClD,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC;EAC/C,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EACtC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,CAAC;EAErE,IAAI,kBAAkB,EAAE;IACtB;IACA,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC;EACvC;EAED,OAAO,GAAG;AACZ;AAEA,OAAO,MAAM,YAAY,GAAiB;EACxC,UAAU,EAAE,MAAM;EAClB,WAAW,EAAE,MAAM;EACnB,UAAU,EAAE,MAA0B;EACtC,SAAS,EAAE;CACZ","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMax, util } from '@tensorflow/tfjs-core';\nimport { permuteAxesAndTranspose } from './kernel_utils';\nimport { CppDType } from './types';\nlet wasmFunc;\nfunction setup(backend) {\n    wasmFunc = backend.wasm.cwrap(ArgMax, null /* void */, [\n        'number',\n        'number',\n        'number',\n        'number',\n        'number' // out_id\n    ]);\n}\nfunction argmax(args) {\n    const { backend, inputs, attrs } = args;\n    const { axis } = attrs;\n    const { x } = inputs;\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    let inputId = xId;\n    let input = x;\n    const { transposed, axes, inputWasTransposed } = permuteAxesAndTranspose(x, axis, backend);\n    if (inputWasTransposed) {\n        const transposedId = backend.dataIdMap.get(transposed.dataId).id;\n        if (transposedId !== xId) {\n            // transpose was not a no-op. We will need to dispose of this\n            // once we are done.\n            input = transposed;\n            inputId = transposedId;\n        }\n    }\n    const outShape = input.shape.slice(0, -1);\n    const out = backend.makeOutput(outShape, 'int32');\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    const outerSize = util.sizeFromShape(out.shape);\n    const innerSize = input.shape[axes[0]];\n    wasmFunc(inputId, CppDType[input.dtype], outerSize, innerSize, outId);\n    if (inputWasTransposed) {\n        // dispose of the transposed tensor.\n        backend.disposeData(transposed.dataId);\n    }\n    return out;\n}\nexport const argMaxConfig = {\n    kernelName: ArgMax,\n    backendName: 'wasm',\n    kernelFunc: argmax,\n    setupFunc: setup\n};\n//# sourceMappingURL=ArgMax.js.map"]},"metadata":{},"sourceType":"module"}