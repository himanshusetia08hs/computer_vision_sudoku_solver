{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Prelu } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nlet wasmPrelu;\nfunction setup(backend) {\n  wasmPrelu = backend.wasm.cwrap(Prelu, null /* void */, ['number', 'number', 'number' // out_id\n  ]);\n}\n\nfunction prelu(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x,\n    alpha\n  } = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const weightsId = backend.dataIdMap.get(alpha.dataId).id;\n  let inputId = xId;\n  const input = x;\n  let castedInput = input;\n  if (input.dtype !== 'float32') {\n    castedInput = cast({\n      backend,\n      inputs: {\n        x\n      },\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    inputId = backend.dataIdMap.get(castedInput.dataId).id;\n  }\n  const out = backend.makeOutput(x.shape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmPrelu(inputId, weightsId, outId);\n  if (input.dtype !== 'float32') {\n    backend.disposeData(castedInput.dataId);\n  }\n  return out;\n}\nexport const preluConfig = {\n  kernelName: Prelu,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: prelu\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-wasm/src/kernels/Prelu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,KAAK,QAAoB,uBAAuB;AAIlF,SAAQ,IAAI,QAAO,QAAQ;AAE3B,IAAI,SAAkE;AAEtE,SAAS,KAAK,CAAC,OAAoB,EAAA;EACjC,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,CACrD,QAAQ,EACR,QAAQ,EACR,QAAQ,CAAG;EAAA,CACZ,CAAC;AACJ;;AAEA,SAAS,KAAK,CAAC,IAAiD,EAAA;EAC9D,MAAM;IAAC,MAAM;IAAE;EAAO,CAAC,GAAG,IAAI;EAC9B,MAAM;IAAC,CAAC;IAAE;EAAK,CAAC,GAAG,MAAM;EACzB,MAAM,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE;EAC9C,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE;EAExD,IAAI,OAAO,GAAG,GAAG;EACjB,MAAM,KAAK,GAAG,CAAC;EACf,IAAI,WAAW,GAAG,KAAK;EACvB,IAAI,KAAK,CAAC,KAAK,KAAK,SAAS,EAAE;IAC7B,WAAW,GAAG,IAAI,CAAC;MAAC,OAAO;MAAE,MAAM,EAAE;QAAC;MAAC,CAAC;MAAE,KAAK,EAAE;QAAC,KAAK,EAAE;MAAS;IAAC,CAAC,CAAC;IACrE,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE;EACvD;EAED,MAAM,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,EAAE,SAAS,CAAC;EAClD,MAAM,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE;EAClD,SAAS,CAAC,OAAO,EAAE,SAAS,EAAE,KAAK,CAAC;EAEpC,IAAI,KAAK,CAAC,KAAK,KAAK,SAAS,EAAE;IAC7B,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC;EACxC;EACD,OAAO,GAAG;AACZ;AAEA,OAAO,MAAM,WAAW,GAAiB;EACvC,UAAU,EAAE,KAAK;EACjB,WAAW,EAAE,MAAM;EACnB,SAAS,EAAE,KAAK;EAChB,UAAU,EAAE;CACb","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Prelu, PreluInputs} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\n\nimport {cast} from './Cast';\n\nlet wasmPrelu: (xId: number, weightsId: number, outId: number) => void;\n\nfunction setup(backend: BackendWasm) {\n  wasmPrelu = backend.wasm.cwrap(Prelu, null /* void */, [\n    'number',  // x_id\n    'number',  // weights_id\n    'number'   // out_id\n  ]);\n}\n\nfunction prelu(args: {inputs: PreluInputs, backend: BackendWasm}) {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const weightsId = backend.dataIdMap.get(alpha.dataId).id;\n\n  let inputId = xId;\n  const input = x;\n  let castedInput = input;\n  if (input.dtype !== 'float32') {\n    castedInput = cast({backend, inputs: {x}, attrs: {dtype: 'float32'}});\n    inputId = backend.dataIdMap.get(castedInput.dataId).id;\n  }\n\n  const out = backend.makeOutput(x.shape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmPrelu(inputId, weightsId, outId);\n\n  if (input.dtype !== 'float32') {\n    backend.disposeData(castedInput.dataId);\n  }\n  return out;\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: prelu as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}