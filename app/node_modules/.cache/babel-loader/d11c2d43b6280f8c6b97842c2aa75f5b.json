{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { transpose } from './Transpose';\n/**\n * Compute permutation axes and do a transpose if necessary.\n *\n * Used by reduction ops.\n * @param x input TensorInfo\n * @param axis reduction axes\n * @param backend wasm backend instance\n */\nexport function permuteAxesAndTranspose(x, axis, backend) {\n  const xShape = x.shape;\n  const xRank = x.shape.length;\n  const originalAxes = util.parseAxisParam(axis, xShape);\n  let axes = originalAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xTransposed = null;\n  let inputWasTransposed = false;\n  if (permutedAxes != null) {\n    const newShape = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    xTransposed = transpose({\n      inputs: {\n        x\n      },\n      attrs: {\n        perm: permutedAxes\n      },\n      backend\n    });\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    const transposedId = backend.dataIdMap.get(xTransposed.dataId).id;\n    if (transposedId !== xId) {\n      inputWasTransposed = true;\n    }\n  }\n  return {\n    transposed: xTransposed,\n    originalAxes,\n    axes,\n    inputWasTransposed\n  };\n}","map":{"version":3,"sources":["../../src/kernels/kernel_utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAY,EAAc,IAAI,QAAO,uBAAuB;AAEpE,SAAQ,SAAS,QAAO,aAAa;AAErC;;;;;;;AAOG;AACH,OAAM,SAAU,uBAAuB,CACnC,CAAa,EAAE,IAAqB,EAAE,OAAoB,EAAA;EAM5D,MAAM,MAAM,GAAG,CAAC,CAAC,KAAK;EACtB,MAAM,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,MAAM;EAE5B,MAAM,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,CAAC;EACtD,IAAI,IAAI,GAAG,YAAY;EACvB,MAAM,YAAY,GAAG,YAAY,CAAC,kBAAkB,CAAC,IAAI,EAAE,KAAK,CAAC;EACjE,IAAI,WAAW,GAAG,IAAI;EACtB,IAAI,kBAAkB,GAAG,KAAK;EAC9B,IAAI,YAAY,IAAI,IAAI,EAAE;IACxB,MAAM,QAAQ,GAAa,IAAI,KAAK,CAAC,KAAK,CAAC;IAC3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;MACxC,QAAQ,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IACtC;IAED,IAAI,GAAG,YAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC;IACxD,WAAW,GACP,SAAS,CAAC;MAAC,MAAM,EAAE;QAAC;MAAC,CAAC;MAAE,KAAK,EAAE;QAAC,IAAI,EAAE;MAAY,CAAC;MAAE;IAAO,CAAC,CAAC;IAElE,MAAM,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE;IAC9C,MAAM,YAAY,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE;IACjE,IAAI,YAAY,KAAK,GAAG,EAAE;MACxB,kBAAkB,GAAG,IAAI;IAC1B;EACF;EAED,OAAO;IAAC,UAAU,EAAE,WAAW;IAAE,YAAY;IAAE,IAAI;IAAE;EAAkB,CAAC;AAC1E","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { transpose } from './Transpose';\n/**\n * Compute permutation axes and do a transpose if necessary.\n *\n * Used by reduction ops.\n * @param x input TensorInfo\n * @param axis reduction axes\n * @param backend wasm backend instance\n */\nexport function permuteAxesAndTranspose(x, axis, backend) {\n    const xShape = x.shape;\n    const xRank = x.shape.length;\n    const originalAxes = util.parseAxisParam(axis, xShape);\n    let axes = originalAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    let xTransposed = null;\n    let inputWasTransposed = false;\n    if (permutedAxes != null) {\n        const newShape = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n            newShape[i] = xShape[permutedAxes[i]];\n        }\n        axes = backend_util.getInnerMostAxes(axes.length, xRank);\n        xTransposed =\n            transpose({ inputs: { x }, attrs: { perm: permutedAxes }, backend });\n        const xId = backend.dataIdMap.get(x.dataId).id;\n        const transposedId = backend.dataIdMap.get(xTransposed.dataId).id;\n        if (transposedId !== xId) {\n            inputWasTransposed = true;\n        }\n    }\n    return { transposed: xTransposed, originalAxes, axes, inputWasTransposed };\n}\n//# sourceMappingURL=kernel_utils.js.map"]},"metadata":{},"sourceType":"module"}