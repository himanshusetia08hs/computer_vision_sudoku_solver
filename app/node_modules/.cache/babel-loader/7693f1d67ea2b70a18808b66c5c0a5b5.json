{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedBatchNorm } from '../kernel_names';\nimport { add } from '../ops/add';\nimport { getReductionAxes } from '../ops/broadcast_util';\nimport { mul } from '../ops/mul';\nimport { reshape } from '../ops/reshape';\nimport { rsqrt } from '../ops/rsqrt';\nimport { scalar } from '../ops/scalar';\nimport { sub } from '../ops/sub';\nimport { sum } from '../ops/sum';\nimport { tile } from '../ops/tile';\nexport const fusedBatchNormGradConfig = {\n  kernelName: FusedBatchNorm,\n  inputsToSave: ['x', 'mean', 'variance', 'scale'],\n  gradFunc: (dy, saved, attrs) => {\n    const {\n      varianceEpsilon\n    } = attrs;\n    const [x, mean, variance, scale] = saved;\n    const scaleValue = scale == null ? scalar(1) : scale;\n    const reductionAxes = getReductionAxes(mean.shape, x.shape);\n    const tileShape = [];\n    if (mean.rank === 1) {\n      for (let i = 0; i < x.shape.length - 1; ++i) {\n        tileShape.push(x.shape[i]);\n      }\n      tileShape.push(1);\n    }\n    const xMinusMean = sub(x, mean);\n    const dyTimesScaleValue = mul(dy, scaleValue);\n    const oneOverSqrtVariance = rsqrt(add(variance, scalar(varianceEpsilon)));\n    const minusHalfRCube = mul(mul(mul(oneOverSqrtVariance, oneOverSqrtVariance), oneOverSqrtVariance), scalar(-0.5));\n    const derX = () => {\n      if (mean.rank === 1) {\n        return reshape(mul(mul(dy, tile(reshape(oneOverSqrtVariance, [1, 1, 1, mean.shape[0]]), tileShape)), scaleValue), x.shape);\n      } else {\n        return reshape(mul(mul(dy, oneOverSqrtVariance), scaleValue), x.shape);\n      }\n    };\n    const derMean = () => {\n      let meanDer = mul(mul(oneOverSqrtVariance, scalar(-1)), dyTimesScaleValue);\n      if (mean.rank === 1) {\n        meanDer = sum(meanDer, reductionAxes);\n      }\n      return reshape(meanDer, mean.shape);\n    };\n    const derVariance = () => {\n      let varianceDer = mul(mul(minusHalfRCube, xMinusMean), dyTimesScaleValue);\n      if (mean.rank === 1) {\n        varianceDer = sum(varianceDer, reductionAxes);\n      }\n      return reshape(varianceDer, mean.shape);\n    };\n    const derScale = () => {\n      const xMinusMean2TimesRsqrt = mul(xMinusMean, oneOverSqrtVariance);\n      let scaleDer = mul(dy, xMinusMean2TimesRsqrt);\n      if (mean.rank === 1) {\n        scaleDer = sum(scaleDer, reductionAxes);\n      }\n      return reshape(scaleDer, mean.shape);\n    };\n    const derOffset = () => {\n      let offsetDer = dy;\n      if (mean.rank === 1) {\n        offsetDer = sum(offsetDer, reductionAxes);\n      }\n      return reshape(offsetDer, mean.shape);\n    };\n    return {\n      x: derX,\n      mean: derMean,\n      variance: derVariance,\n      scale: derScale,\n      offset: derOffset\n    };\n  }\n};","map":{"version":3,"sources":["../../src/gradients/FusedBatchNorm_grad.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedBatchNorm } from '../kernel_names';\nimport { add } from '../ops/add';\nimport { getReductionAxes } from '../ops/broadcast_util';\nimport { mul } from '../ops/mul';\nimport { reshape } from '../ops/reshape';\nimport { rsqrt } from '../ops/rsqrt';\nimport { scalar } from '../ops/scalar';\nimport { sub } from '../ops/sub';\nimport { sum } from '../ops/sum';\nimport { tile } from '../ops/tile';\nexport const fusedBatchNormGradConfig = {\n    kernelName: FusedBatchNorm,\n    inputsToSave: ['x', 'mean', 'variance', 'scale'],\n    gradFunc: (dy, saved, attrs) => {\n        const { varianceEpsilon } = attrs;\n        const [x, mean, variance, scale] = saved;\n        const scaleValue = scale == null ? scalar(1) : scale;\n        const reductionAxes = getReductionAxes(mean.shape, x.shape);\n        const tileShape = [];\n        if (mean.rank === 1) {\n            for (let i = 0; i < x.shape.length - 1; ++i) {\n                tileShape.push(x.shape[i]);\n            }\n            tileShape.push(1);\n        }\n        const xMinusMean = sub(x, mean);\n        const dyTimesScaleValue = mul(dy, scaleValue);\n        const oneOverSqrtVariance = rsqrt(add(variance, scalar(varianceEpsilon)));\n        const minusHalfRCube = mul(mul(mul(oneOverSqrtVariance, oneOverSqrtVariance), oneOverSqrtVariance), scalar(-0.5));\n        const derX = () => {\n            if (mean.rank === 1) {\n                return reshape(mul(mul(dy, tile(reshape(oneOverSqrtVariance, [1, 1, 1, mean.shape[0]]), tileShape)), scaleValue), x.shape);\n            }\n            else {\n                return reshape(mul(mul(dy, oneOverSqrtVariance), scaleValue), x.shape);\n            }\n        };\n        const derMean = () => {\n            let meanDer = mul(mul(oneOverSqrtVariance, scalar(-1)), dyTimesScaleValue);\n            if (mean.rank === 1) {\n                meanDer = sum(meanDer, reductionAxes);\n            }\n            return reshape(meanDer, mean.shape);\n        };\n        const derVariance = () => {\n            let varianceDer = mul(mul(minusHalfRCube, xMinusMean), dyTimesScaleValue);\n            if (mean.rank === 1) {\n                varianceDer = sum(varianceDer, reductionAxes);\n            }\n            return reshape(varianceDer, mean.shape);\n        };\n        const derScale = () => {\n            const xMinusMean2TimesRsqrt = mul(xMinusMean, oneOverSqrtVariance);\n            let scaleDer = mul(dy, xMinusMean2TimesRsqrt);\n            if (mean.rank === 1) {\n                scaleDer = sum(scaleDer, reductionAxes);\n            }\n            return reshape(scaleDer, mean.shape);\n        };\n        const derOffset = () => {\n            let offsetDer = dy;\n            if (mean.rank === 1) {\n                offsetDer = sum(offsetDer, reductionAxes);\n            }\n            return reshape(offsetDer, mean.shape);\n        };\n        return {\n            x: derX,\n            mean: derMean,\n            variance: derVariance,\n            scale: derScale,\n            offset: derOffset\n        };\n    }\n};\n//# sourceMappingURL=FusedBatchNorm_grad.js.map"]},"metadata":{},"sourceType":"module"}