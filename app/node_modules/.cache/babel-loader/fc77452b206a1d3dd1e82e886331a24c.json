{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringNGrams } from '@tensorflow/tfjs-core';\nimport { stringNGramsImplCPU } from '../kernel_utils/shared';\nfunction stringNGrams(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    data,\n    dataSplits\n  } = inputs;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const $data = backend.readSync(data.dataId);\n  const $dataSplits = backend.readSync(dataSplits.dataId);\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU($data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences);\n  const nGramsOut = backend.makeOutput([nGrams.length], 'string');\n  const nGramsOutData = backend.dataIdMap.get(nGramsOut.dataId);\n  nGramsOutData.stringBytes = nGrams;\n  const nGramsSplitsOut = backend.makeOutput(dataSplits.shape, 'int32');\n  const nGramsSplitsOutVals = backend.typedArrayFromHeap(nGramsSplitsOut);\n  nGramsSplitsOutVals.set(nGramsSplits);\n  return [nGramsOut, nGramsSplitsOut];\n}\nexport const stringNGramsConfig = {\n  kernelName: StringNGrams,\n  backendName: 'wasm',\n  kernelFunc: stringNGrams\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-wasm/src/kernels/StringNGrams.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,YAAY,QAA0D,uBAAuB;AAG/H,SAAQ,mBAAmB,QAAO,wBAAwB;AAE1D,SAAS,YAAY,CAAC,IAIrB,EAAA;EACC,MAAM;IAAC,OAAO;IAAE,MAAM;IAAE;EAAK,CAAC,GAAG,IAAI;EACrC,MAAM;IAAC,IAAI;IAAE;EAAU,CAAC,GAAG,MAAM;EACjC,MAAM;IACJ,SAAS;IACT,WAAW;IACX,OAAO;IACP,QAAQ;IACR,QAAQ;IACR;EAAsB,CACvB,GAAG,KAAK;EAET,MAAM,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAiB;EAC3D,MAAM,WAAW,GAAG,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAe;EAErE,MAAM,CAAC,MAAM,EAAE,YAAY,CAAC,GAAG,mBAAmB,CAC9C,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EACvE,sBAAsB,CAAC;EAE3B,MAAM,SAAS,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC;EAC/D,MAAM,aAAa,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC;EAC7D,aAAa,CAAC,WAAW,GAAG,MAAM;EAElC,MAAM,eAAe,GAAG,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC;EACrE,MAAM,mBAAmB,GAAG,OAAO,CAAC,kBAAkB,CAAC,eAAe,CAAC;EACvE,mBAAmB,CAAC,GAAG,CAAC,YAAY,CAAC;EAErC,OAAO,CAAC,SAAS,EAAE,eAAe,CAAC;AACrC;AAEA,OAAO,MAAM,kBAAkB,GAAiB;EAC9C,UAAU,EAAE,YAAY;EACxB,WAAW,EAAE,MAAM;EACnB,UAAU,EAAE;CACb","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {BackendWasm} from '../backend_wasm';\nimport {stringNGramsImplCPU} from '../kernel_utils/shared';\n\nfunction stringNGrams(args: {\n  backend: BackendWasm,\n  inputs: StringNGramsInputs,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {backend, inputs, attrs} = args;\n  const {data, dataSplits} = inputs;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences,\n  } = attrs;\n\n  const $data = backend.readSync(data.dataId) as Uint8Array[];\n  const $dataSplits = backend.readSync(dataSplits.dataId) as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n\n  const nGramsOut = backend.makeOutput([nGrams.length], 'string');\n  const nGramsOutData = backend.dataIdMap.get(nGramsOut.dataId);\n  nGramsOutData.stringBytes = nGrams;\n\n  const nGramsSplitsOut = backend.makeOutput(dataSplits.shape, 'int32');\n  const nGramsSplitsOutVals = backend.typedArrayFromHeap(nGramsSplitsOut);\n  nGramsSplitsOutVals.set(nGramsSplits);\n\n  return [nGramsOut, nGramsSplitsOut];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'wasm',\n  kernelFunc: stringNGrams as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}