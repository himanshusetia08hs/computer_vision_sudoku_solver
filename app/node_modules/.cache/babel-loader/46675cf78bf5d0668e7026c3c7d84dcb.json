{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Math utility functions.\n *\n * This file contains some frequently used math function that operates on\n * number[] or Float32Array and return a number. Many of these functions are\n * not-so-thick wrappers around TF.js Core functions. But they offer the\n * convenience of\n * 1) not having to convert the inputs into Tensors,\n * 2) not having to convert the returned Tensors to numbers.\n */\nimport { ValueError } from '../errors';\n/**\n * Determine if a number is an integer.\n */\nexport function isInteger(x) {\n  return x === parseInt(x.toString(), 10);\n}\n/**\n * Calculate the product of an array of numbers.\n * @param array The array to calculate the product over.\n * @param begin Beginning index, inclusive.\n * @param end Ending index, exclusive.\n * @return The product.\n */\nexport function arrayProd(array, begin, end) {\n  if (begin == null) {\n    begin = 0;\n  }\n  if (end == null) {\n    end = array.length;\n  }\n  let prod = 1;\n  for (let i = begin; i < end; ++i) {\n    prod *= array[i];\n  }\n  return prod;\n}\n/**\n * Compute minimum value.\n * @param array\n * @return minimum value.\n */\nexport function min(array) {\n  // same behavior as tf.min()\n  if (array.length === 0) {\n    return Number.NaN;\n  }\n  let min = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    if (value < min) {\n      min = value;\n    }\n  }\n  return min;\n}\n/**\n * Compute maximum value.\n * @param array\n * @return maximum value\n */\nexport function max(array) {\n  // same behavior as tf.max()\n  if (array.length === 0) {\n    return Number.NaN;\n  }\n  let max = Number.NEGATIVE_INFINITY;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    if (value > max) {\n      max = value;\n    }\n  }\n  return max;\n}\n/**\n * Compute sum of array.\n * @param array\n * @return The sum.\n */\nexport function sum(array) {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    sum += value;\n  }\n  return sum;\n}\n/**\n * Compute mean of array.\n * @param array\n * @return The mean.\n */\nexport function mean(array) {\n  return sum(array) / array.length;\n}\n/**\n * Compute variance of array.\n * @param array\n * @return The variance.\n */\nexport function variance(array) {\n  const meanValue = mean(array);\n  const demeaned = array.map(value => value - meanValue);\n  let sumSquare = 0;\n  for (let i = 0; i < demeaned.length; i++) {\n    const value = demeaned[i];\n    sumSquare += value * value;\n  }\n  return sumSquare / array.length;\n}\n/**\n * Compute median of array.\n * @param array\n * @return The median value.\n */\nexport function median(array) {\n  const arraySorted = array.slice().sort((a, b) => a - b);\n  const lowIdx = Math.floor((arraySorted.length - 1) / 2);\n  const highIdx = Math.ceil((arraySorted.length - 1) / 2);\n  if (lowIdx === highIdx) {\n    return arraySorted[lowIdx];\n  }\n  return (arraySorted[lowIdx] + arraySorted[highIdx]) / 2;\n}\n/**\n * Generate an array of integers in [begin, end).\n * @param begin Beginning integer, inclusive.\n * @param end Ending integer, exclusive.\n * @returns Range array.\n * @throws ValueError, iff `end` < `begin`.\n */\nexport function range(begin, end) {\n  if (end < begin) {\n    throw new ValueError(`end (${end}) < begin (${begin}) is forbidden.`);\n  }\n  const out = [];\n  for (let i = begin; i < end; ++i) {\n    out.push(i);\n  }\n  return out;\n}","map":{"version":3,"sources":["../../../../../../tfjs-layers/src/utils/math_utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Math utility functions.\n *\n * This file contains some frequently used math function that operates on\n * number[] or Float32Array and return a number. Many of these functions are\n * not-so-thick wrappers around TF.js Core functions. But they offer the\n * convenience of\n * 1) not having to convert the inputs into Tensors,\n * 2) not having to convert the returned Tensors to numbers.\n */\n\nimport {ValueError} from '../errors';\n\nexport type ArrayTypes = Uint8Array|Int32Array|Float32Array;\n\n/**\n * Determine if a number is an integer.\n */\nexport function isInteger(x: number): boolean {\n  return x === parseInt(x.toString(), 10);\n}\n\n/**\n * Calculate the product of an array of numbers.\n * @param array The array to calculate the product over.\n * @param begin Beginning index, inclusive.\n * @param end Ending index, exclusive.\n * @return The product.\n */\nexport function arrayProd(\n    array: number[]|ArrayTypes, begin?: number, end?: number): number {\n  if (begin == null) {\n    begin = 0;\n  }\n  if (end == null) {\n    end = array.length;\n  }\n\n  let prod = 1;\n  for (let i = begin; i < end; ++i) {\n    prod *= array[i];\n  }\n  return prod;\n}\n\n/**\n * Compute minimum value.\n * @param array\n * @return minimum value.\n */\nexport function min(array: number[]|Float32Array): number {\n  // same behavior as tf.min()\n  if (array.length === 0) {\n    return Number.NaN;\n  }\n  let min = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    if (value < min) {\n      min = value;\n    }\n  }\n  return min;\n}\n\n/**\n * Compute maximum value.\n * @param array\n * @return maximum value\n */\nexport function max(array: number[]|Float32Array): number {\n  // same behavior as tf.max()\n  if (array.length === 0) {\n    return Number.NaN;\n  }\n  let max = Number.NEGATIVE_INFINITY;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    if (value > max) {\n      max = value;\n    }\n  }\n  return max;\n}\n\n/**\n * Compute sum of array.\n * @param array\n * @return The sum.\n */\nexport function sum(array: number[]|Float32Array): number {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    sum += value;\n  }\n  return sum;\n}\n\n/**\n * Compute mean of array.\n * @param array\n * @return The mean.\n */\nexport function mean(array: number[]|Float32Array): number {\n  return sum(array) / array.length;\n}\n\n/**\n * Compute variance of array.\n * @param array\n * @return The variance.\n */\nexport function variance(array: number[]|Float32Array): number {\n  const meanValue = mean(array);\n  const demeaned = array.map((value: number) => value - meanValue);\n  let sumSquare = 0;\n  for (let i = 0; i < demeaned.length; i++) {\n    const value = demeaned[i];\n    sumSquare += value * value;\n  }\n  return sumSquare / array.length;\n}\n\n/**\n * Compute median of array.\n * @param array\n * @return The median value.\n */\nexport function median(array: number[]|Float32Array): number {\n  const arraySorted = array.slice().sort((a, b) => a - b);\n  const lowIdx = Math.floor((arraySorted.length - 1) / 2);\n  const highIdx = Math.ceil((arraySorted.length - 1) / 2);\n  if (lowIdx === highIdx) {\n    return arraySorted[lowIdx];\n  }\n  return (arraySorted[lowIdx] + arraySorted[highIdx]) / 2;\n}\n\n/**\n * Generate an array of integers in [begin, end).\n * @param begin Beginning integer, inclusive.\n * @param end Ending integer, exclusive.\n * @returns Range array.\n * @throws ValueError, iff `end` < `begin`.\n */\nexport function range(begin: number, end: number): number[] {\n  if (end < begin) {\n    throw new ValueError(`end (${end}) < begin (${begin}) is forbidden.`);\n  }\n  const out: number[] = [];\n  for (let i = begin; i < end; ++i) {\n    out.push(i);\n  }\n  return out;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}