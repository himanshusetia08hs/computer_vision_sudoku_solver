{"ast":null,"code":"import { isBigNumber, isNumber } from '../../utils/is';\nimport { errorTransform } from './utils/errorTransform';\nimport { factory } from '../../utils/factory';\nimport { createConcat } from '../../function/matrix/concat';\nvar name = 'concat';\nvar dependencies = ['typed', 'matrix', 'isInteger'];\nexport var createConcatTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n    matrix = _ref.matrix,\n    isInteger = _ref.isInteger;\n  var concat = createConcat({\n    typed: typed,\n    matrix: matrix,\n    isInteger: isInteger\n  });\n  /**\n   * Attach a transform function to math.range\n   * Adds a property transform containing the transform function.\n   *\n   * This transform changed the last `dim` parameter of function concat\n   * from one-based to zero based\n   */\n\n  return typed('concat', {\n    '...any': function any(args) {\n      // change last argument from one-based to zero-based\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n      if (isNumber(last)) {\n        args[lastIndex] = last - 1;\n      } else if (isBigNumber(last)) {\n        args[lastIndex] = last.minus(1);\n      }\n      try {\n        return concat.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"names":["isBigNumber","isNumber","errorTransform","factory","createConcat","name","dependencies","createConcatTransform","_ref","typed","matrix","isInteger","concat","any","args","lastIndex","length","last","minus","apply","err","isTransformFunction"],"sources":["F:/extension/SEM 7/NN/Lab/my lab/P/temp/app/node_modules/mathjs/es/expression/transform/concat.transform.js"],"sourcesContent":["import { isBigNumber, isNumber } from '../../utils/is';\nimport { errorTransform } from './utils/errorTransform';\nimport { factory } from '../../utils/factory';\nimport { createConcat } from '../../function/matrix/concat';\nvar name = 'concat';\nvar dependencies = ['typed', 'matrix', 'isInteger'];\nexport var createConcatTransform = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      matrix = _ref.matrix,\n      isInteger = _ref.isInteger;\n  var concat = createConcat({\n    typed: typed,\n    matrix: matrix,\n    isInteger: isInteger\n  });\n  /**\n   * Attach a transform function to math.range\n   * Adds a property transform containing the transform function.\n   *\n   * This transform changed the last `dim` parameter of function concat\n   * from one-based to zero based\n   */\n\n  return typed('concat', {\n    '...any': function any(args) {\n      // change last argument from one-based to zero-based\n      var lastIndex = args.length - 1;\n      var last = args[lastIndex];\n\n      if (isNumber(last)) {\n        args[lastIndex] = last - 1;\n      } else if (isBigNumber(last)) {\n        args[lastIndex] = last.minus(1);\n      }\n\n      try {\n        return concat.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});"],"mappings":"AAAA,SAASA,WAAW,EAAEC,QAAQ,QAAQ,gBAAgB;AACtD,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,YAAY,QAAQ,8BAA8B;AAC3D,IAAIC,IAAI,GAAG,QAAQ;AACnB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,CAAC;AACnD,OAAO,IAAIC,qBAAqB,GAAG,eAAeJ,OAAO,CAACE,IAAI,EAAEC,YAAY,EAAE,UAAUE,IAAI,EAAE;EAC5F,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;IAClBC,MAAM,GAAGF,IAAI,CAACE,MAAM;IACpBC,SAAS,GAAGH,IAAI,CAACG,SAAS;EAC9B,IAAIC,MAAM,GAAGR,YAAY,CAAC;IACxBK,KAAK,EAAEA,KAAK;IACZC,MAAM,EAAEA,MAAM;IACdC,SAAS,EAAEA;EACb,CAAC,CAAC;EACF;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE,OAAOF,KAAK,CAAC,QAAQ,EAAE;IACrB,QAAQ,EAAE,SAASI,GAAG,CAACC,IAAI,EAAE;MAC3B;MACA,IAAIC,SAAS,GAAGD,IAAI,CAACE,MAAM,GAAG,CAAC;MAC/B,IAAIC,IAAI,GAAGH,IAAI,CAACC,SAAS,CAAC;MAE1B,IAAId,QAAQ,CAACgB,IAAI,CAAC,EAAE;QAClBH,IAAI,CAACC,SAAS,CAAC,GAAGE,IAAI,GAAG,CAAC;MAC5B,CAAC,MAAM,IAAIjB,WAAW,CAACiB,IAAI,CAAC,EAAE;QAC5BH,IAAI,CAACC,SAAS,CAAC,GAAGE,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC;MACjC;MAEA,IAAI;QACF,OAAON,MAAM,CAACO,KAAK,CAAC,IAAI,EAAEL,IAAI,CAAC;MACjC,CAAC,CAAC,OAAOM,GAAG,EAAE;QACZ,MAAMlB,cAAc,CAACkB,GAAG,CAAC;MAC3B;IACF;EACF,CAAC,CAAC;AACJ,CAAC,EAAE;EACDC,mBAAmB,EAAE;AACvB,CAAC,CAAC"},"metadata":{},"sourceType":"module"}