{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative } from '@tensorflow/tfjs-core';\nlet wasmDepthwiseConv2d;\nfunction setup(backend) {\n  wasmDepthwiseConv2d = backend.wasm.cwrap(DepthwiseConv2dNative, null /* void */, ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number']);\n}\nfunction depthwiseConv2d(args) {\n  const {\n    inputs,\n    attrs,\n    backend\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const filterId = backend.dataIdMap.get(filter.dataId).id;\n  const {\n    strides,\n    dilations,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const $dilations = dilations == null ? [1, 1] : dilations;\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const inputChannels = convInfo.inChannels;\n  const outputChannels = convInfo.outChannels;\n  const isSamePad = convInfo.padInfo.type === 'SAME' ? 1 : 0;\n  if (convInfo.dataFormat !== 'channelsLast') {\n    throw new Error(`wasm backend DepthwiseConv2dNative does not support dataFormat:'` + `${convInfo.dataFormat}'. Please use 'channelsLast'.`);\n  }\n  const out = backend.makeOutput(convInfo.outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmDepthwiseConv2d(xId, x.shape[0], x.shape[1], x.shape[2], filterId, filterHeight, filterWidth, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, outId);\n  return out;\n}\nexport const depthwiseConv2dNativeConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: depthwiseConv2d\n};","map":{"version":3,"sources":["../../src/kernels/DepthwiseConv2dNative.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative } from '@tensorflow/tfjs-core';\nlet wasmDepthwiseConv2d;\nfunction setup(backend) {\n    wasmDepthwiseConv2d =\n        backend.wasm.cwrap(DepthwiseConv2dNative, null /* void */, [\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n        ]);\n}\nfunction depthwiseConv2d(args) {\n    const { inputs, attrs, backend } = args;\n    const { x, filter } = inputs;\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    const filterId = backend.dataIdMap.get(filter.dataId).id;\n    const { strides, dilations, pad, dimRoundingMode } = attrs;\n    const $dilations = dilations == null ? [1, 1] : dilations;\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const padTop = convInfo.padInfo.top;\n    const padRight = convInfo.padInfo.right;\n    const padBottom = convInfo.padInfo.bottom;\n    const padLeft = convInfo.padInfo.left;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const inputChannels = convInfo.inChannels;\n    const outputChannels = convInfo.outChannels;\n    const isSamePad = convInfo.padInfo.type === 'SAME' ? 1 : 0;\n    if (convInfo.dataFormat !== 'channelsLast') {\n        throw new Error(`wasm backend DepthwiseConv2dNative does not support dataFormat:'` +\n            `${convInfo.dataFormat}'. Please use 'channelsLast'.`);\n    }\n    const out = backend.makeOutput(convInfo.outShape, 'float32');\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmDepthwiseConv2d(xId, x.shape[0], x.shape[1], x.shape[2], filterId, filterHeight, filterWidth, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, outId);\n    return out;\n}\nexport const depthwiseConv2dNativeConfig = {\n    kernelName: DepthwiseConv2dNative,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: depthwiseConv2d\n};\n//# sourceMappingURL=DepthwiseConv2dNative.js.map"]},"metadata":{},"sourceType":"module"}