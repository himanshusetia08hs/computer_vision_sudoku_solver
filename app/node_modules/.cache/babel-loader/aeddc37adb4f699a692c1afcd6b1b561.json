{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext, setWebGLContext } from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport class GPGPUContext {\n  constructor(gl) {\n    this.outputTexture = null;\n    this.program = null;\n    this.disposed = false;\n    this.itemsToPoll = [];\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    gl = this.gl;\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      const gl2 = gl;\n      this.createVertexArray = () => {\n        return webgl_util.callAndCheck(gl2, () => gl2.createVertexArray());\n      };\n      this.bindVertexArray = vao => {\n        return webgl_util.callAndCheck(gl2, () => gl2.bindVertexArray(vao));\n      };\n      this.deleteVertexArray = vao => {\n        return webgl_util.callAndCheck(gl2, () => gl2.deleteVertexArray(vao));\n      };\n      this.getVertexArray = () => {\n        return webgl_util.callAndCheck(gl2, () => gl2.getParameter(gl2.VERTEX_ARRAY_BINDING));\n      };\n    } else if (gl != null) {\n      const ext = gl.getExtension('OES_vertex_array_object');\n      if (ext == null) {\n        throw new Error('All WebGL1 implementations are expected to offer' + ' OES_vertex_array_object.');\n      }\n      this.createVertexArray = () => {\n        return webgl_util.callAndCheck(gl, () => ext.createVertexArrayOES());\n      };\n      this.bindVertexArray = vao => {\n        return webgl_util.callAndCheck(gl, () => ext.bindVertexArrayOES(vao));\n      };\n      this.deleteVertexArray = vao => {\n        return webgl_util.callAndCheck(gl, () => ext.deleteVertexArrayOES(vao));\n      };\n      this.getVertexArray = () => {\n        return webgl_util.callAndCheck(gl, () => gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES));\n      };\n    }\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    this.parallelCompilationExtension = this.gl.getExtension('KHR_parallel_shader_compile');\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n      this.textureFloatExtension = webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension = webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error('GL context does not support half float textures, yet the ' + 'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension = webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error('GL context does not support color renderable half floats, yet ' + 'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension = this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n    this.textureConfig = tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n  get debug() {\n    return env().getBool('DEBUG');\n  }\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' + ' This is probably a resource leak, delete the program with ' + 'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn('Disposing a GPGPUContext that still has a bound output matrix ' + 'texture.  This is probably a resource leak, delete the output ' + 'matrix texture with GPGPUContext.deleteMatrixTexture before ' + 'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n  createFloat32MatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  createFloat16MatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  createUnsignedBytesMatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  uploadPixelDataToTexture(texture, pixels) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n  uploadDenseMatrixToTexture(texture, width, height, data) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);\n  }\n  createFloat16PackedMatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  createPackedMatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  deleteMatrixTexture(texture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n  downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {\n    return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(this.gl, rows, columns, this.textureConfig));\n  }\n  downloadPackedMatrixFromBuffer(buffer, batch, rows, columns, physicalRows, physicalCols) {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);\n  }\n  downloadFloat32MatrixFromBuffer(buffer, size) {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n  createBufferFromTexture(texture, rows, columns) {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n  createAndWaitForFence() {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n  createFence(gl) {\n    let query;\n    let isFencePassed;\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl;\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n      query = sync;\n    } else if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n    return {\n      query,\n      isFencePassed\n    };\n  }\n  downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {\n    return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadMatrixFromPackedOutputTexture(this.gl, physicalRows, physicalCols));\n  }\n  createProgram(fragmentShader) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    if (this.vertexShader == null) {\n      this.vertexShader = gpgpu_util.createVertexShader(gl);\n    }\n    const program = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, this.vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n    let program2;\n    {\n      program2 = Object.assign(program, {\n        vao: this.createVertexArray()\n      });\n      this.bindVertexArray(program2.vao);\n      // Bind index buffer, and vertex buffers based on program attrib\n      // locations.\n      webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer));\n      console.assert(gpgpu_util.bindVertexProgramAttributeStreams(gl, program2, this.vertexBuffer), 'gpgpu_util.bindVertexProgramAttributeStreams not fully successful.');\n      if (this.debug) {\n        webgl_util.validateProgram(gl, program2);\n      }\n    }\n    this.setProgram(program2);\n    return program2;\n  }\n  deleteProgram(program) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n      this.deleteVertexArray(program.vao);\n    }\n  }\n  setProgram(program) {\n    this.throwIfDisposed();\n    this.program = program;\n    if (this.program != null) {\n      this.bindVertexArray(this.program.vao);\n      if (this.debug) {\n        webgl_util.validateProgram(this.gl, this.program);\n      }\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n  getUniformLocation(program, uniformName) {\n    let shouldThrow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(this.gl, program, uniformName);\n    }\n  }\n  getAttributeLocation(program, attribute) {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n  getUniformLocationNoThrow(program, uniformName) {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n  setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n  setOutputMatrixTexture(outputMatrixTexture, rows, columns) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n  setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {\n    this.throwIfDisposed();\n    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n  setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n    this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);\n  }\n  setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n  debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n  executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      const boundVao = this.getVertexArray();\n      console.assert(boundVao === this.program.vao, 'VAO changed between setProgram and executeProgram!');\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n  blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n  getQueryTimerExtension() {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension = webgl_util.getExtensionOrThrow(this.gl, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ? 'EXT_disjoint_timer_query_webgl2' : 'EXT_disjoint_timer_query');\n    }\n    return this.disjointQueryTimerExtension;\n  }\n  getQueryTimerExtensionWebGL2() {\n    return this.getQueryTimerExtension();\n  }\n  getQueryTimerExtensionWebGL1() {\n    return this.getQueryTimerExtension();\n  }\n  beginQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT();\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n  async waitForQueryAndGetTime(query) {\n    await util.repeatedTry(() => this.disposed ||\n    // while testing contexts are created / disposed\n    // in rapid succession, so without this check we\n    // may poll for the query timer indefinitely\n    this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n  getQueryTime(query, queryTimerVersion) {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl;\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n      const timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n  isQueryAvailable(query, queryTimerVersion) {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      const available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n      const available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n      return available && !this.disjoint;\n    }\n  }\n  pollFence(fenceContext) {\n    return new Promise(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n  pollItems() {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {\n        resolveFn\n      } = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n  addItemToPoll(isDoneFn, resolveFn) {\n    this.itemsToPoll.push({\n      isDoneFn,\n      resolveFn\n    });\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    let scheduleFn = undefined;\n    if ('setTimeoutCustom' in env().platform) {\n      scheduleFn = env().platform.setTimeoutCustom.bind(env().platform);\n    }\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    }, () => 0, null, scheduleFn);\n  }\n  bindTextureToFrameBuffer(texture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n  unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n  downloadMatrixDriver(texture, downloadAndDecode) {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n  setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n  setOutputMatrixWriteRegionDriver(x, y, width, height) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n  throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n  throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr) {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}","map":{"version":3,"sources":["../../../../../tfjs-backend-webgl/src/gpgpu_context.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,GAAG,EAAyB,IAAI,QAAO,uBAAuB;AAEtE,SAAQ,eAAe,EAAE,eAAe,QAAO,eAAe;AAC9D,OAAO,KAAK,UAAU,MAAM,cAAc;AAC1C,OAAO,KAAK,QAAQ,MAAM,YAAY;AAGtC,OAAO,KAAK,UAAU,MAAM,cAAc;AAa1C,OAAM,MAAO,YAAY,CAAA;EAwBvB,WAAA,CAAY,EAA0B,EAAA;IAZtC,IAAA,CAAA,aAAa,GAAsB,IAAI;IACvC,IAAA,CAAA,OAAO,GAA6B,IAAI;IAChC,IAAA,CAAA,QAAQ,GAAG,KAAK;IAqiBhB,IAAA,CAAA,WAAW,GAAe,EAAE;IA1hBlC,MAAM,SAAS,GAAG,GAAG,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC;IAClD,IAAI,EAAE,IAAI,IAAI,EAAE;MACd,IAAI,CAAC,EAAE,GAAG,EAAE;MACZ,eAAe,CAAC,SAAS,EAAE,EAAE,CAAC;KAC/B,MAAM;MACL,IAAI,CAAC,EAAE,GAAG,eAAe,CAAC,SAAS,CAAC;IACrC;IACD,EAAE,GAAG,IAAI,CAAC,EAAE;IAEZ,IAAI,GAAG,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE;MAC1C,MAAM,GAAG,GAAG,EAA4B;MACxC,IAAI,CAAC,iBAAiB,GAAG,MAAK;QAC5B,OAAO,UAAU,CAAC,YAAY,CAAC,GAAG,EAChC,MAAM,GAAG,CAAC,iBAAiB,EAAE,CAAC;MAClC,CAAC;MACD,IAAI,CAAC,eAAe,GAAI,GAAkB,IAAI;QAC5C,OAAO,UAAU,CAAC,YAAY,CAAC,GAAG,EAChC,MAAM,GAAG,CAAC,eAAe,CAAC,GAA6B,CAAC,CAAC;MAC7D,CAAC;MACD,IAAI,CAAC,iBAAiB,GAAI,GAAkB,IAAI;QAC9C,OAAO,UAAU,CAAC,YAAY,CAAC,GAAG,EAChC,MAAM,GAAG,CAAC,iBAAiB,CAAC,GAA6B,CAAC,CAAC;MAC/D,CAAC;MACD,IAAI,CAAC,cAAc,GAAG,MAAK;QACzB,OAAO,UAAU,CAAC,YAAY,CAAC,GAAG,EAChC,MAAM,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;MACrD,CAAC;KACF,MAAM,IAAI,EAAE,IAAI,IAAI,EAAE;MACrB,MAAM,GAAG,GAAG,EAAE,CAAC,YAAY,CAAC,yBAAyB,CAAC;MACtD,IAAI,GAAG,IAAI,IAAI,EAAE;QACf,MAAM,IAAI,KAAK,CACX,kDAAkD,GAClD,2BAA2B,CAAC;MACjC;MACD,IAAI,CAAC,iBAAiB,GAAG,MAAK;QAC5B,OAAO,UAAU,CAAC,YAAY,CAAC,EAAE,EAC/B,MAAM,GAAG,CAAC,oBAAoB,EAAE,CAAC;MACrC,CAAC;MACD,IAAI,CAAC,eAAe,GAAI,GAAkB,IAAI;QAC5C,OAAO,UAAU,CAAC,YAAY,CAAC,EAAE,EAC/B,MAAM,GAAG,CAAC,kBAAkB,CAAC,GAAgC,CAAC,CAAC;MACnE,CAAC;MACD,IAAI,CAAC,iBAAiB,GAAI,GAAkB,IAAI;QAC9C,OAAO,UAAU,CAAC,YAAY,CAAC,EAAE,EAC/B,MAAM,GAAG,CAAC,oBAAoB,CAAC,GAAgC,CAAC,CAAC;MACrE,CAAC;MACD,IAAI,CAAC,cAAc,GAAG,MAAK;QACzB,OAAO,UAAU,CAAC,YAAY,CAAC,EAAE,EAC/B,MAAM,EAAE,CAAC,YAAY,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;MACxD,CAAC;IACF;IAED;IACA,IAAI,kBAAkB,GAAG,0BAA0B;IACnD,MAAM,uBAAuB,GAAG,6BAA6B;IAC7D,IAAI,CAAC,4BAA4B,GAC7B,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,6BAA6B,CAAC;IACvD,IAAI,GAAG,EAAE,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE;MAC1C,MAAM,aAAa,GAAG,mBAAmB;MACzC,MAAM,kBAAkB,GAAG,wBAAwB;MAEnD,IAAI,CAAC,qBAAqB,GACtB,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,EAAE,aAAa,CAAC;MAC1D,IAAI,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,kBAAkB,CAAC,EAAE;QACxD,IAAI,CAAC,yBAAyB,GAC1B,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,EAAE,kBAAkB,CAAC;OAChE,MAAM,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,0BAA0B,CAAC,EAAE;QAChD,MAAM,IAAI,KAAK,CACX,2DAA2D,GAC3D,2DAA2D,CAAC;MACjE;MAED,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,kBAAkB,CAAC;MACzE,IAAI,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,uBAAuB,CAAC,EAAE;QAC7D,IAAI,CAAC,6BAA6B,GAC9B,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,EAAE,uBAAuB,CAAC;OACrE,MAAM,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,0BAA0B,CAAC,EAAE;QAChD,MAAM,IAAI,KAAK,CACX,gEAAgE,GAChE,+DAA+D,CAAC;MACrE;KACF,MAAM;MACL,kBAAkB,GAAG,wBAAwB;MAC7C,IAAI,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,kBAAkB,CAAC,EAAE;QACxD,IAAI,CAAC,yBAAyB,GAC1B,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,kBAAkB,CAAC;OAC7C,MAAM,IAAI,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,uBAAuB,CAAC,EAAE;QACpE,IAAI,CAAC,6BAA6B,GAC9B,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,uBAAuB,CAAC;OAClD,MAAM;QACL,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC;MACvE;IACF;IAED,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,CAAC;IAC1D,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC;IACxD,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC;IAExD,IAAI,CAAC,aAAa,GACd,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,yBAAyB,CAAC;EACxE;EAEA,IAAY,KAAK,GAAA;IACf,OAAO,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC;EAC/B;EAEO,OAAO,GAAA;IACZ,IAAI,IAAI,CAAC,QAAQ,EAAE;MACjB;IACD;IACD,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,EAAE;MACxB,OAAO,CAAC,IAAI,CACR,+DAA+D,GAC/D,6DAA6D,GAC7D,8CAA8C,CAAC;IACpD;IACD,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,EAAE;MAC9B,OAAO,CAAC,IAAI,CACR,gEAAgE,GAChE,gEAAgE,GAChE,8DAA8D,GAC9D,YAAY,CAAC;IAClB;IACD,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE;IAClB,UAAU,CAAC,YAAY,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC,MAAM,EAAE,CAAC;IAC9C,UAAU,CAAC,YAAY,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IAC3E,UAAU,CAAC,YAAY,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACzE,UAAU,CAAC,YAAY,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;IACvE,UAAU,CAAC,YAAY,CACnB,EAAE,EAAE,MAAM,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;IAC3D,UAAU,CAAC,YAAY,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACpE,IAAI,CAAC,QAAQ,GAAG,IAAI;EACtB;EAEO,0BAA0B,CAAC,IAAY,EAAE,OAAe,EAAA;IAC7D,IAAI,CAAC,eAAe,EAAE;IACtB,OAAO,UAAU,CAAC,0BAA0B,CACxC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC;EACjD;EAEO,0BAA0B,CAAC,IAAY,EAAE,OAAe,EAAA;IAC7D,IAAI,CAAC,eAAe,EAAE;IACtB,OAAO,UAAU,CAAC,0BAA0B,CACxC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC;EACjD;EAEO,gCAAgC,CAAC,IAAY,EAAE,OAAe,EAAA;IAEnE,IAAI,CAAC,eAAe,EAAE;IACtB,OAAO,UAAU,CAAC,gCAAgC,CAC9C,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC;EACjD;EAEO,wBAAwB,CAC3B,OAAqB,EACrB,MACW,EAAA;IACb,IAAI,CAAC,eAAe,EAAE;IACtB,UAAU,CAAC,wBAAwB,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,EAAE,MAAM,CAAC;EAC/D;EAEO,0BAA0B,CAC7B,OAAqB,EAAE,KAAa,EAAE,MAAc,EAAE,IAAgB,EAAA;IACxE,IAAI,CAAC,eAAe,EAAE;IACtB,UAAU,CAAC,0BAA0B,CACjC,IAAI,CAAC,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC;EAChE;EAEO,gCAAgC,CAAC,IAAY,EAAE,OAAe,EAAA;IAEnE,IAAI,CAAC,eAAe,EAAE;IACtB,OAAO,UAAU,CAAC,gCAAgC,CAC9C,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC;EACjD;EAEO,yBAAyB,CAAC,IAAY,EAAE,OAAe,EAAA;IAC5D,IAAI,CAAC,eAAe,EAAE;IACtB,OAAO,UAAU,CAAC,yBAAyB,CACvC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC;EACjD;EAEO,mBAAmB,CAAC,OAAqB,EAAA;IAC9C,IAAI,CAAC,eAAe,EAAE;IACtB,IAAI,IAAI,CAAC,aAAa,KAAK,OAAO,EAAE;MAClC,UAAU,CAAC,iCAAiC,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC;MACvE,IAAI,CAAC,aAAa,GAAG,IAAI;IAC1B;IACD,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;EACxE;EAEO,+CAA+C,CAClD,OAAqB,EAAE,IAAY,EAAE,OAAe,EAAA;IACtD,OAAO,IAAI,CAAC,oBAAoB,CAC5B,OAAO,EACP,MAAM,UAAU,CAAC,+CAA+C,CAC5D,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;EACtD;EAEO,8BAA8B,CACjC,MAAmB,EAAE,KAAa,EAAE,IAAY,EAAE,OAAe,EACjE,YAAoB,EAAE,YAAoB,EAAA;IAC5C,OAAO,UAAU,CAAC,8BAA8B,CAC5C,IAAI,CAAC,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,YAAY,EACjE,IAAI,CAAC,aAAa,CAAC;EACzB;EAEO,+BAA+B,CAAC,MAAmB,EAAE,IAAY,EAAA;IAEtE,OAAO,UAAU,CAAC,+BAA+B,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC;EAC1E;EAEO,uBAAuB,CAC1B,OAAqB,EAAE,IAAY,EAAE,OAAe,EAAA;IACtD,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC;IACtC,MAAM,MAAM,GAAG,UAAU,CAAC,6BAA6B,CACnD,IAAI,CAAC,EAA4B,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC;IACzE,IAAI,CAAC,0BAA0B,EAAE;IACjC,OAAO,MAAM;EACf;EAEO,qBAAqB,GAAA;IAC1B,MAAM,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC;IAC9C,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC;EACrC;EAEQ,WAAW,CAAC,EAAyB,EAAA;IAC3C,IAAI,KAA2B;IAC/B,IAAI,aAA4B;IAEhC,IAAI,GAAG,EAAE,CAAC,OAAO,CAAC,yBAAyB,CAAC,EAAE;MAC5C,MAAM,GAAG,GAAG,EAA4B;MAExC,MAAM,IAAI,GAAG,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,0BAA0B,EAAE,CAAC,CAAC;MAC7D,EAAE,CAAC,KAAK,EAAE;MAEV,aAAa,GAAG,MAAK;QACnB,MAAM,MAAM,GAAG,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC;QAC7C,OAAO,MAAM,KAAK,GAAG,CAAC,gBAAgB,IAClC,MAAM,KAAK,GAAG,CAAC,mBAAmB;MACxC,CAAC;MAED,KAAK,GAAG,IAAI;KACb,MAAM,IACH,GAAG,EAAE,CAAC,SAAS,CAAC,8CAA8C,CAAC,GAAG,CAAC,EAAE;MACvE,KAAK,GAAG,IAAI,CAAC,UAAU,EAAE;MACzB,IAAI,CAAC,QAAQ,EAAE;MACf,aAAa,GAAG,MAAM,IAAI,CAAC,gBAAgB,CACvC,KAAK,EACL,GAAG,EAAE,CAAC,SAAS,CAAC,8CAA8C,CAAC,CAAC;KACrE,MAAM;MACL;MACA;MACA;MACA;MACA,aAAa,GAAG,MAAM,IAAI;IAC3B;IAED,OAAO;MAAC,KAAK;MAAE;IAAa,CAAC;EAC/B;EAEO,+BAA+B,CAClC,OAAqB,EAAE,YAAoB,EAC3C,YAAoB,EAAA;IACtB,OAAO,IAAI,CAAC,oBAAoB,CAC5B,OAAO,EACP,MAAM,UAAU,CAAC,qCAAqC,CAClD,IAAI,CAAC,EAAE,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC;EAC/C;EAEO,aAAa,CAAC,cAA2B,EAAA;IAC9C,IAAI,CAAC,eAAe,EAAE;IACtB,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE;IAClB,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,EAAE;MAC7B,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC,kBAAkB,CAAC,EAAE,CAAC;IACtD;IACD,MAAM,OAAO,GAAiB,UAAU,CAAC,aAAa,CAAC,EAAE,CAAC;IAC1D,UAAU,CAAC,YAAY,CACnB,EAAE,EAAE,MAAM,EAAE,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAC1D,UAAU,CAAC,YAAY,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC,YAAY,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;IAC3E,UAAU,CAAC,WAAW,CAAC,EAAE,EAAE,OAAO,CAAC;IAEnC,IAAI,QAA6B;IACjC;MACE,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE;QAChC,GAAG,EAAE,IAAI,CAAC,iBAAiB;OAC5B,CAAC;MACF,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC;MAClC;MACA;MACA,UAAU,CAAC,YAAY,CACnB,EAAE,EAAE,MAAM,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,oBAAoB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;MACvE,OAAO,CAAC,MAAM,CACZ,UAAU,CAAC,iCAAiC,CAAC,EAAE,EAAE,QAAQ,EACZ,IAAI,CAAC,YAAY,CAAC,EAC/D,oEAAoE,CAAC;MAEvE,IAAI,IAAI,CAAC,KAAK,EAAE;QACd,UAAU,CAAC,eAAe,CAAC,EAAE,EAAE,QAAQ,CAAC;MACzC;IACF;IACD,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;IAEzB,OAAO,QAAQ;EACjB;EAEO,aAAa,CAAC,OAA4B,EAAA;IAC/C,IAAI,CAAC,eAAe,EAAE;IACtB,IAAI,OAAO,KAAK,IAAI,CAAC,OAAO,EAAE;MAC5B,IAAI,CAAC,OAAO,GAAG,IAAI;IACpB;IACD,IAAI,OAAO,IAAI,IAAI,EAAE;MACnB,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;MACtE,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,GAAG,CAAC;IACpC;EACH;EAEO,UAAU,CAAC,OAAiC,EAAA;IACjD,IAAI,CAAC,eAAe,EAAE;IACtB,IAAI,CAAC,OAAO,GAAG,OAAO;IAEtB,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,EAAE;MACxB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;MAEtC,IAAI,IAAI,CAAC,KAAK,EAAE;QACd,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC;MAClD;IACF;IACD,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;EACrE;EAEO,kBAAkB,CACrB,OAAqB,EAAE,WAAmB,EACxB;IAAA,IAAlB,WAAW,uEAAG,IAAI;IACpB,IAAI,CAAC,eAAe,EAAE;IACtB,IAAI,WAAW,EAAE;MACf,OAAO,UAAU,CAAC,gCAAgC,CAC9C,IAAI,CAAC,EAAE,EAAE,OAAO,EAAE,WAAW,CAAC;KACnC,MAAM;MACL,OAAO,UAAU,CAAC,yBAAyB,CACvC,IAAI,CAAC,EAAE,EAAE,OAAO,EAAE,WAAW,CAAC;IACnC;EACH;EAEO,oBAAoB,CAAC,OAAqB,EAAE,SAAiB,EAAA;IAElE,IAAI,CAAC,eAAe,EAAE;IACtB,OAAO,UAAU,CAAC,YAAY,CAC1B,IAAI,CAAC,EAAE,EAAE,MAAM,IAAI,CAAC,EAAE,CAAC,iBAAiB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;EACnE;EAEO,yBAAyB,CAAC,OAAqB,EAAE,WAAmB,EAAA;IAEzE,IAAI,CAAC,eAAe,EAAE;IACtB,OAAO,IAAI,CAAC,EAAE,CAAC,kBAAkB,CAAC,OAAO,EAAE,WAAW,CAAC;EACzD;EAEO,qBAAqB,CACxB,kBAAgC,EAAE,eAAqC,EACvE,WAAmB,EAAA;IACrB,IAAI,CAAC,eAAe,EAAE;IACtB,IAAI,CAAC,gBAAgB,EAAE;IACvB,UAAU,CAAC,kCAAkC,CACzC,IAAI,CAAC,EAAE,EAAE,kBAAkB,EAAE,eAAe,EAAE,WAAW,CAAC;EAChE;EAEO,sBAAsB,CACzB,mBAAiC,EAAE,IAAY,EAAE,OAAe,EAAA;IAClE,IAAI,CAAC,4BAA4B,CAAC,mBAAmB,EAAE,OAAO,EAAE,IAAI,CAAC;EACvE;EAEO,4BAA4B,CAC/B,yBAAuC,EAAE,IAAY,EAAE,OAAe,EAAA;IACxE,IAAI,CAAC,eAAe,EAAE;IACtB,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,GACjB,QAAQ,CAAC,sCAAsC,CAAC,IAAI,EAAE,OAAO,CAAC;IAClE,IAAI,CAAC,4BAA4B,CAAC,yBAAyB,EAAE,KAAK,EAAE,MAAM,CAAC;EAC7E;EAEO,0BAA0B,CAC7B,QAAgB,EAAE,OAAe,EAAE,WAAmB,EACtD,UAAkB,EAAA;IACpB,IAAI,CAAC,gCAAgC,CACjC,WAAW,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,CAAC;EACjD;EAEO,gCAAgC,CACnC,QAAgB,EAAE,OAAe,EAAE,WAAmB,EACtD,UAAkB,EAAA;IACpB,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC;EACtE;EAEO,aAAa,GAAA;IAClB,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,EAAE;MACxB,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC;IAClD;IACD,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC;EACzC;EAEO,cAAc,GAAA;IACnB,IAAI,CAAC,eAAe,EAAE;IACtB,IAAI,CAAC,gBAAgB,EAAE;IACvB,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE;IAClB,IAAI,IAAI,CAAC,KAAK,EAAE;MACd,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,EAAE;MACtC,OAAO,CAAC,MAAM,CAAC,QAAQ,KAAK,IAAI,CAAC,OAAO,CAAC,GAAG,EAC7B,oDAAoD,CAAC;MAEpE,IAAI,CAAC,aAAa,EAAE;IACrB;IACD,UAAU,CAAC,YAAY,CACnB,EAAE,EAAE,MAAM,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;EACvE;EAEO,8BAA8B,GAAA;IACnC,IAAI,CAAC,eAAe,EAAE;IACtB,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC;EAC1D;EAEQ,sBAAsB,GAAA;IAE5B,IAAI,IAAI,CAAC,2BAA2B,IAAI,IAAI,EAAE;MAC5C,IAAI,CAAC,2BAA2B,GAC5B,UAAU,CAAC,mBAAmB,CAC1B,IAAI,CAAC,EAAE,EACP,GAAG,EAAE,CAAC,SAAS,CACX,8CAA8C,CAAC,KAAK,CAAC,GACrD,iCAAiC,GACjC,0BAA0B,CAED;IACtC;IACD,OAAO,IAAI,CAAC,2BAA2B;EACzC;EAEQ,4BAA4B,GAAA;IAClC,OAAO,IAAI,CAAC,sBAAsB,EAAE;EACtC;EAEQ,4BAA4B,GAAA;IAClC,OAAO,IAAI,CAAC,sBAAsB,EAAuC;EAC3E;EAEA,UAAU,GAAA;IACR,IAAI,GAAG,EAAE,CAAC,SAAS,CAAC,8CAA8C,CAAC,KAAK,CAAC,EAAE;MACzE,MAAM,GAAG,GAAG,IAAI,CAAC,EAA4B;MAC7C,MAAM,GAAG,GAAG,IAAI,CAAC,4BAA4B,EAAE;MAE/C,MAAM,KAAK,GAAG,GAAG,CAAC,WAAW,EAAE;MAC/B,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,gBAAgB,EAAE,KAAK,CAAC;MAC3C,OAAO,KAAK;IACb;IACD,MAAM,GAAG,GAAG,IAAI,CAAC,4BAA4B,EAAE;IAC/C,MAAM,KAAK,GAAG,GAAG,CAAC,cAAc,EAAgB;IAChD,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,gBAAgB,EAAE,KAAK,CAAC;IAC9C,OAAO,KAAK;EACd;EAEA,QAAQ,GAAA;IACN,IAAI,GAAG,EAAE,CAAC,SAAS,CAAC,8CAA8C,CAAC,KAAK,CAAC,EAAE;MACzE,MAAM,GAAG,GAAG,IAAI,CAAC,EAA4B;MAC7C,MAAM,GAAG,GAAG,IAAI,CAAC,4BAA4B,EAAE;MAC/C,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC;MAClC;IACD;IACD,MAAM,GAAG,GAAG,IAAI,CAAC,4BAA4B,EAAE;IAC/C,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,gBAAgB,CAAC;EACvC;EAEO,MAAM,sBAAsB,CAAC,KAAiB,EAAA;IACnD,MAAM,IAAI,CAAC,WAAW,CAClB,MAAM,IAAI,CAAC,QAAQ;IAAK;IACA;IACA;IACpB,IAAI,CAAC,gBAAgB,CACjB,KAAK,EACL,GAAG,EAAE,CAAC,SAAS,CACX,8CAA8C,CAAC,CAAC,CAAC;IACjE,OAAO,IAAI,CAAC,YAAY,CACpB,KAAK,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,8CAA8C,CAAC,CAAC;EAC7E;EAEQ,YAAY,CAAC,KAAiB,EAAE,iBAAyB,EAAA;IAC/D,IAAI,iBAAiB,KAAK,CAAC,EAAE;MAC3B,OAAO,IAAI;IACZ;IAED,IAAI,iBAAiB,KAAK,CAAC,EAAE;MAC3B,MAAM,GAAG,GAAG,IAAI,CAAC,EAA4B;MAE7C,MAAM,gBAAgB,GAAG,GAAG,CAAC,iBAAiB,CAAC,KAAK,EAAE,GAAG,CAAC,YAAY,CAAC;MACvE;MACA,OAAO,gBAAgB,GAAG,OAAO;KAClC,MAAM;MACL,MAAM,GAAG,GAAG,IAAI,CAAC,4BAA4B,EAAE;MAE/C,MAAM,gBAAgB,GAClB,GAAG,CAAC,iBAAiB,CAAC,KAAK,EAAE,GAAG,CAAC,gBAAgB,CAAC;MACtD;MACA,OAAO,gBAAgB,GAAG,OAAO;IAClC;EACH;EAEQ,gBAAgB,CAAC,KAAiB,EAAE,iBAAyB,EAAA;IAEnE,IAAI,iBAAiB,KAAK,CAAC,EAAE;MAC3B,OAAO,IAAI;IACZ;IAED,IAAI,iBAAiB,KAAK,CAAC,EAAE;MAC3B,MAAM,GAAG,GAAG,IAAI,CAAC,EAA4B;MAC7C,MAAM,GAAG,GAAG,IAAI,CAAC,4BAA4B,EAAE;MAE/C,MAAM,SAAS,GACX,GAAG,CAAC,iBAAiB,CAAC,KAAK,EAAE,GAAG,CAAC,sBAAsB,CAAC;MAC5D,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,GAAG,CAAC,gBAAgB,CAAC;MAC3D;MAED,OAAO,SAAS,IAAI,CAAC,IAAI,CAAC,QAAQ;KACnC,MAAM;MACL,MAAM,GAAG,GAAG,IAAI,CAAC,4BAA4B,EAAE;MAE/C,MAAM,SAAS,GACX,GAAG,CAAC,iBAAiB,CAAC,KAAK,EAAE,GAAG,CAAC,0BAA0B,CAAC;MAChE,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;QACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,GAAG,CAAC,gBAAgB,CAAC;MAC3D;MAED,OAAO,SAAS,IAAI,CAAC,IAAI,CAAC,QAAQ;IACnC;EACH;EAEA,SAAS,CAAC,YAA0B,EAAA;IAClC,OAAO,IAAI,OAAO,CAAO,OAAO,IAAG;MACjC,IAAI,CAAC,aAAa,CAAC,MAAM,YAAY,CAAC,aAAa,EAAE,EAAE,MAAM,OAAO,EAAE,CAAC;IACzE,CAAC,CAAC;EACJ;EAIA,SAAS,GAAA;IACP;IACA,MAAM,KAAK,GAAG,oBAAoB,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC;IACzE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,KAAK,EAAE,EAAE,CAAC,EAAE;MAC/B,MAAM;QAAC;MAAS,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;MACvC,SAAS,EAAE;IACZ;IACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;EACtD;EAEQ,aAAa,CAAC,QAAuB,EAAE,SAAqB,EAAA;IAClE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;MAAC,QAAQ;MAAE;IAAS,CAAC,CAAC;IAC5C,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;MAC/B;MACA;IACD;IACD;IACA,IAAI,UAAU,GAAG,SAAS;IAC1B,IAAI,kBAAkB,IAAI,GAAG,EAAE,CAAC,QAAQ,EAAE;MACxC,UAAU,GAAG,GAAG,EAAE,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC;IAClE;IACD,IAAI,CAAC,WAAW,CAAC,MAAK;MACpB,IAAI,CAAC,SAAS,EAAE;MAChB;MACA,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC;IACtC,CAAC,EAAE,MAAM,CAAC,EAAE,IAAI,EAAE,UAAU,CAAC;EAC/B;EAEQ,wBAAwB,CAAC,OAAqB,EAAA;IACpD,IAAI,CAAC,eAAe,EAAE;IACtB,UAAU,CAAC,6BAA6B,CACpC,IAAI,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC;IACvC,IAAI,IAAI,CAAC,KAAK,EAAE;MACd,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC;IACxC;EACH;EAEQ,0BAA0B,GAAA;IAChC,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,EAAE;MAC9B,UAAU,CAAC,6BAA6B,CACpC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC;MAClD,IAAI,IAAI,CAAC,KAAK,EAAE;QACd,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC;MACxC;KACF,MAAM;MACL,UAAU,CAAC,iCAAiC,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC;IACxE;EACH;EAEQ,oBAAoB,CACxB,OAAqB,EACrB,iBAAqC,EAAA;IACvC,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC;IACtC,MAAM,MAAM,GAAG,iBAAiB,EAAE;IAClC,IAAI,CAAC,0BAA0B,EAAE;IAEjC,OAAO,MAAM;EACf;EAEQ,4BAA4B,CAChC,8BAA4C,EAAE,KAAa,EAC3D,MAAc,EAAA;IAChB,IAAI,CAAC,eAAe,EAAE;IACtB,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE;IAClB,UAAU,CAAC,6BAA6B,CACpC,EAAE,EAAE,8BAA8B,EAAE,IAAI,CAAC,WAAW,CAAC;IACzD,IAAI,IAAI,CAAC,KAAK,EAAE;MACd,UAAU,CAAC,mBAAmB,CAAC,EAAE,CAAC;IACnC;IACD,IAAI,CAAC,aAAa,GAAG,8BAA8B;IACnD,UAAU,CAAC,YAAY,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IACnE,UAAU,CAAC,YAAY,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;EACpE;EAEQ,gCAAgC,CACpC,CAAS,EAAE,CAAS,EAAE,KAAa,EAAE,MAAc,EAAA;IACrD,IAAI,CAAC,eAAe,EAAE;IACtB,UAAU,CAAC,YAAY,CACnB,IAAI,CAAC,EAAE,EAAE,MAAM,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;EAC1D;EAEQ,eAAe,GAAA;IACrB,IAAI,IAAI,CAAC,QAAQ,EAAE;MACjB,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC;IAC3D;EACH;EAEQ,gBAAgB,GAAA;IACtB,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,EAAE;MACxB,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC;IACpD;EACH;AACD;AAOD;;;;;AAKG;AACH,OAAM,SAAU,oBAAoB,CAAC,GAAyB,EAAA;EAC5D,IAAI,CAAC,GAAG,CAAC;EACT,OAAO,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;IAC1B,MAAM,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE;IACvB,IAAI,CAAC,MAAM,EAAE;MACX;IACD;EACF;EACD,OAAO,CAAC,GAAG,CAAC;AACd","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension, WebGLParallelCompilationExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\ntype WebGLVao = WebGLVertexArrayObject | WebGLVertexArrayObjectOES;\n\nexport interface GPGPUContextProgram extends WebGLProgram {\n  vao: WebGLVao;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  parallelCompilationExtension: WebGLParallelCompilationExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: GPGPUContextProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  private vertexShader: WebGLShader;\n  textureConfig: TextureConfig;\n\n  createVertexArray: () => WebGLVao | null;\n  bindVertexArray: (vao: WebGLVao | null) => void;\n  deleteVertexArray: (vao: WebGLVao | null) => void;\n  getVertexArray: () => WebGLVao | null;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    gl = this.gl;\n\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      const gl2 = gl as WebGL2RenderingContext;\n      this.createVertexArray = () => {\n        return webgl_util.callAndCheck(gl2,\n          () => gl2.createVertexArray());\n      };\n      this.bindVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(gl2,\n          () => gl2.bindVertexArray(vao as WebGLVertexArrayObject));\n      };\n      this.deleteVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(gl2,\n          () => gl2.deleteVertexArray(vao as WebGLVertexArrayObject));\n      };\n      this.getVertexArray = () => {\n        return webgl_util.callAndCheck(gl2,\n          () => gl2.getParameter(gl2.VERTEX_ARRAY_BINDING));\n      };\n    } else if (gl != null) {\n      const ext = gl.getExtension('OES_vertex_array_object');\n      if (ext == null) {\n        throw new Error(\n            'All WebGL1 implementations are expected to offer' +\n            ' OES_vertex_array_object.');\n      }\n      this.createVertexArray = () => {\n        return webgl_util.callAndCheck(gl,\n          () => ext.createVertexArrayOES());\n      };\n      this.bindVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(gl,\n          () => ext.bindVertexArrayOES(vao as WebGLVertexArrayObjectOES));\n      };\n      this.deleteVertexArray = (vao: WebGLVao|null) => {\n        return webgl_util.callAndCheck(gl,\n          () => ext.deleteVertexArrayOES(vao as WebGLVertexArrayObjectOES));\n      };\n      this.getVertexArray = () => {\n        return webgl_util.callAndCheck(gl,\n          () => gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES));\n      };\n    }\n\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    this.parallelCompilationExtension =\n        this.gl.getExtension('KHR_parallel_shader_compile');\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support half float textures, yet the ' +\n            'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support color renderable half floats, yet ' +\n            'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return env().getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      ImageBitmap) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number): Texture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query,\n          env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, physicalRows, physicalCols));\n  }\n\n  public createProgram(fragmentShader: WebGLShader): GPGPUContextProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    if (this.vertexShader == null) {\n      this.vertexShader = gpgpu_util.createVertexShader(gl);\n    }\n    const program: WebGLProgram = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(\n        gl, () => gl.attachShader(program, this.vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n\n    let program2: GPGPUContextProgram;\n    {\n      program2 = Object.assign(program, {\n        vao: this.createVertexArray(),\n      });\n      this.bindVertexArray(program2.vao);\n      // Bind index buffer, and vertex buffers based on program attrib\n      // locations.\n      webgl_util.callAndCheck(\n          gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer));\n      console.assert(\n        gpgpu_util.bindVertexProgramAttributeStreams(gl, program2,\n                                                     this.vertexBuffer),\n        'gpgpu_util.bindVertexProgramAttributeStreams not fully successful.');\n\n      if (this.debug) {\n        webgl_util.validateProgram(gl, program2);\n      }\n    }\n    this.setProgram(program2);\n\n    return program2;\n  }\n\n  public deleteProgram(program: GPGPUContextProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n      this.deleteVertexArray(program.vao);\n    }\n  }\n\n  public setProgram(program: GPGPUContextProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n\n    if (this.program != null) {\n      this.bindVertexArray(this.program.vao);\n\n      if (this.debug) {\n        webgl_util.validateProgram(this.gl, this.program);\n      }\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      const boundVao = this.getVertexArray();\n      console.assert(boundVao === this.program.vao,\n                     'VAO changed between setProgram and executeProgram!');\n\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl,\n              env().getNumber(\n                  'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                env().getNumber(\n                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    let scheduleFn = undefined;\n    if ('setTimeoutCustom' in env().platform) {\n      scheduleFn = env().platform.setTimeoutCustom.bind(env().platform);\n    }\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    }, () => 0, null, scheduleFn);\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}