{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nimport { BatchNormProgram } from '../batchnorm_gpu';\nimport { BatchNormPackedProgram } from '../batchnorm_packed_gpu';\nexport const batchNorm = _ref => {\n  let {\n    inputs,\n    backend,\n    attrs\n  } = _ref;\n  const {\n    x,\n    mean,\n    variance,\n    offset,\n    scale\n  } = inputs;\n  util.assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' + 'equal ranks.');\n  util.assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' + 'equal ranks.');\n  util.assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' + 'equal ranks.');\n  let {\n    varianceEpsilon\n  } = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n  const finalInputs = [x, mean, variance];\n  let offsetShape = null;\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n  let scaleShape = null;\n  if (scale != null) {\n    scaleShape = scale.shape;\n    finalInputs.push(scale);\n  }\n  const program = env().getBool('WEBGL_PACK_NORMALIZATION') ? new BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon) : new BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n  const output = backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n  return output;\n};\nexport const batchNormConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgl',\n  kernelFunc: batchNorm\n};","map":{"version":3,"sources":["../../src/kernels/BatchNorm.ts"],"names":[],"mappings":"AACA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,GAAG,EAAE,cAAc,EAAmF,IAAI,QAAO,uBAAuB;AAGhJ,SAAQ,gBAAgB,QAAO,kBAAkB;AACjD,SAAQ,sBAAsB,QAAO,yBAAyB;AAE9D,OAAO,MAAM,SAAS,GAIH,QAA6B;EAAA,IAA5B;IAAC,MAAM;IAAE,OAAO;IAAE;EAAK,CAAC;EAC1C,MAAM;IAAC,CAAC;IAAE,IAAI;IAAE,QAAQ;IAAE,MAAM;IAAE;EAAK,CAAC,GAAG,MAAM;EAEjD,IAAI,CAAC,MAAM,CACP,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,QAAQ,CAAC,KAAK,CAAC,MAAM,EAC3C,MAAM,kEAAkE,GACpE,cAAc,CAAC;EACvB,IAAI,CAAC,MAAM,CACP,MAAM,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,MAAM,CAAC,KAAK,CAAC,MAAM,EAC3D,MAAM,gEAAgE,GAClE,cAAc,CAAC;EACvB,IAAI,CAAC,MAAM,CACP,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,KAAK,CAAC,KAAK,CAAC,MAAM,EACzD,MAAM,+DAA+D,GACjE,cAAc,CAAC;EAEvB,IAAI;IAAC;EAAe,CAAC,GAAG,KAAK;EAC7B,IAAI,eAAe,IAAI,IAAI,EAAE;IAC3B,eAAe,GAAG,KAAK;EACxB;EAED,MAAM,WAAW,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC;EAEvC,IAAI,WAAW,GAAG,IAAI;EACtB,IAAI,MAAM,IAAI,IAAI,EAAE;IAClB,WAAW,GAAG,MAAM,CAAC,KAAK;IAC1B,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC;EACzB;EAED,IAAI,UAAU,GAAG,IAAI;EACrB,IAAI,KAAK,IAAI,IAAI,EAAE;IACjB,UAAU,GAAG,KAAK,CAAC,KAAK;IACxB,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC;EACxB;EAED,MAAM,OAAO,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,0BAA0B,CAAC,GACrD,IAAI,sBAAsB,CACtB,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,WAAW,EAAE,UAAU,EAC5D,eAAe,CAAC,GACpB,IAAI,gBAAgB,CAChB,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,WAAW,EAAE,UAAU,EAC5D,eAAe,CAAC;EACxB,MAAM,MAAM,GACR,OAAO,CAAC,eAAe,CAAC,OAAO,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;EAEvE,OAAO,MAAM;AACf,CAAC;AAED,OAAO,MAAM,eAAe,GAAiB;EAC3C,UAAU,EAAE,cAAc;EAC1B,WAAW,EAAE,OAAO;EACpB,UAAU,EAAE;CACb","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nimport { BatchNormProgram } from '../batchnorm_gpu';\nimport { BatchNormPackedProgram } from '../batchnorm_packed_gpu';\nexport const batchNorm = ({ inputs, backend, attrs }) => {\n    const { x, mean, variance, offset, scale } = inputs;\n    util.assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' +\n        'equal ranks.');\n    util.assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' +\n        'equal ranks.');\n    util.assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' +\n        'equal ranks.');\n    let { varianceEpsilon } = attrs;\n    if (varianceEpsilon == null) {\n        varianceEpsilon = 0.001;\n    }\n    const finalInputs = [x, mean, variance];\n    let offsetShape = null;\n    if (offset != null) {\n        offsetShape = offset.shape;\n        finalInputs.push(offset);\n    }\n    let scaleShape = null;\n    if (scale != null) {\n        scaleShape = scale.shape;\n        finalInputs.push(scale);\n    }\n    const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n        new BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon) :\n        new BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n    const output = backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n    return output;\n};\nexport const batchNormConfig = {\n    kernelName: FusedBatchNorm,\n    backendName: 'webgl',\n    kernelFunc: batchNorm,\n};\n//# sourceMappingURL=BatchNorm.js.map"]},"metadata":{},"sourceType":"module"}