{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { LazyIterator, OneToManyIterator } from './lazy_iterator';\nimport { StringIterator } from './string_iterator';\nexport class ByteChunkIterator extends LazyIterator {\n  /**\n   * Decode a stream of UTF8-encoded byte arrays to a stream of strings.\n   *\n   * The byte arrays producetd from the ByteChunkIterator on which this is\n   * called will be interpreted as concatenated.  No assumptions are made about\n   * the boundaries of the incoming chunks, so a multi-byte UTF8 encoding of a\n   * character may span the boundary between chunks.  This naturally happens,\n   * for instance, when reading fixed-size byte arrays from a file.\n   */\n  decodeUTF8() {\n    return new Utf8Iterator(this);\n  }\n}\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on ByteChunkIterator.  Unfortunately they can't be placed in separate files,\n// due to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class Utf8Iterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\nclass Utf8Iterator extends StringIterator {\n  constructor(upstream) {\n    super();\n    this.upstream = upstream;\n    this.impl = new Utf8IteratorImpl(upstream);\n  }\n  summary() {\n    return this.impl.summary();\n  }\n  async next() {\n    return this.impl.next();\n  }\n}\n/**\n * Decode a stream of UTF8-encoded byte arrays to a stream of strings.\n *\n * This is tricky because the incoming byte array boundaries may disrupt a\n * multi-byte UTF8 character. Thus any incomplete character data at the end of\n * a chunk must be carried over and prepended to the next chunk before\n * decoding. Luckily with native decoder, TextDecoder in browser and\n * string_decoder in node, byte array boundaries are handled automatically.\n *\n * In the context of an input pipeline for machine learning, UTF8 decoding is\n * needed to parse text files containing training examples or prediction\n * requests (e.g., formatted as CSV or JSON). We cannot use the built-in\n * decoding provided by FileReader.readAsText() because here we are in a\n * streaming context, which FileReader does not support.\n *\n * @param upstream A `LazyIterator` of `Uint8Arrays` containing UTF8-encoded\n *   text, which should be interpreted as concatenated.  No assumptions are\n *   made about the boundaries of the incoming chunks, so a multi-byte UTF8\n *   encoding of a character may span the boundary between chunks.  This\n *   naturally happens, for instance, when reading fixed-size byte arrays from a\n *   file.\n */\nclass Utf8IteratorImpl extends OneToManyIterator {\n  constructor(upstream) {\n    super();\n    this.upstream = upstream;\n    if (env().get('IS_BROWSER')) {\n      this.decoder = new TextDecoder('utf-8');\n    } else {\n      // tslint:disable-next-line:no-require-imports\n      const {\n        StringDecoder\n      } = require('string_decoder');\n      this.decoder = new StringDecoder('utf8');\n    }\n  }\n  summary() {\n    return `${this.upstream.summary()} -> Utf8`;\n  }\n  async pump() {\n    const chunkResult = await this.upstream.next();\n    let chunk;\n    if (chunkResult.done) {\n      return false;\n    } else {\n      chunk = chunkResult.value;\n    }\n    let text;\n    if (env().get('IS_BROWSER')) {\n      text = this.decoder.decode(chunk, {\n        stream: true\n      });\n    } else {\n      text = this.decoder.write(Buffer.from(chunk.buffer));\n    }\n    this.outputQueue.push(text);\n    return true;\n  }\n}","map":{"version":3,"sources":["../../src/iterators/byte_chunk_iterator.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBG;AAEH,SAAQ,GAAG,QAAO,uBAAuB;AACzC,SAAQ,YAAY,EAAE,iBAAiB,QAAO,iBAAiB;AAC/D,SAAQ,cAAc,QAAO,mBAAmB;AAEhD,OAAM,MAAgB,iBAAkB,SAAQ,YAAwB,CAAA;EACtE;;;;;;;;AAQG;EACH,UAAU,GAAA;IACR,OAAO,IAAI,YAAY,CAAC,IAAI,CAAC;EAC/B;AACD;AAED;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,MAAM,YAAa,SAAQ,cAAc,CAAA;EAGvC,WAAA,CAAsB,QAAkC,EAAA;IACtD,KAAK,EAAE;IADa,IAAA,CAAA,QAAQ,GAAR,QAAQ;IAE5B,IAAI,CAAC,IAAI,GAAG,IAAI,gBAAgB,CAAC,QAAQ,CAAC;EAC5C;EAEA,OAAO,GAAA;IACL,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;EAC5B;EAEA,MAAM,IAAI,GAAA;IACR,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;EACzB;AACD;AAED;;;;;;;;;;;;;;;;;;;;;AAqBG;AACH,MAAM,gBAAiB,SAAQ,iBAAyB,CAAA;EAMtD,WAAA,CAA+B,QAAkC,EAAA;IAC/D,KAAK,EAAE;IADsB,IAAA,CAAA,QAAQ,GAAR,QAAQ;IAErC,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;MAC3B,IAAI,CAAC,OAAO,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC;KACxC,MAAM;MACL;MACA,MAAM;QAAC;MAAa,CAAC,GAAG,OAAO,CAAC,gBAAgB,CAAC;MACjD,IAAI,CAAC,OAAO,GAAG,IAAI,aAAa,CAAC,MAAM,CAAC;IACzC;EACH;EACA,OAAO,GAAA;IACL,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,UAAU;EAC7C;EAEA,MAAM,IAAI,GAAA;IACR,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;IAC9C,IAAI,KAAK;IACT,IAAI,WAAW,CAAC,IAAI,EAAE;MACpB,OAAO,KAAK;KACb,MAAM;MACL,KAAK,GAAG,WAAW,CAAC,KAAK;IAC1B;IAED,IAAI,IAAY;IAChB,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;MAC3B,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE;QAAC,MAAM,EAAE;MAAI,CAAC,CAAC;KAClD,MAAM;MACL,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACrD;IACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;IAC3B,OAAO,IAAI;EACb;AACD","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { LazyIterator, OneToManyIterator } from './lazy_iterator';\nimport { StringIterator } from './string_iterator';\nexport class ByteChunkIterator extends LazyIterator {\n    /**\n     * Decode a stream of UTF8-encoded byte arrays to a stream of strings.\n     *\n     * The byte arrays producetd from the ByteChunkIterator on which this is\n     * called will be interpreted as concatenated.  No assumptions are made about\n     * the boundaries of the incoming chunks, so a multi-byte UTF8 encoding of a\n     * character may span the boundary between chunks.  This naturally happens,\n     * for instance, when reading fixed-size byte arrays from a file.\n     */\n    decodeUTF8() {\n        return new Utf8Iterator(this);\n    }\n}\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on ByteChunkIterator.  Unfortunately they can't be placed in separate files,\n// due to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class Utf8Iterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\nclass Utf8Iterator extends StringIterator {\n    constructor(upstream) {\n        super();\n        this.upstream = upstream;\n        this.impl = new Utf8IteratorImpl(upstream);\n    }\n    summary() {\n        return this.impl.summary();\n    }\n    async next() {\n        return this.impl.next();\n    }\n}\n/**\n * Decode a stream of UTF8-encoded byte arrays to a stream of strings.\n *\n * This is tricky because the incoming byte array boundaries may disrupt a\n * multi-byte UTF8 character. Thus any incomplete character data at the end of\n * a chunk must be carried over and prepended to the next chunk before\n * decoding. Luckily with native decoder, TextDecoder in browser and\n * string_decoder in node, byte array boundaries are handled automatically.\n *\n * In the context of an input pipeline for machine learning, UTF8 decoding is\n * needed to parse text files containing training examples or prediction\n * requests (e.g., formatted as CSV or JSON). We cannot use the built-in\n * decoding provided by FileReader.readAsText() because here we are in a\n * streaming context, which FileReader does not support.\n *\n * @param upstream A `LazyIterator` of `Uint8Arrays` containing UTF8-encoded\n *   text, which should be interpreted as concatenated.  No assumptions are\n *   made about the boundaries of the incoming chunks, so a multi-byte UTF8\n *   encoding of a character may span the boundary between chunks.  This\n *   naturally happens, for instance, when reading fixed-size byte arrays from a\n *   file.\n */\nclass Utf8IteratorImpl extends OneToManyIterator {\n    constructor(upstream) {\n        super();\n        this.upstream = upstream;\n        if (env().get('IS_BROWSER')) {\n            this.decoder = new TextDecoder('utf-8');\n        }\n        else {\n            // tslint:disable-next-line:no-require-imports\n            const { StringDecoder } = require('string_decoder');\n            this.decoder = new StringDecoder('utf8');\n        }\n    }\n    summary() {\n        return `${this.upstream.summary()} -> Utf8`;\n    }\n    async pump() {\n        const chunkResult = await this.upstream.next();\n        let chunk;\n        if (chunkResult.done) {\n            return false;\n        }\n        else {\n            chunk = chunkResult.value;\n        }\n        let text;\n        if (env().get('IS_BROWSER')) {\n            text = this.decoder.decode(chunk, { stream: true });\n        }\n        else {\n            text = this.decoder.write(Buffer.from(chunk.buffer));\n        }\n        this.outputQueue.push(text);\n        return true;\n    }\n}\n//# sourceMappingURL=byte_chunk_iterator.js.map"]},"metadata":{},"sourceType":"module"}